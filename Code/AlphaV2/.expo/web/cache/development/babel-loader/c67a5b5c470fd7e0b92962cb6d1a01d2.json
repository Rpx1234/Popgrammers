{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nvar UNINTIALIZED_STATE = {};\nexport default function useSyncState(initialState) {\n  var stateRef = React.useRef(UNINTIALIZED_STATE);\n  var isSchedulingRef = React.useRef(false);\n  var isMountedRef = React.useRef(true);\n  React.useEffect(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current = typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  var _React$useState = React.useState(stateRef.current),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      trackingState = _React$useState2[0],\n      setTrackingState = _React$useState2[1];\n\n  var getState = React.useCallback(function () {\n    return stateRef.current;\n  }, []);\n  var setState = React.useCallback(function (state) {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n  var scheduleUpdate = React.useCallback(function (callback) {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n  var flushUpdates = React.useCallback(function () {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    setTrackingState(stateRef.current);\n  }, []);\n\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  var state = stateRef.current;\n  React.useDebugValue(state);\n  return [state, getState, setState, scheduleUpdate, flushUpdates];\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,IAAMC,kBAAkB,GAAG,EAA3B;AAKA,eAAe,SAASC,YAAT,CAAyBC,YAAzB,EAAuD;AACpE,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAANL,CAAgBC,kBAAhBD,CAAjB;AACA,MAAMM,eAAe,GAAGN,KAAK,CAACK,MAANL,CAAa,KAAbA,CAAxB;AACA,MAAMO,YAAY,GAAGP,KAAK,CAACK,MAANL,CAAa,IAAbA,CAArB;AAEAA,OAAK,CAACQ,SAANR,CAAgB,YAAM;AACpBO,gBAAY,CAACE,OAAbF,GAAuB,IAAvBA;AAEA,WAAO,YAAM;AACXA,kBAAY,CAACE,OAAbF,GAAuB,KAAvBA;AADF;AAHF,KAMG,EANHP;;AAQA,MAAII,QAAQ,CAACK,OAATL,KAAqBH,kBAAzB,EAA6C;AAC3CG,YAAQ,CAACK,OAATL,GAEE,OAAOD,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,EAAjD,GAAsDA,YAFxDC;AAGD;;AAED,wBAA0CJ,KAAK,CAACU,QAANV,CAAeI,QAAQ,CAACK,OAAxBT,CAA1C;AAAA;AAAA,MAAOW,aAAP;AAAA,MAAsBC,gBAAtB;;AAEA,MAAMC,QAAQ,GAAGb,KAAK,CAACc,WAANd,CAAkB;AAAA,WAAMI,QAAQ,CAACK,OAAf;AAAA,GAAlBT,EAA0C,EAA1CA,CAAjB;AAEA,MAAMe,QAAQ,GAAGf,KAAK,CAACc,WAANd,CAAmBgB,eAAD,EAAc;AAC/C,QAAIA,KAAK,KAAKZ,QAAQ,CAACK,OAAnBO,IAA8B,CAACT,YAAY,CAACE,OAAhD,EAAyD;AACvD;AACD;;AAEDL,YAAQ,CAACK,OAATL,GAAmBY,KAAnBZ;;AAEA,QAAI,CAACE,eAAe,CAACG,OAArB,EAA8B;AAC5BG,sBAAgB,CAACI,KAAD,CAAhBJ;AACD;AATc,KAUd,EAVcZ,CAAjB;AAYA,MAAMiB,cAAc,GAAGjB,KAAK,CAACc,WAANd,CAAmBkB,kBAAD,EAA0B;AACjEZ,mBAAe,CAACG,OAAhBH,GAA0B,IAA1BA;;AAEA,QAAI;AACFY,cAAQ;AADV,cAEU;AACRZ,qBAAe,CAACG,OAAhBH,GAA0B,KAA1BA;AACD;AAPoB,KAQpB,EARoBN,CAAvB;AAUA,MAAMmB,YAAY,GAAGnB,KAAK,CAACc,WAANd,CAAkB,YAAM;AAC3C,QAAI,CAACO,YAAY,CAACE,OAAlB,EAA2B;AACzB;AAFyC;;AAO3CG,oBAAgB,CAACR,QAAQ,CAACK,OAAV,CAAhBG;AAPmB,KAQlB,EARkBZ,CAArB;;AAYA,MAAIW,aAAa,KAAKP,QAAQ,CAACK,OAA/B,EAAwC;AACtCG,oBAAgB,CAACR,QAAQ,CAACK,OAAV,CAAhBG;AACD;;AAED,MAAMI,KAAK,GAAGZ,QAAQ,CAACK,OAAvB;AAEAT,OAAK,CAACoB,aAANpB,CAAoBgB,KAApBhB;AAEA,SAAO,CAACgB,KAAD,EAAQH,QAAR,EAAkBE,QAAlB,EAA4BE,cAA5B,EAA4CE,YAA5C,CAAP;AACD","names":["React","UNINTIALIZED_STATE","useSyncState","initialState","stateRef","useRef","isSchedulingRef","isMountedRef","useEffect","current","useState","trackingState","setTrackingState","getState","useCallback","setState","state","scheduleUpdate","callback","flushUpdates","useDebugValue"],"sources":["useSyncState.tsx"],"sourcesContent":["import * as React from 'react';\n\nconst UNINTIALIZED_STATE = {};\n\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\nexport default function useSyncState<T>(initialState?: (() => T) | T) {\n  const stateRef = React.useRef<T>(UNINTIALIZED_STATE as any);\n  const isSchedulingRef = React.useRef(false);\n  const isMountedRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n      // @ts-expect-error: initialState is a function, but TypeScript doesn't think so\n      typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n\n  const getState = React.useCallback(() => stateRef.current, []);\n\n  const setState = React.useCallback((state: T) => {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n\n  const scheduleUpdate = React.useCallback((callback: () => void) => {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n\n  const flushUpdates = React.useCallback(() => {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n    setTrackingState(stateRef.current);\n  }, []);\n\n  // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  const state = stateRef.current;\n\n  React.useDebugValue(state);\n\n  return [state, getState, setState, scheduleUpdate, flushUpdates] as const;\n}\n"]},"metadata":{},"sourceType":"module"}