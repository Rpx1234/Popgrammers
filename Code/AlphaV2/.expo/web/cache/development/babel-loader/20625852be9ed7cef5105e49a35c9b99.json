{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nvar CSSTransitions = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd'\n};\nexport default function NativeSafeAreaView(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      onInsetsChange = _ref.onInsetsChange;\n  React.useEffect(function () {\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    var element = createContextElement();\n    document.body.appendChild(element);\n\n    var onEnd = function onEnd() {\n      var _window$getComputedSt = window.getComputedStyle(element),\n          paddingTop = _window$getComputedSt.paddingTop,\n          paddingBottom = _window$getComputedSt.paddingBottom,\n          paddingLeft = _window$getComputedSt.paddingLeft,\n          paddingRight = _window$getComputedSt.paddingRight;\n\n      var insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0\n      };\n      var frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight\n      };\n      onInsetsChange({\n        nativeEvent: {\n          insets: insets,\n          frame: frame\n        }\n      });\n    };\n\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return function () {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n  return React.createElement(View, {\n    style: style\n  }, children);\n}\nvar _supportedTransitionEvent = null;\n\nfunction getSupportedTransitionEvent() {\n  if (_supportedTransitionEvent !== null) {\n    return _supportedTransitionEvent;\n  }\n\n  var element = document.createElement('invalidtype');\n  _supportedTransitionEvent = CSSTransitions.Transition;\n\n  for (var key in CSSTransitions) {\n    if (element.style[key] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n\n  return _supportedTransitionEvent;\n}\n\nvar _supportedEnv = null;\n\nfunction getSupportedEnv() {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n\n  var _window = window,\n      CSS = _window.CSS;\n\n  if (CSS && CSS.supports && CSS.supports('top: constant(safe-area-inset-top)')) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n\n  return _supportedEnv;\n}\n\nfunction getInset(side) {\n  return getSupportedEnv() + \"(safe-area-inset-\" + side + \")\";\n}\n\nfunction createContextElement() {\n  var element = document.createElement('div');\n  var style = element.style;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden';\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}","map":{"version":3,"mappings":"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","names":["React","CSSTransitions","WebkitTransition","Transition","MozTransition","MSTransition","OTransition","NativeSafeAreaView","children","style","onInsetsChange","useEffect","document","element","createContextElement","body","appendChild","onEnd","window","getComputedStyle","paddingTop","paddingBottom","paddingLeft","paddingRight","insets","top","parseInt","bottom","left","right","frame","x","y","width","documentElement","offsetWidth","height","offsetHeight","nativeEvent","addEventListener","getSupportedTransitionEvent","removeChild","removeEventListener","View","_supportedTransitionEvent","createElement","key","undefined","_supportedEnv","getSupportedEnv","CSS","supports","getInset","side","position","zIndex","overflow","visibility","transitionDuration","transitionProperty","transitionDelay"],"sources":["NativeSafeAreaProvider.tsx"],"sourcesContent":["/* eslint-env browser */\n\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { NativeSafeAreaProviderProps } from './SafeArea.types';\n\n/**\n * TODO:\n * Currently insets and frame are based on the window and are not\n * relative to the provider view. This is inconsistent with iOS and Android.\n * However in most cases if the provider view covers the screen this is not\n * an issue.\n */\n\nconst CSSTransitions: Record<string, string> = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd',\n};\n\nexport default function NativeSafeAreaView({\n  children,\n  style,\n  onInsetsChange,\n}: NativeSafeAreaProviderProps) {\n  React.useEffect(() => {\n    // Skip for SSR.\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    const element = createContextElement();\n    document.body.appendChild(element);\n    const onEnd = () => {\n      const { paddingTop, paddingBottom, paddingLeft, paddingRight } =\n        window.getComputedStyle(element);\n\n      const insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0,\n      };\n      const frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight,\n      };\n      // @ts-ignore: missing properties\n      onInsetsChange({ nativeEvent: { insets, frame } });\n    };\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return () => {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n\n  return <View style={style}>{children}</View>;\n}\n\nlet _supportedTransitionEvent: string | null = null;\nfunction getSupportedTransitionEvent(): string {\n  if (_supportedTransitionEvent !== null) {\n    return _supportedTransitionEvent;\n  }\n  const element = document.createElement('invalidtype');\n\n  _supportedTransitionEvent = CSSTransitions.Transition;\n  for (const key in CSSTransitions) {\n    if (element.style[key as keyof CSSStyleDeclaration] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n  return _supportedTransitionEvent;\n}\n\ntype CssEnv = 'constant' | 'env';\n\nlet _supportedEnv: CssEnv | null = null;\nfunction getSupportedEnv(): CssEnv {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n  const { CSS } = window;\n  if (\n    CSS &&\n    CSS.supports &&\n    CSS.supports('top: constant(safe-area-inset-top)')\n  ) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n  return _supportedEnv;\n}\n\nfunction getInset(side: string): string {\n  return `${getSupportedEnv()}(safe-area-inset-${side})`;\n}\n\nfunction createContextElement(): HTMLElement {\n  const element = document.createElement('div');\n  const { style } = element;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden';\n  // Bacon: Anything faster than this and the callback will be invoked too early with the wrong insets\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}\n"]},"metadata":{},"sourceType":"module"}