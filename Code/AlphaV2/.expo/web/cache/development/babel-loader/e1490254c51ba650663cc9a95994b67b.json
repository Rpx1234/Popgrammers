{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { nanoid } from 'nanoid/non-secure';\nvar BaseRouter = {\n  getStateForAction: function getStateForAction(state, action) {\n    switch (action.type) {\n      case 'SET_PARAMS':\n        {\n          var index = action.source ? state.routes.findIndex(function (r) {\n            return r.key === action.source;\n          }) : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: state.routes.map(function (r, i) {\n              return i === index ? _objectSpread(_objectSpread({}, r), {}, {\n                params: _objectSpread(_objectSpread({}, r.params), action.payload.params)\n              }) : r;\n            })\n          });\n        }\n\n      case 'RESET':\n        {\n          var nextState = action.payload;\n\n          if (nextState.routes.length === 0 || nextState.routes.some(function (route) {\n            return !state.routeNames.includes(route.name);\n          })) {\n            return null;\n          }\n\n          if (nextState.stale === false) {\n            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(function (name) {\n              return !state.routeNames.includes(name);\n            })) {\n              return null;\n            }\n\n            return _objectSpread(_objectSpread({}, nextState), {}, {\n              routes: nextState.routes.map(function (route) {\n                return route.key ? route : _objectSpread(_objectSpread({}, route), {}, {\n                  key: route.name + \"-\" + nanoid()\n                });\n              })\n            });\n          }\n\n          return nextState;\n        }\n\n      default:\n        return null;\n    }\n  },\n  shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n    return action.type === 'NAVIGATE';\n  }\n};\nexport default BaseRouter;","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AAYA,IAAMC,UAAU,GAAG;AACjBC,mBADiB,6BAEfC,KAFe,EAGfC,MAHe,EAIqB;AACpC,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,YAAL;AAAmB;AACjB,cAAMC,KAAK,GAAGF,MAAM,CAACG,MAAPH,GACVD,KAAK,CAACK,MAANL,CAAaM,SAAbN,CAAwBO,WAAD;AAAA,mBAAOA,CAAC,CAACC,GAAFD,KAAUN,MAAM,CAACG,MAAxB;AAAA,WAAvBJ,CADUC,GAEVD,KAAK,CAACG,KAFV;;AAIA,cAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,mBAAO,IAAP;AACD;;AAED,iDACKH,KADL;AAEEK,kBAAM,EAAEL,KAAK,CAACK,MAANL,CAAaS,GAAbT,CAAiB,UAACO,CAAD,EAAIG,CAAJ;AAAA,qBACvBA,CAAC,KAAKP,KAANO,mCACSH,CADTG;AACYC,sBAAM,kCAAOJ,CAAC,CAACI,MAAT,GAAoBV,MAAM,CAACW,OAAPX,CAAeU,MAAnC;AADlBD,mBAEIH,CAHmB;AAAA,aAAjBP;AAFV;AAQD;;AAED,WAAK,OAAL;AAAc;AACZ,cAAMa,SAAS,GAAGZ,MAAM,CAACW,OAAzB;;AAEA,cACEC,SAAS,CAACR,MAAVQ,CAAiBC,MAAjBD,KAA4B,CAA5BA,IACAA,SAAS,CAACR,MAAVQ,CAAiBE,IAAjBF,CACGG,eAAD;AAAA,mBAA6B,CAAChB,KAAK,CAACiB,UAANjB,CAAiBkB,QAAjBlB,CAA0BgB,KAAK,CAACG,IAAhCnB,CAA9B;AAAA,WADFa,CAFF,EAKE;AACA,mBAAO,IAAP;AACD;;AAED,cAAIA,SAAS,CAACO,KAAVP,KAAoB,KAAxB,EAA+B;AAC7B,gBACEb,KAAK,CAACiB,UAANjB,CAAiBc,MAAjBd,KAA4Ba,SAAS,CAACI,UAAVJ,CAAqBC,MAAjDd,IACAa,SAAS,CAACI,UAAVJ,CAAqBE,IAArBF,CACGM,cAAD;AAAA,qBAAU,CAACnB,KAAK,CAACiB,UAANjB,CAAiBkB,QAAjBlB,CAA0BmB,IAA1BnB,CAAX;AAAA,aADFa,CAFF,EAKE;AACA,qBAAO,IAAP;AACD;;AAED,mDACKA,SADL;AAEER,oBAAM,EAAEQ,SAAS,CAACR,MAAVQ,CAAiBJ,GAAjBI,CAAsBG,eAAD;AAAA,uBAC3BA,KAAK,CAACR,GAANQ,GAAYA,KAAZA,mCAAyBA,KAAzBA;AAAgCR,qBAAG,EAAKQ,KAAK,CAACG,IAAX,SAAmBtB,MAAM;AAA5DmB,kBAD2B;AAAA,eAArBH;AAFV;AAMD;;AAED,iBAAOA,SAAP;AACD;;AAED;AACE,eAAO,IAAP;AAtDJ;AALe;AA+DjBQ,yBA/DiB,mCA+DOpB,MA/DP,EA+DuC;AACtD,WAAOA,MAAM,CAACC,IAAPD,KAAgB,UAAvB;AACD;AAjEgB,CAAnB;AAoEA,eAAeH,UAAf","names":["nanoid","BaseRouter","getStateForAction","state","action","type","index","source","routes","findIndex","r","key","map","i","params","payload","nextState","length","some","route","routeNames","includes","name","stale","shouldActionChangeFocus"],"sources":["BaseRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport type {\n  CommonNavigationAction,\n  NavigationState,\n  PartialState,\n} from './types';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction<State extends NavigationState>(\n    state: State,\n    action: CommonNavigationAction\n  ): State | PartialState<State> | null {\n    switch (action.type) {\n      case 'SET_PARAMS': {\n        const index = action.source\n          ? state.routes.findIndex((r) => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        return {\n          ...state,\n          routes: state.routes.map((r, i) =>\n            i === index\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\n              : r\n          ),\n        };\n      }\n\n      case 'RESET': {\n        const nextState = action.payload as State | PartialState<State>;\n\n        if (\n          nextState.routes.length === 0 ||\n          nextState.routes.some(\n            (route: { name: string }) => !state.routeNames.includes(route.name)\n          )\n        ) {\n          return null;\n        }\n\n        if (nextState.stale === false) {\n          if (\n            state.routeNames.length !== nextState.routeNames.length ||\n            nextState.routeNames.some(\n              (name) => !state.routeNames.includes(name)\n            )\n          ) {\n            return null;\n          }\n\n          return {\n            ...nextState,\n            routes: nextState.routes.map((route) =>\n              route.key ? route : { ...route, key: `${route.name}-${nanoid()}` }\n            ),\n          };\n        }\n\n        return nextState;\n      }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action: CommonNavigationAction) {\n    return action.type === 'NAVIGATE';\n  },\n};\n\nexport default BaseRouter;\n"]},"metadata":{},"sourceType":"module"}