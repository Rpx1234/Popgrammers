{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { PureComponent } from 'react';\nimport createIconSet from \"./createIconSet\";\nexport default function createMultiStyleIconSet(styles) {\n  var optionsInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var styleNames = Object.keys(styles);\n\n  if (styleNames.length === 0) {\n    throw new Error('You need to add at least one style');\n  }\n\n  var options = _objectSpread({\n    defaultStyle: styleNames[0],\n    fallbackFamily: function fallbackFamily(_unused) {\n      return styleNames[0];\n    },\n    glyphValidator: function glyphValidator(_unused, __unused) {\n      return true;\n    }\n  }, optionsInput);\n\n  var iconSets = styleNames.reduce(function (acc, name) {\n    var style = styles[name];\n    acc[name] = createIconSet(style.glyphMap || {}, style.fontFamily || '', style.fontFile || '', style.fontStyle || {});\n    return acc;\n  }, {});\n\n  function styleFromProps(props) {\n    return Object.keys(props).reduce(function (result, propName) {\n      return styleNames.indexOf(propName) !== -1 && props[propName] === true ? propName : result;\n    }, options.defaultStyle);\n  }\n\n  function getIconSetForProps(props) {\n    var name = props.name;\n    var style = styleFromProps(props);\n    if (options.glyphValidator(name, style)) return iconSets[style];\n    var family = options.fallbackFamily(name);\n\n    if (styleNames.indexOf(family) === -1) {\n      return options.defaultStyle;\n    }\n\n    return iconSets[family];\n  }\n\n  function selectIconClass(iconSet, iconClass) {\n    return iconClass.length > 0 ? iconSet[iconClass] : iconSet;\n  }\n\n  function reduceProps(props) {\n    return Object.keys(props).reduce(function (acc, prop) {\n      if (styleNames.indexOf(prop) === -1) {\n        acc[prop] = props[prop];\n      }\n\n      return acc;\n    }, {});\n  }\n\n  function getStyledIconSet(style) {\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    if (styleNames.indexOf(style) === -1) {\n      return iconSets[options.defaultStyle];\n    }\n\n    return !name ? iconSets[styleFromProps(_defineProperty({}, style, true))] : getIconSetForProps(_defineProperty({\n      name: name\n    }, style, true));\n  }\n\n  function getFontFamily() {\n    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : options.defaultStyle;\n    return getStyledIconSet(style).getFontFamily();\n  }\n\n  function getRawGlyphMap() {\n    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : options.defaultStyle;\n    return getStyledIconSet(style).getRawGlyphMap();\n  }\n\n  function hasIcon(name) {\n    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : options.defaultStyle;\n    return options.glyphValidator(name, style);\n  }\n\n  function createStyledIconClass() {\n    var selectClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    var IconClass = function (_PureComponent) {\n      _inherits(IconClass, _PureComponent);\n\n      var _super = _createSuper(IconClass);\n\n      function IconClass() {\n        _classCallCheck(this, IconClass);\n\n        return _super.apply(this, arguments);\n      }\n\n      _createClass(IconClass, [{\n        key: \"render\",\n        value: function render() {\n          var selectedIconSet = getIconSetForProps(this.props);\n          var SelectedIconClass = selectIconClass(selectedIconSet, selectClass);\n          var props = reduceProps(this.props);\n          return React.createElement(SelectedIconClass, props);\n        }\n      }]);\n\n      return IconClass;\n    }(PureComponent);\n\n    IconClass.defaultProps = styleNames.reduce(function (acc, name) {\n      acc[name] = false;\n      return acc;\n    }, {});\n    IconClass.font = Object.values(styles).reduce(function (acc, style) {\n      acc[style.fontFamily] = style.fontFile;\n      return acc;\n    }, {});\n    IconClass.StyledIconSet = getStyledIconSet;\n    IconClass.getFontFamily = getFontFamily;\n    IconClass.getRawGlyphMap = getRawGlyphMap;\n    IconClass.hasIcon = hasIcon;\n    return IconClass;\n  }\n\n  var Icon = createStyledIconClass();\n  Icon.Button = createStyledIconClass('Button');\n  return Icon;\n}","map":{"version":3,"mappings":"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","names":["React","PureComponent","createIconSet","createMultiStyleIconSet","styles","optionsInput","styleNames","Object","keys","length","Error","options","defaultStyle","fallbackFamily","_unused","glyphValidator","__unused","iconSets","reduce","acc","name","style","glyphMap","fontFamily","fontFile","fontStyle","styleFromProps","props","result","propName","indexOf","getIconSetForProps","family","selectIconClass","iconSet","iconClass","reduceProps","prop","getStyledIconSet","getFontFamily","getRawGlyphMap","hasIcon","createStyledIconClass","selectClass","IconClass","selectedIconSet","SelectedIconClass","createElement","values","Icon","Button"],"sourceRoot":"","sources":["../src/createMultiStyleIconSet.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport createIconSet from './createIconSet';\n\ntype FontStyle = {\n  fontFamily: string;\n  fontFile: any;\n  glyphMap: any;\n  fontStyle: any;\n};\n\ntype FontStyles = {\n  [key: string]: FontStyle;\n};\n\nexport default function createMultiStyleIconSet(\n  styles: FontStyles,\n  optionsInput = {}\n): any {\n  const styleNames = Object.keys(styles);\n\n  if (styleNames.length === 0) {\n    throw new Error('You need to add at least one style');\n  }\n\n  const options = {\n    defaultStyle: styleNames[0],\n    fallbackFamily: (_unused: any) => styleNames[0],\n    glyphValidator: (_unused: any, __unused: any) => true,\n    ...optionsInput,\n  };\n\n  const iconSets = styleNames.reduce((acc, name) => {\n    const style = styles[name];\n\n    acc[name] = createIconSet(\n      style.glyphMap || {},\n      style.fontFamily || '',\n      style.fontFile || '',\n      style.fontStyle || {}\n    );\n\n    return acc;\n  }, {});\n\n  function styleFromProps(props) {\n    return Object.keys(props).reduce(\n      (result, propName) =>\n        styleNames.indexOf(propName) !== -1 && props[propName] === true\n          ? propName\n          : result,\n      options.defaultStyle\n    );\n  }\n\n  function getIconSetForProps(props) {\n    const { name } = props;\n    const style = styleFromProps(props);\n\n    if (options.glyphValidator(name, style)) return iconSets[style];\n\n    const family = options.fallbackFamily(name);\n\n    if (styleNames.indexOf(family) === -1) {\n      return options.defaultStyle;\n    }\n\n    return iconSets[family];\n  }\n\n  function selectIconClass(iconSet, iconClass) {\n    return iconClass.length > 0 ? iconSet[iconClass] : iconSet;\n  }\n\n  function reduceProps(props) {\n    return Object.keys(props).reduce((acc, prop) => {\n      if (styleNames.indexOf(prop) === -1) {\n        acc[prop] = props[prop];\n      }\n\n      return acc;\n    }, {});\n  }\n\n  function getStyledIconSet(style, name = '') {\n    if (styleNames.indexOf(style) === -1) {\n      return iconSets[options.defaultStyle];\n    }\n\n    return !name\n      ? iconSets[styleFromProps({ [style]: true })]\n      : getIconSetForProps({ name, [style]: true });\n  }\n\n  function getFontFamily(style = options.defaultStyle) {\n    return getStyledIconSet(style).getFontFamily();\n  }\n\n  function getRawGlyphMap(style = options.defaultStyle) {\n    return getStyledIconSet(style).getRawGlyphMap();\n  }\n\n  function hasIcon(name, style = options.defaultStyle) {\n    return options.glyphValidator(name, style);\n  }\n\n  function createStyledIconClass(selectClass = '') {\n    class IconClass extends PureComponent {\n      static defaultProps = styleNames.reduce((acc, name) => {\n        acc[name] = false;\n        return acc;\n      }, {});\n\n      static font = Object.values(styles).reduce((acc, style) => {\n        acc[style.fontFamily] = style.fontFile;\n        return acc;\n      }, {});\n\n      static Button: any;\n\n      static StyledIconSet = getStyledIconSet;\n      static getFontFamily = getFontFamily;\n      static getRawGlyphMap = getRawGlyphMap;\n      static hasIcon = hasIcon;\n\n      render() {\n        const selectedIconSet = getIconSetForProps(this.props);\n        const SelectedIconClass = selectIconClass(selectedIconSet, selectClass);\n        const props = reduceProps(this.props);\n\n        return React.createElement(SelectedIconClass, props);\n      }\n    }\n\n    return IconClass;\n  }\n\n  const Icon = createStyledIconClass();\n  Icon.Button = createStyledIconClass('Button');\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"module"}