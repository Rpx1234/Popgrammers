{"ast":null,"code":"import * as React from 'react';\nvar MISSING_CONTEXT_ERROR = \"Couldn't find a schedule context.\";\nexport var ScheduleUpdateContext = React.createContext({\n  scheduleUpdate: function scheduleUpdate() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  flushUpdates: function flushUpdates() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  }\n});\nexport default function useScheduleUpdate(callback) {\n  var _React$useContext = React.useContext(ScheduleUpdateContext),\n      scheduleUpdate = _React$useContext.scheduleUpdate,\n      flushUpdates = _React$useContext.flushUpdates;\n\n  scheduleUpdate(callback);\n  React.useEffect(flushUpdates);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,IAAMC,qBAAqB,GAAG,mCAA9B;AAEA,OAAO,IAAMC,qBAAqB,GAAGF,KAAK,CAACG,aAANH,CAGlC;AACDI,gBADC,4BACgB;AACf,UAAM,IAAIC,KAAJ,CAAUJ,qBAAV,CAAN;AAFD;AAIDK,cAJC,0BAIc;AACb,UAAM,IAAID,KAAJ,CAAUJ,qBAAV,CAAN;AACD;AANA,CAHkCD,CAA9B;AAmBP,eAAe,SAASO,iBAAT,CAA2BC,QAA3B,EAAiD;AAC9D,0BAAyCR,KAAK,CAACS,UAANT,CACvCE,qBADuCF,CAAzC;AAAA,MAAQI,cAAR,qBAAQA,cAAR;AAAA,MAAwBE,YAAxB,qBAAwBA,YAAxB;;AAIAF,gBAAc,CAACI,QAAD,CAAdJ;AAEAJ,OAAK,CAACU,SAANV,CAAgBM,YAAhBN;AACD","names":["React","MISSING_CONTEXT_ERROR","ScheduleUpdateContext","createContext","scheduleUpdate","Error","flushUpdates","useScheduleUpdate","callback","useContext","useEffect"],"sources":["useScheduleUpdate.tsx"],"sourcesContent":["import * as React from 'react';\n\nconst MISSING_CONTEXT_ERROR = \"Couldn't find a schedule context.\";\n\nexport const ScheduleUpdateContext = React.createContext<{\n  scheduleUpdate: (callback: () => void) => void;\n  flushUpdates: () => void;\n}>({\n  scheduleUpdate() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  flushUpdates() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n});\n\n/**\n * When screen config changes, we want to update the navigator in the same update phase.\n * However, navigation state is in the root component and React won't let us update it from a child.\n * This is a workaround for that, the scheduled update is stored in the ref without actually calling setState.\n * It lets all subsequent updates access the latest state so it stays correct.\n * Then we call setState during after the component updates.\n */\nexport default function useScheduleUpdate(callback: () => void) {\n  const { scheduleUpdate, flushUpdates } = React.useContext(\n    ScheduleUpdateContext\n  );\n\n  scheduleUpdate(callback);\n\n  React.useEffect(flushUpdates);\n}\n"]},"metadata":{},"sourceType":"module"}