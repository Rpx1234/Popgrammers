{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport SceneView from \"./SceneView\";\nimport useNavigationCache from \"./useNavigationCache\";\nimport useRouteCache from \"./useRouteCache\";\nexport default function useDescriptors(_ref) {\n  var state = _ref.state,\n      screens = _ref.screens,\n      navigation = _ref.navigation,\n      screenOptions = _ref.screenOptions,\n      defaultScreenOptions = _ref.defaultScreenOptions,\n      onAction = _ref.onAction,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      addListener = _ref.addListener,\n      addKeyedListener = _ref.addKeyedListener,\n      onRouteFocus = _ref.onRouteFocus,\n      router = _ref.router,\n      emitter = _ref.emitter;\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      options = _React$useState2[0],\n      setOptions = _React$useState2[1];\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onDispatchAction = _React$useContext.onDispatchAction,\n      onOptionsChange = _React$useContext.onOptionsChange,\n      stackRef = _React$useContext.stackRef;\n\n  var context = React.useMemo(function () {\n    return {\n      navigation: navigation,\n      onAction: onAction,\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onRouteFocus: onRouteFocus,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange,\n      stackRef: stackRef\n    };\n  }, [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange, stackRef]);\n  var navigations = useNavigationCache({\n    state: state,\n    getState: getState,\n    navigation: navigation,\n    setOptions: setOptions,\n    router: router,\n    emitter: emitter\n  });\n  var routes = useRouteCache(state.routes);\n  return routes.reduce(function (acc, route, i) {\n    var config = screens[route.name];\n    var screen = config.props;\n    var navigation = navigations[route.key];\n    var optionsList = [screenOptions].concat(_toConsumableArray(config.options ? config.options.filter(Boolean) : []), [screen.options, options[route.key]]);\n    var customOptions = optionsList.reduce(function (acc, curr) {\n      return _extends(acc, typeof curr !== 'function' ? curr : curr({\n        route: route,\n        navigation: navigation\n      }));\n    }, {});\n\n    var mergedOptions = _objectSpread(_objectSpread({}, typeof defaultScreenOptions === 'function' ? defaultScreenOptions({\n      route: route,\n      navigation: navigation,\n      options: customOptions\n    }) : defaultScreenOptions), customOptions);\n\n    var clearOptions = function clearOptions() {\n      return setOptions(function (o) {\n        if (route.key in o) {\n          var _route$key = route.key,\n              _ = o[_route$key],\n              rest = _objectWithoutProperties(o, [_route$key].map(_toPropertyKey));\n\n          return rest;\n        }\n\n        return o;\n      });\n    };\n\n    acc[route.key] = {\n      route: route,\n      navigation: navigation,\n      render: function render() {\n        return React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: mergedOptions,\n          clearOptions: clearOptions\n        }))));\n      },\n      options: mergedOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"mappings":"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","names":["React","NavigationBuilderContext","NavigationContext","NavigationRouteContext","SceneView","useNavigationCache","useRouteCache","useDescriptors","state","screens","navigation","screenOptions","defaultScreenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","useState","options","setOptions","useContext","onDispatchAction","onOptionsChange","stackRef","context","useMemo","navigations","routes","reduce","acc","route","i","config","name","screen","props","key","optionsList","filter","Boolean","customOptions","curr","Object","mergedOptions","clearOptions","o","_","rest","render","Provider","value","routeState"],"sources":["useDescriptors.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  AddKeyedListener,\n  AddListener,\n} from './NavigationBuilderContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport SceneView from './SceneView';\nimport type {\n  Descriptor,\n  EventMapBase,\n  NavigationHelpers,\n  NavigationProp,\n  RouteConfig,\n  RouteProp,\n} from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\n\nexport type ScreenConfigWithParent<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  keys: (string | undefined)[];\n  options: (ScreenOptionsOrCallback<ScreenOptions> | undefined)[] | undefined;\n  props: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n};\n\ntype ScreenOptionsOrCallback<ScreenOptions extends {}> =\n  | ScreenOptions\n  | ((props: {\n      route: RouteProp<ParamListBase, string>;\n      navigation: any;\n    }) => ScreenOptions);\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?: ScreenOptionsOrCallback<ScreenOptions>;\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange, stackRef } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions, EventMap>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<\n      string,\n      Descriptor<\n        ScreenOptions,\n        NavigationProp<ParamListBase, string, State, ScreenOptions, EventMap> &\n          ActionHelpers,\n        RouteProp<ParamListBase>\n      >\n    >\n  >((acc, route, i) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const navigation = navigations[route.key];\n\n    const optionsList = [\n      // The default `screenOptions` passed to the navigator\n      screenOptions,\n      // The `screenOptions` props passed to `Group` elements\n      ...((config.options\n        ? config.options.filter(Boolean)\n        : []) as ScreenOptionsOrCallback<ScreenOptions>[]),\n      // The `options` prop passed to `Screen` elements,\n      screen.options,\n      // The options set via `navigation.setOptions`\n      options[route.key],\n    ];\n\n    const customOptions = optionsList.reduce<ScreenOptions>(\n      (acc, curr) =>\n        Object.assign(\n          acc,\n          typeof curr !== 'function' ? curr : curr({ route, navigation })\n        ),\n      {} as ScreenOptions\n    );\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: customOptions,\n          })\n        : defaultScreenOptions),\n      ...customOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}