{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"initialRouteName\", \"children\", \"screenListeners\", \"screenOptions\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { createNavigatorFactory, StackActions, StackRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport StackView from \"../views/Stack/StackView\";\n\nfunction StackNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      children = _ref.children,\n      screenListeners = _ref.screenListeners,\n      screenOptions = _ref.screenOptions,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var mode = rest.mode;\n  warnOnce(mode != null, \"Stack Navigator: 'mode=\\\"\" + mode + \"\\\"' is deprecated. Use 'presentation: \\\"\" + mode + \"\\\"' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator#presentation for more details.\");\n  var headerMode = rest.headerMode;\n  warnOnce(headerMode === 'none', \"Stack Navigator: 'headerMode=\\\"none\\\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headershown for more details.\");\n  warnOnce(headerMode != null && headerMode !== 'none', \"Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headermode for more details.\");\n  var keyboardHandlingEnabled = rest.keyboardHandlingEnabled;\n  warnOnce(keyboardHandlingEnabled !== undefined, \"Stack Navigator: 'keyboardHandlingEnabled' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#keyboardhandlingenabled for more details.\");\n  var defaultScreenOptions = {\n    presentation: mode,\n    headerShown: headerMode ? headerMode !== 'none' : true,\n    headerMode: headerMode && headerMode !== 'none' ? headerMode : undefined,\n    keyboardHandlingEnabled: keyboardHandlingEnabled\n  };\n\n  var _useNavigationBuilder = useNavigationBuilder(StackRouter, {\n    initialRouteName: initialRouteName,\n    children: children,\n    screenListeners: screenListeners,\n    screenOptions: screenOptions,\n    defaultScreenOptions: defaultScreenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation,\n      NavigationContent = _useNavigationBuilder.NavigationContent;\n\n  React.useEffect(function () {\n    var _navigation$addListen;\n\n    return (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.popToTop()), {}, {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(NavigationContent, null, React.createElement(StackView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\n\nexport default createNavigatorFactory(StackNavigator);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,sBADF,EAMEC,YANF,EAQEC,WARF,EAUEC,oBAVF,QAWO,0BAXP;AAYA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAQA,OAAOC,SAAP;;AAWA,SAASC,cAAT,OAMU;AAAA,MALRC,gBAKQ,QALRA,gBAKQ;AAAA,MAJRC,QAIQ,QAJRA,QAIQ;AAAA,MAHRC,eAGQ,QAHRA,eAGQ;AAAA,MAFRC,aAEQ,QAFRA,aAEQ;AAAA,MADLC,IACK;;AAER,MAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB;AAEAR,UAAQ,CACNQ,IAAI,IAAI,IADF,gCAEqBA,IAFrB,gDAEkEA,IAFlE,4HAARR;AAMA,MAAMS,UAAU,GAAGF,IAAI,CAACE,UAAxB;AAEAT,UAAQ,CACNS,UAAU,KAAK,MADT,sMAART;AAKAA,UAAQ,CACNS,UAAU,IAAI,IAAdA,IAAsBA,UAAU,KAAK,MAD/B,qMAART;AAMA,MAAMU,uBAAuB,GAAGH,IAAI,CAACG,uBAArC;AAEAV,UAAQ,CACNU,uBAAuB,KAAKC,SADtB,+NAARX;AAKA,MAAMY,oBAA4C,GAAG;AACnDC,gBAAY,EAAEL,IADqC;AAEnDM,eAAW,EAAEL,UAAU,GAAGA,UAAU,KAAK,MAAlB,GAA2B,IAFC;AAGnDA,cAAU,EAAEA,UAAU,IAAIA,UAAU,KAAK,MAA7BA,GAAsCA,UAAtCA,GAAmDE,SAHZ;AAInDD;AAJmD,GAArD;;AAOA,8BACEZ,oBAAoB,CAMlBD,WANkB,EAML;AACbM,oBADa,EACbA,gBADa;AAEbC,YAFa,EAEbA,QAFa;AAGbC,mBAHa,EAGbA,eAHa;AAIbC,iBAJa,EAIbA,aAJa;AAKbM;AALa,GANK,CADtB;AAAA,MAAQG,KAAR,yBAAQA,KAAR;AAAA,MAAeC,WAAf,yBAAeA,WAAf;AAAA,MAA4BC,UAA5B,yBAA4BA,UAA5B;AAAA,MAAwCC,iBAAxC,yBAAwCA,iBAAxC;;AAeAnB,OAAK,CAACoB,SAANpB,CACE;AAAA;;AAAA,oCACEkB,UAAU,CAACG,WADb,0DACEC,uCAAyB,UAAzB,EAAsCC,WAAD,EAAO;AAC1C,UAAMC,SAAS,GAAGN,UAAU,CAACM,SAAXN,EAAlB;AAIAO,2BAAqB,CAAC,YAAM;AAC1B,YACET,KAAK,CAACU,KAANV,GAAc,CAAdA,IACAQ,SADAR,IAEA,CAAEO,CAAD,CAAkCI,gBAHrC,EAIE;AAGAT,oBAAU,CAACU,QAAXV,iCACKrB,YAAY,CAACgC,QAAbhC,EADLqB;AAEEY,kBAAM,EAAEd,KAAK,CAACe;AAFhBb;AAID;AAZkB,QAArBO;AALQ,KAAV,CADF;AADF,KAsBE,CAACP,UAAD,EAAaF,KAAK,CAACU,KAAnB,EAA0BV,KAAK,CAACe,GAAhC,CAtBF/B;AAyBA,SACEA,oBAACmB,iBAAD,QACEnB,oBAACE,SAAD,eACMM,IADN;AAEEQ,SAAK,EAAEA,KAFT;AAGEC,eAAW,EAAEA,WAHf;AAIEC,cAAU,EAAEA;AAJd,KADF,CADF;AAUD;;AAED,eAAetB,sBAAsB,CAKnCO,cALmC,CAArC","names":["createNavigatorFactory","StackActions","StackRouter","useNavigationBuilder","React","warnOnce","StackView","StackNavigator","initialRouteName","children","screenListeners","screenOptions","rest","mode","headerMode","keyboardHandlingEnabled","undefined","defaultScreenOptions","presentation","headerShown","state","descriptors","navigation","NavigationContent","useEffect","addListener","_navigation$addListen","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key"],"sources":["createStackNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  StackHeaderMode,\n  StackNavigationConfig,\n  StackNavigationEventMap,\n  StackNavigationOptions,\n} from '../types';\nimport StackView from '../views/Stack/StackView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap\n> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: Props) {\n  // @ts-expect-error: mode is deprecated\n  const mode = rest.mode as 'card' | 'modal' | undefined;\n\n  warnOnce(\n    mode != null,\n    `Stack Navigator: 'mode=\"${mode}\"' is deprecated. Use 'presentation: \"${mode}\"' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator#presentation for more details.`\n  );\n\n  // @ts-expect-error: headerMode='none' is deprecated\n  const headerMode = rest.headerMode as StackHeaderMode | 'none' | undefined;\n\n  warnOnce(\n    headerMode === 'none',\n    `Stack Navigator: 'headerMode=\"none\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headershown for more details.`\n  );\n\n  warnOnce(\n    headerMode != null && headerMode !== 'none',\n    `Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headermode for more details.`\n  );\n\n  // @ts-expect-error: headerMode='none' is deprecated\n  const keyboardHandlingEnabled = rest.keyboardHandlingEnabled;\n\n  warnOnce(\n    keyboardHandlingEnabled !== undefined,\n    `Stack Navigator: 'keyboardHandlingEnabled' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#keyboardhandlingenabled for more details.`\n  );\n\n  const defaultScreenOptions: StackNavigationOptions = {\n    presentation: mode,\n    headerShown: headerMode ? headerMode !== 'none' : true,\n    headerMode: headerMode && headerMode !== 'none' ? headerMode : undefined,\n    keyboardHandlingEnabled,\n  };\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      StackNavigationOptions,\n      StackNavigationEventMap\n    >(StackRouter, {\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <StackView\n        {...rest}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"module"}