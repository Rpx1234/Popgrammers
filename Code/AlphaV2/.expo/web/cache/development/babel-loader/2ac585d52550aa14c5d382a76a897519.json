{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Formik } from 'formik';\nimport { createUserWithEmailAndPassword } from 'firebase/auth';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { View, TextInput, Logo, Button, FormErrorMessage } from \"../components\";\nimport { Images, Colors, auth } from \"../config\";\nimport { useTogglePasswordVisibility } from \"../hooks\";\nimport { signupValidationSchema } from \"../utils\";\nexport var SignupScreen = function SignupScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      errorState = _useState2[0],\n      setErrorState = _useState2[1];\n\n  var _useTogglePasswordVis = useTogglePasswordVisibility(),\n      passwordVisibility = _useTogglePasswordVis.passwordVisibility,\n      handlePasswordVisibility = _useTogglePasswordVis.handlePasswordVisibility,\n      rightIcon = _useTogglePasswordVis.rightIcon,\n      handleConfirmPasswordVisibility = _useTogglePasswordVis.handleConfirmPasswordVisibility,\n      confirmPasswordIcon = _useTogglePasswordVis.confirmPasswordIcon,\n      confirmPasswordVisibility = _useTogglePasswordVis.confirmPasswordVisibility;\n\n  var handleSignup = function handleSignup(values) {\n    var email, password;\n    return _regeneratorRuntime.async(function handleSignup$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = values.email, password = values.password;\n            createUserWithEmailAndPassword(auth, email, password).catch(function (error) {\n              return setErrorState(error.message);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    isSafe: true,\n    style: styles.container\n  }, React.createElement(KeyboardAwareScrollView, {\n    enableOnAndroid: true\n  }, React.createElement(View, {\n    style: styles.logoContainer\n  }, React.createElement(Logo, {\n    uri: Images.logo\n  }), React.createElement(Text, {\n    style: styles.screenTitle\n  }, \"Create a new account!\")), React.createElement(Formik, {\n    initialValues: {\n      email: '',\n      password: '',\n      confirmPassword: ''\n    },\n    validationSchema: signupValidationSchema,\n    onSubmit: function onSubmit(values) {\n      return handleSignup(values);\n    }\n  }, function (_ref2) {\n    var values = _ref2.values,\n        touched = _ref2.touched,\n        errors = _ref2.errors,\n        handleChange = _ref2.handleChange,\n        handleSubmit = _ref2.handleSubmit,\n        handleBlur = _ref2.handleBlur;\n    return React.createElement(React.Fragment, null, React.createElement(TextInput, {\n      name: \"email\",\n      leftIconName: \"email\",\n      placeholder: \"Enter email\",\n      autoCapitalize: \"none\",\n      keyboardType: \"email-address\",\n      textContentType: \"emailAddress\",\n      autoFocus: true,\n      value: values.email,\n      onChangeText: handleChange('email'),\n      onBlur: handleBlur('email')\n    }), React.createElement(FormErrorMessage, {\n      error: errors.email,\n      visible: touched.email\n    }), React.createElement(TextInput, {\n      name: \"password\",\n      leftIconName: \"key-variant\",\n      placeholder: \"Enter password\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      secureTextEntry: passwordVisibility,\n      textContentType: \"newPassword\",\n      rightIcon: rightIcon,\n      handlePasswordVisibility: handlePasswordVisibility,\n      value: values.password,\n      onChangeText: handleChange('password'),\n      onBlur: handleBlur('password')\n    }), React.createElement(FormErrorMessage, {\n      error: errors.password,\n      visible: touched.password\n    }), React.createElement(TextInput, {\n      name: \"confirmPassword\",\n      leftIconName: \"key-variant\",\n      placeholder: \"Enter password\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      secureTextEntry: confirmPasswordVisibility,\n      textContentType: \"password\",\n      rightIcon: confirmPasswordIcon,\n      handlePasswordVisibility: handleConfirmPasswordVisibility,\n      value: values.confirmPassword,\n      onChangeText: handleChange('confirmPassword'),\n      onBlur: handleBlur('confirmPassword')\n    }), React.createElement(FormErrorMessage, {\n      error: errors.confirmPassword,\n      visible: touched.confirmPassword\n    }), errorState !== '' ? React.createElement(FormErrorMessage, {\n      error: errorState,\n      visible: true\n    }) : null, React.createElement(Button, {\n      style: styles.button,\n      onPress: handleSubmit\n    }, React.createElement(Text, {\n      style: styles.buttonText\n    }, \"Signup\")));\n  }), React.createElement(Button, {\n    style: styles.borderlessButtonContainer,\n    borderless: true,\n    title: 'Already have an account?',\n    onPress: function onPress() {\n      return navigation.navigate('Login');\n    }\n  })));\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'cornflowerblue',\n    paddingHorizontal: 12\n  },\n  logoContainer: {\n    alignItems: 'center'\n  },\n  screenTitle: {\n    fontSize: 32,\n    fontWeight: '700',\n    color: Colors.black,\n    paddingTop: 20\n  },\n  button: {\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 8,\n    backgroundColor: Colors.orange,\n    padding: 10,\n    borderRadius: 8\n  },\n  buttonText: {\n    fontSize: 20,\n    color: Colors.white,\n    fontWeight: '700'\n  },\n  borderlessButtonContainer: {\n    marginTop: 16,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/Owner/Downloads/Popgrammers/Code/AlphaV2/screens/SignupScreen.js"],"names":["React","useState","Formik","createUserWithEmailAndPassword","KeyboardAwareScrollView","View","TextInput","Logo","Button","FormErrorMessage","Images","Colors","auth","useTogglePasswordVisibility","signupValidationSchema","SignupScreen","navigation","errorState","setErrorState","passwordVisibility","handlePasswordVisibility","rightIcon","handleConfirmPasswordVisibility","confirmPasswordIcon","confirmPasswordVisibility","handleSignup","values","email","password","catch","error","message","styles","container","logoContainer","logo","screenTitle","confirmPassword","touched","errors","handleChange","handleSubmit","handleBlur","button","buttonText","borderlessButtonContainer","navigate","StyleSheet","create","flex","backgroundColor","paddingHorizontal","alignItems","fontSize","fontWeight","color","black","paddingTop","width","justifyContent","marginTop","orange","padding","borderRadius","white"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Text, StyleSheet } from 'react-native';\nimport { Formik } from 'formik';\nimport { createUserWithEmailAndPassword } from 'firebase/auth';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\n\nimport { View, TextInput, Logo, Button, FormErrorMessage } from '../components';\nimport { Images, Colors, auth } from '../config';\nimport { useTogglePasswordVisibility } from '../hooks';\nimport { signupValidationSchema } from '../utils';\n\nexport const SignupScreen = ({ navigation }) => {\n  const [errorState, setErrorState] = useState('');\n\n  const {\n    passwordVisibility,\n    handlePasswordVisibility,\n    rightIcon,\n    handleConfirmPasswordVisibility,\n    confirmPasswordIcon,\n    confirmPasswordVisibility\n  } = useTogglePasswordVisibility();\n\n  const handleSignup = async values => {\n    const { email, password } = values;\n\n    createUserWithEmailAndPassword(auth, email, password).catch(error =>\n      setErrorState(error.message)\n    );\n  };\n\n  return (\n    <View isSafe style={styles.container}>\n      <KeyboardAwareScrollView enableOnAndroid={true}>\n        {/* LogoContainer: consits app logo and screen title */}\n        <View style={styles.logoContainer}>\n          <Logo uri={Images.logo} />\n          <Text style={styles.screenTitle}>Create a new account!</Text>\n        </View>\n        {/* Formik Wrapper */}\n        <Formik\n          initialValues={{\n            email: '',\n            password: '',\n            confirmPassword: ''\n          }}\n          validationSchema={signupValidationSchema}\n          onSubmit={values => handleSignup(values)}\n        >\n          {({\n            values,\n            touched,\n            errors,\n            handleChange,\n            handleSubmit,\n            handleBlur\n          }) => (\n            <>\n              {/* Input fields */}\n              <TextInput\n                name='email'\n                leftIconName='email'\n                placeholder='Enter email'\n                autoCapitalize='none'\n                keyboardType='email-address'\n                textContentType='emailAddress'\n                autoFocus={true}\n                value={values.email}\n                onChangeText={handleChange('email')}\n                onBlur={handleBlur('email')}\n              />\n              <FormErrorMessage error={errors.email} visible={touched.email} />\n              <TextInput\n                name='password'\n                leftIconName='key-variant'\n                placeholder='Enter password'\n                autoCapitalize='none'\n                autoCorrect={false}\n                secureTextEntry={passwordVisibility}\n                textContentType='newPassword'\n                rightIcon={rightIcon}\n                handlePasswordVisibility={handlePasswordVisibility}\n                value={values.password}\n                onChangeText={handleChange('password')}\n                onBlur={handleBlur('password')}\n              />\n              <FormErrorMessage\n                error={errors.password}\n                visible={touched.password}\n              />\n              <TextInput\n                name='confirmPassword'\n                leftIconName='key-variant'\n                placeholder='Enter password'\n                autoCapitalize='none'\n                autoCorrect={false}\n                secureTextEntry={confirmPasswordVisibility}\n                textContentType='password'\n                rightIcon={confirmPasswordIcon}\n                handlePasswordVisibility={handleConfirmPasswordVisibility}\n                value={values.confirmPassword}\n                onChangeText={handleChange('confirmPassword')}\n                onBlur={handleBlur('confirmPassword')}\n              />\n              <FormErrorMessage\n                error={errors.confirmPassword}\n                visible={touched.confirmPassword}\n              />\n              {/* Display Screen Error Mesages */}\n              {errorState !== '' ? (\n                <FormErrorMessage error={errorState} visible={true} />\n              ) : null}\n              {/* Signup button */}\n              <Button style={styles.button} onPress={handleSubmit}>\n                <Text style={styles.buttonText}>Signup</Text>\n              </Button>\n            </>\n          )}\n        </Formik>\n        {/* Button to navigate to Login screen */}\n        <Button\n          style={styles.borderlessButtonContainer}\n          borderless\n          title={'Already have an account?'}\n          onPress={() => navigation.navigate('Login')}\n        />\n      </KeyboardAwareScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'cornflowerblue',\n    paddingHorizontal: 12\n  },\n  logoContainer: {\n    alignItems: 'center'\n  },\n  screenTitle: {\n    fontSize: 32,\n    fontWeight: '700',\n    color: Colors.black,\n    paddingTop: 20\n  },\n  button: {\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 8,\n    backgroundColor: Colors.orange,\n    padding: 10,\n    borderRadius: 8\n  },\n  buttonText: {\n    fontSize: 20,\n    color: Colors.white,\n    fontWeight: '700'\n  },\n  borderlessButtonContainer: {\n    marginTop: 16,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}