{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from \"./BaseRouter\";\nvar TYPE_ROUTE = 'route';\nexport var TabActions = {\n  jumpTo: function jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  }\n};\n\nvar getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {\n  var history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  var initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (var i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n\n      break;\n\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n\n      break;\n\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(function (route) {\n        return route.name === initialRouteName;\n      });\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n\n      break;\n\n    case 'history':\n      break;\n  }\n\n  return history;\n};\n\nvar changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {\n  var history;\n\n  if (backBehavior === 'history') {\n    var currentKey = state.routes[index].key;\n    history = state.history.filter(function (it) {\n      return it.type === 'route' ? it.key !== currentKey : false;\n    }).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    index: index,\n    history: history\n  });\n};\n\nexport default function TabRouter(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      _ref$backBehavior = _ref.backBehavior,\n      backBehavior = _ref$backBehavior === void 0 ? 'firstRoute' : _ref$backBehavior;\n\n  var router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'tab',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList;\n      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      var routes = routeNames.map(function (name) {\n        return {\n          name: name,\n          key: name + \"-\" + nanoid(),\n          params: routeParamList[name]\n        };\n      });\n      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: \"tab-\" + nanoid(),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList;\n\n      var _state$routes, _state$index, _state$history$filter, _state$history;\n\n      var state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      var routes = routeNames.map(function (name) {\n        var route = state.routes.find(function (r) {\n          return r.name === name;\n        });\n        return _objectSpread(_objectSpread({}, route), {}, {\n          name: name,\n          key: route && route.name === name && route.key ? route.key : name + \"-\" + nanoid(),\n          params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), route ? route.params : undefined) : route ? route.params : undefined\n        });\n      });\n      var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state === null || state === void 0 ? void 0 : state.index) !== null && _state$index !== void 0 ? _state$index : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      var history = (_state$history$filter = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(function (it) {\n        return routes.find(function (r) {\n          return r.key === it.key;\n        });\n      })) !== null && _state$history$filter !== void 0 ? _state$history$filter : [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: \"tab-\" + nanoid(),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      }, index, backBehavior, initialRouteName);\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {\n      var routeNames = _ref4.routeNames,\n          routeParamList = _ref4.routeParamList,\n          routeKeyChanges = _ref4.routeKeyChanges;\n      var routes = routeNames.map(function (name) {\n        return state.routes.find(function (r) {\n          return r.name === name && !routeKeyChanges.includes(r.name);\n        }) || {\n          name: name,\n          key: name + \"-\" + nanoid(),\n          params: routeParamList[name]\n        };\n      });\n      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      var history = state.history.filter(function (it) {\n        return it.type !== 'route' || routes.find(function (r) {\n          return r.key === it.key;\n        });\n      });\n\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        history: history,\n        routeNames: routeNames,\n        routes: routes,\n        index: index\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction: function getStateForAction(state, action, _ref5) {\n      var routeParamList = _ref5.routeParamList;\n\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var index = -1;\n\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(function (route) {\n                return route.key === action.payload.key;\n              });\n            } else {\n              index = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name;\n              });\n            }\n\n            if (index === -1) {\n              return null;\n            }\n\n            return changeIndex(_objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.map(function (route, i) {\n                if (i !== index) {\n                  return route;\n                }\n\n                var params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge) {\n                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread(_objectSpread({}, routeParamList[route.name]), route.params), action.payload.params) : route.params;\n                } else {\n                  params = routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), action.payload.params) : action.payload.params;\n                }\n\n                var path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                return params !== route.params || path !== route.path ? _objectSpread(_objectSpread({}, route), {}, {\n                  path: path,\n                  params: params\n                }) : route;\n              })\n            }), index, backBehavior, initialRouteName);\n          }\n\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n\n            var previousKey = state.history[state.history.length - 2].key;\n\n            var _index = state.routes.findIndex(function (route) {\n              return route.key === previousKey;\n            });\n\n            if (_index === -1) {\n              return null;\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              history: state.history.slice(0, -1),\n              index: _index\n            });\n          }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n    actionCreators: TabActions\n  });\n\n  return router;\n}","map":{"version":3,"mappings":"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","names":["nanoid","BaseRouter","TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","initialRouteName","history","key","initialRouteIndex","i","unshift","findIndex","route","changeIndex","state","currentKey","filter","it","concat","TabRouter","router","getInitialState","routeNames","routeParamList","undefined","includes","indexOf","map","stale","getRehydratedState","partialState","find","r","Math","min","max","_state$routes","length","_state$history","getStateForRouteNamesChange","routeKeyChanges","getStateForRouteFocus","getStateForAction","action","merge","path","previousKey","slice","shouldActionChangeFocus","actionCreators"],"sources":["TabRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior =\n  | 'initialRoute'\n  | 'firstRoute'\n  | 'history'\n  | 'order'\n  | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState<ParamList extends ParamListBase> = Omit<\n  NavigationState<ParamList>,\n  'history'\n> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key,\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(\n        (route) => route.name === initialRouteName\n      );\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key,\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState<ParamListBase>,\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(\n      state.routes,\n      index,\n      backBehavior,\n      initialRouteName\n    );\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'firstRoute',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(\n        routes,\n        index,\n        backBehavior,\n        initialRouteName\n      );\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (\n          state as PartialState<TabNavigationState<ParamListBase>>\n        ).routes.find((r) => r.name === name);\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0),\n        routes.length - 1\n      );\n\n      const history =\n        state.history?.filter((it) => routes.find((r) => r.key === it.key)) ??\n        [];\n\n      return changeIndex(\n        {\n          stale: false,\n          type: 'tab',\n          key: `tab-${nanoid()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n        },\n        index,\n        backBehavior,\n        initialRouteName\n      );\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find(\n            (r) => r.name === name && !routeKeyChanges.includes(r.name)\n          ) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        (it) => it.type !== 'route' || routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, { routeParamList }) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes: state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n\n                let params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge) {\n                  params =\n                    action.payload.params !== undefined ||\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...route.params,\n                          ...action.payload.params,\n                        }\n                      : route.params;\n                } else {\n                  params =\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params;\n                }\n\n                const path =\n                  action.type === 'NAVIGATE' && action.payload.path != null\n                    ? action.payload.path\n                    : route.path;\n\n                return params !== route.params || path !== route.path\n                  ? { ...route, path, params }\n                  : route;\n              }),\n            },\n            index,\n            backBehavior,\n            initialRouteName\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"module"}