{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Formik } from 'formik';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { getDatabase, ref, set, update, child, get } from \"firebase/database\";\nimport { View, TextInput, Logo, Button, FormErrorMessage } from \"../components\";\nimport { Images, Colors, auth } from \"../config\";\nimport { useTogglePasswordVisibility } from \"../hooks\";\nimport { loginValidationSchema } from \"../utils\";\nexport var LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      errorState = _useState2[0],\n      setErrorState = _useState2[1];\n\n  var _useTogglePasswordVis = useTogglePasswordVisibility(),\n      passwordVisibility = _useTogglePasswordVis.passwordVisibility,\n      handlePasswordVisibility = _useTogglePasswordVis.handlePasswordVisibility,\n      rightIcon = _useTogglePasswordVis.rightIcon;\n\n  var handleLogin = function handleLogin(values) {\n    var email = values.email,\n        password = values.password;\n    signInWithEmailAndPassword(auth, email, password).catch(function (error) {\n      return setErrorState(error.message);\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    isSafe: true,\n    style: styles.container\n  }, React.createElement(KeyboardAwareScrollView, {\n    enableOnAndroid: true\n  }, React.createElement(View, {\n    style: styles.logoContainer\n  }, React.createElement(Logo, {\n    uri: Images.logo\n  }), React.createElement(Text, {\n    style: styles.screenTitle\n  }, \"Welcome to the Popgrammers app.\"), React.createElement(Text, {\n    style: styles.screenTitle\n  }, \" Please Log in.\")), React.createElement(Formik, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema: loginValidationSchema,\n    onSubmit: function onSubmit(values) {\n      return handleLogin(values);\n    }\n  }, function (_ref2) {\n    var values = _ref2.values,\n        touched = _ref2.touched,\n        errors = _ref2.errors,\n        handleChange = _ref2.handleChange,\n        handleSubmit = _ref2.handleSubmit,\n        handleBlur = _ref2.handleBlur;\n    return React.createElement(React.Fragment, null, React.createElement(TextInput, {\n      name: \"email\",\n      leftIconName: \"email\",\n      placeholder: \"Enter email\",\n      autoCapitalize: \"none\",\n      keyboardType: \"email-address\",\n      textContentType: \"emailAddress\",\n      autoFocus: true,\n      value: values.email,\n      onChangeText: handleChange('email'),\n      onBlur: handleBlur('email')\n    }), React.createElement(FormErrorMessage, {\n      error: errors.email,\n      visible: touched.email\n    }), React.createElement(TextInput, {\n      name: \"password\",\n      leftIconName: \"key-variant\",\n      placeholder: \"Enter password\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      secureTextEntry: passwordVisibility,\n      textContentType: \"password\",\n      rightIcon: rightIcon,\n      handlePasswordVisibility: handlePasswordVisibility,\n      value: values.password,\n      onChangeText: handleChange('password'),\n      onBlur: handleBlur('password')\n    }), React.createElement(FormErrorMessage, {\n      error: errors.password,\n      visible: touched.password\n    }), errorState !== '' ? React.createElement(FormErrorMessage, {\n      error: errorState,\n      visible: true\n    }) : null, React.createElement(Button, {\n      style: styles.button,\n      onPress: handleSubmit\n    }, React.createElement(Text, {\n      style: styles.buttonText\n    }, \"Login\")));\n  }), React.createElement(Button, {\n    style: styles.borderlessButtonContainer,\n    borderless: true,\n    title: 'Create a new account?',\n    onPress: function onPress() {\n      return navigation.navigate('Signup');\n    }\n  }), React.createElement(Button, {\n    style: styles.borderlessButtonContainer,\n    borderless: true,\n    title: 'Forgot Password?',\n    onPress: function onPress() {\n      return navigation.navigate('ForgotPassword');\n    }\n  }))));\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    paddingHorizontal: 12,\n    alignItems: 'center'\n  },\n  logoContainer: {\n    alignItems: 'center'\n  },\n  screenTitle: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: Colors.orange,\n    paddingTop: 10\n  },\n  button: {\n    width: '50%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    alignSelf: 'center',\n    marginTop: 8,\n    backgroundColor: Colors.orange,\n    padding: 10,\n    borderRadius: 8\n  },\n  buttonText: {\n    fontSize: 20,\n    color: Colors.white,\n    fontWeight: '700'\n  },\n  borderlessButtonContainer: {\n    marginTop: 16,\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/Owner/Downloads/Popgrammers/Code/AlphaV2/screens/LoginScreen.js"],"names":["React","useState","Formik","signInWithEmailAndPassword","KeyboardAwareScrollView","getDatabase","ref","set","update","child","get","View","TextInput","Logo","Button","FormErrorMessage","Images","Colors","auth","useTogglePasswordVisibility","loginValidationSchema","LoginScreen","navigation","errorState","setErrorState","passwordVisibility","handlePasswordVisibility","rightIcon","handleLogin","values","email","password","catch","error","message","styles","container","logoContainer","logo","screenTitle","touched","errors","handleChange","handleSubmit","handleBlur","button","buttonText","borderlessButtonContainer","navigate","StyleSheet","create","flex","backgroundColor","paddingHorizontal","alignItems","fontSize","fontWeight","color","orange","paddingTop","width","justifyContent","alignSelf","marginTop","padding","borderRadius","white"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Text, StyleSheet } from 'react-native';\r\nimport { Formik } from 'formik';\r\nimport { signInWithEmailAndPassword } from 'firebase/auth';\r\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\r\nimport { getDatabase, ref, set, update, child, get } from \"firebase/database\";\r\n\r\nimport { View, TextInput, Logo, Button, FormErrorMessage } from '../components';\r\nimport { Images, Colors, auth } from '../config';\r\nimport { useTogglePasswordVisibility } from '../hooks';\r\nimport { loginValidationSchema } from '../utils';\r\n\r\nexport const LoginScreen = ({ navigation }) => {\r\n  const [errorState, setErrorState] = useState('');\r\n  const { passwordVisibility, handlePasswordVisibility, rightIcon } =\r\n    useTogglePasswordVisibility();\r\n\r\n\r\n  \r\n  \r\n  const handleLogin = values => {\r\n    const { email, password } = values;\r\n    signInWithEmailAndPassword(auth, email, password).catch(error =>\r\n      setErrorState(error.message)\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <View isSafe style={styles.container}>\r\n        <KeyboardAwareScrollView enableOnAndroid={true}>\r\n          {/* LogoContainer: consits app logo and screen title */}\r\n          <View style={styles.logoContainer}>\r\n            <Logo uri={Images.logo} />\r\n            <Text style={styles.screenTitle}>Welcome to the Popgrammers app.</Text>\r\n            <Text style={styles.screenTitle}> Please Log in.</Text>\r\n          </View>\r\n          <Formik\r\n            initialValues={{\r\n              email: '',\r\n              password: ''\r\n            }}\r\n            validationSchema={loginValidationSchema}\r\n            onSubmit={values => handleLogin(values)}\r\n          >\r\n            {({\r\n              values,\r\n              touched,\r\n              errors,\r\n              handleChange,\r\n              handleSubmit,\r\n              handleBlur\r\n            }) => (\r\n              <>\r\n                {/* Input fields */}\r\n                <TextInput\r\n                  name='email'\r\n                  leftIconName='email'\r\n                  placeholder='Enter email'\r\n                  autoCapitalize='none'\r\n                  keyboardType='email-address'\r\n                  textContentType='emailAddress'\r\n                  autoFocus={true}\r\n                  value={values.email}\r\n                  onChangeText={handleChange('email')}\r\n                  onBlur={handleBlur('email')}\r\n                />\r\n                <FormErrorMessage\r\n                  error={errors.email}\r\n                  visible={touched.email}\r\n                />\r\n                <TextInput\r\n                  name='password'\r\n                  leftIconName='key-variant'\r\n                  placeholder='Enter password'\r\n                  autoCapitalize='none'\r\n                  autoCorrect={false}\r\n                  secureTextEntry={passwordVisibility}\r\n                  textContentType='password'\r\n                  rightIcon={rightIcon}\r\n                  handlePasswordVisibility={handlePasswordVisibility}\r\n                  value={values.password}\r\n                  onChangeText={handleChange('password')}\r\n                  onBlur={handleBlur('password')}\r\n                />\r\n                <FormErrorMessage\r\n                  error={errors.password}\r\n                  visible={touched.password}\r\n                />\r\n                {/* Display Screen Error Mesages */}\r\n                {errorState !== '' ? (\r\n                  <FormErrorMessage error={errorState} visible={true} />\r\n                ) : null}\r\n                {/* Login button */}\r\n                <Button style={styles.button} onPress={handleSubmit}>\r\n                  <Text style={styles.buttonText}>Login</Text>\r\n                </Button>\r\n              </>\r\n            )}\r\n          </Formik>\r\n          {/* Button for signup screen */}\r\n          <Button style={styles.borderlessButtonContainer} borderless\r\n          title={'Create a new account?'}\r\n          onPress = {() => navigation.navigate('Signup')}\r\n          />\r\n          {/* Button for Forgot Password screen */}\r\n          <Button style={styles.borderlessButtonContainer} borderless\r\n          title={'Forgot Password?'}\r\n          onPress = {() => navigation.navigate('ForgotPassword')}\r\n          />\r\n\r\n        \r\n         \r\n        </KeyboardAwareScrollView>\r\n      </View>\r\n\r\n      \r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n\tflex: 1,\r\n    backgroundColor: 'black',\r\n    paddingHorizontal: 12,\r\n    alignItems: 'center'\r\n  },\r\n  logoContainer: {\r\n    alignItems: 'center'\r\n  },\r\n  screenTitle: {\r\n    fontSize: 18,\r\n    fontWeight: '700',\r\n    color: Colors.orange,\r\n    paddingTop: 10\r\n  },\r\n  button: {\r\n    width: '50%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    alignSelf: 'center',\r\n    marginTop: 8,\r\n    backgroundColor: Colors.orange,\r\n    padding: 10,\r\n    borderRadius: 8,\r\n  },\r\n  buttonText: {\r\n    fontSize: 20,\r\n    color: Colors.white,\r\n    fontWeight: '700',\r\n\r\n  },\r\n  borderlessButtonContainer: {\r\n    marginTop: 16, \r\n    alignItems: 'center',\r\n  },\r\n\r\n});\r\n"]},"metadata":{},"sourceType":"module"}