{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Formik } from 'formik';\nimport { createUserWithEmailAndPassword, getAuth } from 'firebase/auth';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { getDatabase, ref, set, update, child, get } from \"firebase/database\";\nimport { View, TextInput, Logo, Button, FormErrorMessage } from \"../components\";\nimport { Images, Colors, auth, db } from \"../config\";\nimport { useTogglePasswordVisibility } from \"../hooks\";\nimport { signupValidationSchema } from \"../utils\";\nimport { collection, getDocs, addDoc, setDoc, doc } from \"firebase/firestore\";\nexport var SignupScreen = function SignupScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      errorState = _useState2[0],\n      setErrorState = _useState2[1];\n\n  function writeUser(email) {\n    var db = getDatabase();\n    set(ref(db, 'users/' + uuid.v4()), {\n      username: email,\n      type: \"customer\"\n    });\n    console.log(\"user added to database\");\n  }\n\n  function writeToFirestore(email) {\n    var auth = getAuth();\n    var user = auth.currentUser;\n    console.log(user);\n    setDoc(doc(db, 'Users', '1'), {\n      username: email,\n      type: \"customer\"\n    });\n  }\n\n  var _useTogglePasswordVis = useTogglePasswordVisibility(),\n      passwordVisibility = _useTogglePasswordVis.passwordVisibility,\n      handlePasswordVisibility = _useTogglePasswordVis.handlePasswordVisibility,\n      rightIcon = _useTogglePasswordVis.rightIcon,\n      handleConfirmPasswordVisibility = _useTogglePasswordVis.handleConfirmPasswordVisibility,\n      confirmPasswordIcon = _useTogglePasswordVis.confirmPasswordIcon,\n      confirmPasswordVisibility = _useTogglePasswordVis.confirmPasswordVisibility;\n\n  var handleSignup = function handleSignup(values) {\n    var email, password;\n    return _regeneratorRuntime.async(function handleSignup$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = values.email, password = values.password;\n            createUserWithEmailAndPassword(auth, email, password).then(function (email) {\n              setDoc(doc(db, 'Users', auth.currentUser.uid), {\n                username: auth.currentUser.email,\n                type: \"customer\"\n              });\n            }, function (error) {\n              setErrorState(error.message);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    isSafe: true,\n    style: styles.container\n  }, React.createElement(KeyboardAwareScrollView, {\n    enableOnAndroid: true\n  }, React.createElement(View, {\n    style: styles.logoContainer\n  }, React.createElement(Logo, {\n    uri: Images.logo\n  }), React.createElement(Text, {\n    style: styles.screenTitle\n  }, \"Create a new account!\")), React.createElement(Formik, {\n    initialValues: {\n      email: '',\n      password: '',\n      confirmPassword: ''\n    },\n    validationSchema: signupValidationSchema,\n    onSubmit: function onSubmit(values) {\n      return handleSignup(values);\n    }\n  }, function (_ref2) {\n    var values = _ref2.values,\n        touched = _ref2.touched,\n        errors = _ref2.errors,\n        handleChange = _ref2.handleChange,\n        handleSubmit = _ref2.handleSubmit,\n        handleBlur = _ref2.handleBlur;\n    return React.createElement(React.Fragment, null, React.createElement(TextInput, {\n      name: \"email\",\n      leftIconName: \"email\",\n      placeholder: \"Enter email\",\n      autoCapitalize: \"none\",\n      keyboardType: \"email-address\",\n      textContentType: \"emailAddress\",\n      autoFocus: true,\n      value: values.email,\n      onChangeText: handleChange('email'),\n      onBlur: handleBlur('email')\n    }), React.createElement(FormErrorMessage, {\n      error: errors.email,\n      visible: touched.email\n    }), React.createElement(TextInput, {\n      name: \"password\",\n      leftIconName: \"key-variant\",\n      placeholder: \"Enter password\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      secureTextEntry: passwordVisibility,\n      textContentType: \"newPassword\",\n      rightIcon: rightIcon,\n      handlePasswordVisibility: handlePasswordVisibility,\n      value: values.password,\n      onChangeText: handleChange('password'),\n      onBlur: handleBlur('password')\n    }), React.createElement(FormErrorMessage, {\n      error: errors.password,\n      visible: touched.password\n    }), React.createElement(TextInput, {\n      name: \"confirmPassword\",\n      leftIconName: \"key-variant\",\n      placeholder: \"Enter password\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      secureTextEntry: confirmPasswordVisibility,\n      textContentType: \"password\",\n      rightIcon: confirmPasswordIcon,\n      handlePasswordVisibility: handleConfirmPasswordVisibility,\n      value: values.confirmPassword,\n      onChangeText: handleChange('confirmPassword'),\n      onBlur: handleBlur('confirmPassword')\n    }), React.createElement(FormErrorMessage, {\n      error: errors.confirmPassword,\n      visible: touched.confirmPassword\n    }), errorState !== '' ? React.createElement(FormErrorMessage, {\n      error: errorState,\n      visible: true\n    }) : null, React.createElement(Button, {\n      style: styles.button,\n      onPress: handleSubmit\n    }, React.createElement(Text, {\n      style: styles.buttonText\n    }, \"Signup\")));\n  }), React.createElement(Button, {\n    style: styles.borderlessButtonContainer,\n    borderless: true,\n    title: 'Already have an account?',\n    onPress: function onPress() {\n      return navigation.navigate('Login');\n    }\n  })));\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    paddingHorizontal: 12\n  },\n  logoContainer: {\n    alignItems: 'center'\n  },\n  screenTitle: {\n    fontSize: 32,\n    fontWeight: '700',\n    color: Colors.orange,\n    paddingTop: 20\n  },\n  button: {\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 8,\n    backgroundColor: Colors.orange,\n    padding: 10,\n    borderRadius: 8\n  },\n  buttonText: {\n    fontSize: 20,\n    color: Colors.white,\n    fontWeight: '700'\n  },\n  borderlessButtonContainer: {\n    marginTop: 16,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/camer/Documents/GitHub/Popgrammers/Code/AlphaV2/screens/SignupScreen.js"],"names":["React","useState","Formik","createUserWithEmailAndPassword","getAuth","KeyboardAwareScrollView","getDatabase","ref","set","update","child","get","View","TextInput","Logo","Button","FormErrorMessage","Images","Colors","auth","db","useTogglePasswordVisibility","signupValidationSchema","collection","getDocs","addDoc","setDoc","doc","SignupScreen","navigation","errorState","setErrorState","writeUser","email","uuid","v4","username","type","console","log","writeToFirestore","user","currentUser","passwordVisibility","handlePasswordVisibility","rightIcon","handleConfirmPasswordVisibility","confirmPasswordIcon","confirmPasswordVisibility","handleSignup","values","password","then","uid","error","message","styles","container","logoContainer","logo","screenTitle","confirmPassword","touched","errors","handleChange","handleSubmit","handleBlur","button","buttonText","borderlessButtonContainer","navigate","StyleSheet","create","flex","backgroundColor","paddingHorizontal","alignItems","fontSize","fontWeight","color","orange","paddingTop","width","justifyContent","marginTop","padding","borderRadius","white"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Text, StyleSheet } from 'react-native';\r\nimport { Formik } from 'formik';\r\nimport { createUserWithEmailAndPassword, getAuth } from 'firebase/auth';\r\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\r\nimport { getDatabase, ref, set, update, child, get } from \"firebase/database\";\r\nimport { View, TextInput, Logo, Button, FormErrorMessage } from '../components';\r\nimport { Images, Colors, auth, db } from '../config';\r\nimport { useTogglePasswordVisibility } from '../hooks';\r\nimport { signupValidationSchema } from '../utils';\r\n\r\nimport { collection, getDocs, addDoc, setDoc, doc } from \"firebase/firestore\"; \r\n\r\n\r\n\r\n\r\nexport const SignupScreen = ({ navigation }) => {\r\n  const [errorState, setErrorState] = useState('');\r\n\r\n  function writeUser(email){\r\n    const db = getDatabase();\r\n    set(ref(db, 'users/' + uuid.v4() ),{\r\n      username: email,\r\n      type: \"customer\"\r\n    });\r\n    console.log(\"user added to database\");\r\n  }\r\n  \r\n\r\n  function writeToFirestore(email){\r\n    const auth = getAuth();\r\n    const user = auth.currentUser;\r\n    console.log(user);\r\n   \r\n    setDoc(doc(db,'Users', '1'),{\r\n      username: email,\r\n      type: \"customer\"\r\n    });\r\n  }\r\n\r\n  const {\r\n    passwordVisibility,\r\n    handlePasswordVisibility,\r\n    rightIcon,\r\n    handleConfirmPasswordVisibility,\r\n    confirmPasswordIcon,\r\n    confirmPasswordVisibility\r\n  } = useTogglePasswordVisibility();\r\n\r\n  const handleSignup = async values => {\r\n    const { email, password } = values;\r\n\r\n    createUserWithEmailAndPassword(auth, email, password).then(function(email){\r\n      //after account is created a document is added to Users collection with username of current account and default type customer.\r\n      setDoc(doc(db,'Users', auth.currentUser.uid),{\r\n       username: auth.currentUser.email,\r\n        type: \"customer\"\r\n       });\r\n\r\n\r\n    }, function(error){\r\n      setErrorState(error.message)\r\n    });\r\n    \r\n \r\n\r\n  };\r\n\r\n  return (\r\n    <View isSafe style={styles.container}>\r\n      <KeyboardAwareScrollView enableOnAndroid={true}>\r\n        {/* LogoContainer: consits app logo and screen title */}\r\n        <View style={styles.logoContainer}>\r\n          <Logo uri={Images.logo} />\r\n          <Text style={styles.screenTitle}>Create a new account!</Text>\r\n        </View>\r\n        {/* Formik Wrapper */}\r\n        <Formik\r\n          initialValues={{\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n          }}\r\n          validationSchema={signupValidationSchema}\r\n          onSubmit={values => handleSignup(values)}\r\n        >\r\n          {({\r\n            values,\r\n            touched,\r\n            errors,\r\n            handleChange,\r\n            handleSubmit,\r\n            handleBlur\r\n          }) => (\r\n            <>\r\n              {/* Input fields */}\r\n              <TextInput\r\n                name='email'\r\n                leftIconName='email'\r\n                placeholder='Enter email'\r\n                autoCapitalize='none'\r\n                keyboardType='email-address'\r\n                textContentType='emailAddress'\r\n                autoFocus={true}\r\n                value={values.email}\r\n                onChangeText={handleChange('email')}\r\n                onBlur={handleBlur('email')}\r\n              />\r\n              <FormErrorMessage error={errors.email} visible={touched.email} />\r\n              <TextInput\r\n                name='password'\r\n                leftIconName='key-variant'\r\n                placeholder='Enter password'\r\n                autoCapitalize='none'\r\n                autoCorrect={false}\r\n                secureTextEntry={passwordVisibility}\r\n                textContentType='newPassword'\r\n                rightIcon={rightIcon}\r\n                handlePasswordVisibility={handlePasswordVisibility}\r\n                value={values.password}\r\n                onChangeText={handleChange('password')}\r\n                onBlur={handleBlur('password')}\r\n              />\r\n              <FormErrorMessage\r\n                error={errors.password}\r\n                visible={touched.password}\r\n              />\r\n              <TextInput\r\n                name='confirmPassword'\r\n                leftIconName='key-variant'\r\n                placeholder='Enter password'\r\n                autoCapitalize='none'\r\n                autoCorrect={false}\r\n                secureTextEntry={confirmPasswordVisibility}\r\n                textContentType='password'\r\n                rightIcon={confirmPasswordIcon}\r\n                handlePasswordVisibility={handleConfirmPasswordVisibility}\r\n                value={values.confirmPassword}\r\n                onChangeText={handleChange('confirmPassword')}\r\n                onBlur={handleBlur('confirmPassword')}\r\n              />\r\n              <FormErrorMessage\r\n                error={errors.confirmPassword}\r\n                visible={touched.confirmPassword}\r\n              />\r\n              {/* Display Screen Error Mesages */}\r\n              {errorState !== '' ? (\r\n                <FormErrorMessage error={errorState} visible={true} />\r\n              ) : null}\r\n              {/* Signup button */}\r\n              <Button style={styles.button} onPress={handleSubmit}>\r\n                <Text style={styles.buttonText}>Signup</Text>\r\n              </Button>\r\n            </>\r\n          )}\r\n        </Formik>\r\n        {/* Button to navigate to Login screen */}\r\n        <Button\r\n          style={styles.borderlessButtonContainer}\r\n          borderless\r\n          title={'Already have an account?'}\r\n          onPress={() => navigation.navigate('Login')}\r\n        />\r\n      </KeyboardAwareScrollView>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: 'black',\r\n    paddingHorizontal: 12\r\n  },\r\n  logoContainer: {\r\n    alignItems: 'center'\r\n  },\r\n  screenTitle: {\r\n    fontSize: 32,\r\n    fontWeight: '700',\r\n    color: Colors.orange,\r\n    paddingTop: 20\r\n  },\r\n  button: {\r\n    width: '100%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginTop: 8,\r\n    backgroundColor: Colors.orange,\r\n    padding: 10,\r\n    borderRadius: 8\r\n  },\r\n  buttonText: {\r\n    fontSize: 20,\r\n    color: Colors.white,\r\n    fontWeight: '700'\r\n  },\r\n  borderlessButtonContainer: {\r\n    marginTop: 16,\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}