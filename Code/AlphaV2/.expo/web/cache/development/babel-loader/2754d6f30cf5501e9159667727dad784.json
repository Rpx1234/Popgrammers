{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from \"./BaseRouter\";\nexport var StackActions = {\n  replace: function replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  push: function push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  pop: function pop() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count: count\n      }\n    };\n  },\n  popToTop: function popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n};\nexport default function StackRouter(options) {\n  var router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'stack',\n    getInitialState: function getInitialState(_ref) {\n      var routeNames = _ref.routeNames,\n          routeParamList = _ref.routeParamList;\n      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\" + nanoid(),\n        index: 0,\n        routeNames: routeNames,\n        routes: [{\n          key: initialRouteName + \"-\" + nanoid(),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList;\n      var state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name);\n      }).map(function (route) {\n        return _objectSpread(_objectSpread({}, route), {}, {\n          key: route.key || route.name + \"-\" + nanoid(),\n          params: routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), route.params) : route.params\n        });\n      });\n\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: initialRouteName + \"-\" + nanoid(),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\" + nanoid(),\n        index: routes.length - 1,\n        routeNames: routeNames,\n        routes: routes\n      };\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList,\n          routeKeyChanges = _ref3.routeKeyChanges;\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name) && !routeKeyChanges.includes(route.name);\n      });\n\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: initialRouteName + \"-\" + nanoid(),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        routeNames: routeNames,\n        routes: routes,\n        index: Math.min(state.index, routes.length - 1)\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        index: index,\n        routes: state.routes.slice(0, index + 1)\n      });\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      var routeParamList = options.routeParamList;\n\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            var index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n\n            if (index === -1) {\n              return null;\n            }\n\n            var _action$payload = action.payload,\n                name = _action$payload.name,\n                key = _action$payload.key,\n                params = _action$payload.params;\n\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.map(function (route, i) {\n                return i === index ? {\n                  key: key !== undefined ? key : name + \"-\" + nanoid(),\n                  name: name,\n                  params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), params) : params\n                } : route;\n              })\n            });\n          }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            var getId = options.routeGetIdList[action.payload.name];\n            var id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            var route = id ? state.routes.find(function (route) {\n              return route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n                params: route.params\n              }));\n            }) : undefined;\n            var routes;\n\n            if (route) {\n              routes = state.routes.filter(function (r) {\n                return r.key !== route.key;\n              });\n              routes.push(_objectSpread(_objectSpread({}, route), {}, {\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }));\n            } else {\n              routes = [].concat(_toConsumableArray(state.routes), [{\n                key: action.payload.name + \"-\" + nanoid(),\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }]);\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: routes.length - 1,\n              routes: routes\n            });\n          }\n\n          return null;\n\n        case 'POP':\n          {\n            var _index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n\n            if (_index > 0) {\n              var count = Math.max(_index - action.payload.count + 1, 1);\n\n              var _routes = state.routes.slice(0, count).concat(state.routes.slice(_index + 1));\n\n              return _objectSpread(_objectSpread({}, state), {}, {\n                index: _routes.length - 1,\n                routes: _routes\n              });\n            }\n\n            return null;\n          }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n\n        case 'NAVIGATE':\n          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            var _action$payload$path;\n\n            var _index2 = -1;\n\n            var _getId = action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;\n\n            var _id = _getId === null || _getId === void 0 ? void 0 : _getId({\n              params: action.payload.params\n            });\n\n            if (_id) {\n              _index2 = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name && _id === (_getId === null || _getId === void 0 ? void 0 : _getId({\n                  params: route.params\n                }));\n              });\n            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              _index2 = state.index;\n            } else {\n              for (var i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  _index2 = i;\n                  break;\n                }\n              }\n            }\n\n            if (_index2 === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n\n            if (_index2 === -1 && action.payload.name !== undefined) {\n              var _action$payload$key;\n\n              var _routes2 = [].concat(_toConsumableArray(state.routes), [{\n                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : action.payload.name + \"-\" + nanoid(),\n                name: action.payload.name,\n                path: action.payload.path,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }]);\n\n              return _objectSpread(_objectSpread({}, state), {}, {\n                routes: _routes2,\n                index: _routes2.length - 1\n              });\n            }\n\n            var _route = state.routes[_index2];\n\n            var _params;\n\n            if (action.payload.merge) {\n              _params = action.payload.params !== undefined || routeParamList[_route.name] !== undefined ? _objectSpread(_objectSpread(_objectSpread({}, routeParamList[_route.name]), _route.params), action.payload.params) : _route.params;\n            } else {\n              _params = routeParamList[_route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[_route.name]), action.payload.params) : action.payload.params;\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: _index2,\n              routes: [].concat(_toConsumableArray(state.routes.slice(0, _index2)), [_params !== _route.params || action.payload.path && action.payload.path !== _route.path ? _objectSpread(_objectSpread({}, _route), {}, {\n                path: (_action$payload$path = action.payload.path) !== null && _action$payload$path !== void 0 ? _action$payload$path : _route.path,\n                params: _params\n              }) : state.routes[_index2]])\n            });\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  });\n\n  return router;\n}","map":{"version":3,"mappings":"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","names":["nanoid","BaseRouter","StackActions","replace","name","params","type","payload","push","pop","count","popToTop","StackRouter","options","router","getInitialState","routeNames","routeParamList","initialRouteName","undefined","includes","stale","key","index","routes","getRehydratedState","partialState","state","filter","route","map","length","getStateForRouteNamesChange","routeKeyChanges","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","getId","routeGetIdList","id","find","max","concat","path","merge","actionCreators"],"sources":["StackRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Route,\n  Router,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<ParamList extends ParamListBase> =\n  NavigationState<ParamList> & {\n    /**\n     * Type of the router, in this case, it's stack.\n     */\n    type: 'stack';\n  };\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = state.routes.filter(\n        (route) =>\n          routeNames.includes(route.name) &&\n          !routeKeyChanges.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({ params: action.payload.params });\n\n            const route = id\n              ? state.routes.find(\n                  (route) =>\n                    route.name === action.payload.name &&\n                    id === getId?.({ params: route.params })\n                )\n              : undefined;\n\n            let routes: Route<string>[];\n\n            if (route) {\n              routes = state.routes.filter((r) => r.key !== route.key);\n              routes.push({\n                ...route,\n                params:\n                  routeParamList[action.payload.name] !== undefined\n                    ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params,\n                      }\n                    : action.payload.params,\n              });\n            } else {\n              routes = [\n                ...state.routes,\n                {\n                  key: `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n            }\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.name !== undefined &&\n            !state.routeNames.includes(action.payload.name)\n          ) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            const getId =\n              // `getId` and `key` can't be used together\n              action.payload.key === undefined &&\n              action.payload.name !== undefined\n                ? options.routeGetIdList[action.payload.name]\n                : undefined;\n            const id = getId?.({ params: action.payload.params });\n\n            if (id) {\n              index = state.routes.findIndex(\n                (route) =>\n                  route.name === action.payload.name &&\n                  id === getId?.({ params: route.params })\n              );\n            } else if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              const routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  path: action.payload.path,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n              };\n            }\n\n            const route = state.routes[index];\n\n            let params;\n\n            if (action.payload.merge) {\n              params =\n                action.payload.params !== undefined ||\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                      ...action.payload.params,\n                    }\n                  : route.params;\n            } else {\n              params =\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params,\n                    }\n                  : action.payload.params;\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                params !== route.params ||\n                (action.payload.path && action.payload.path !== route.path)\n                  ? {\n                      ...route,\n                      path: action.payload.path ?? route.path,\n                      params,\n                    }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"module"}