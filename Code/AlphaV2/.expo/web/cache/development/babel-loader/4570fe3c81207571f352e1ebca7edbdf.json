{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nexport default function useFocusedListenersChildrenAdapter(_ref) {\n  var navigation = _ref.navigation,\n      focusedListeners = _ref.focusedListeners;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      addListener = _React$useContext.addListener;\n\n  var listener = React.useCallback(function (callback) {\n    if (navigation.isFocused()) {\n      for (var _iterator = _createForOfIteratorHelperLoose(focusedListeners), _step; !(_step = _iterator()).done;) {\n        var _listener = _step.value;\n\n        var _listener2 = _listener(callback),\n            handled = _listener2.handled,\n            result = _listener2.result;\n\n        if (handled) {\n          return {\n            handled: handled,\n            result: result\n          };\n        }\n      }\n\n      return {\n        handled: true,\n        result: callback(navigation)\n      };\n    } else {\n      return {\n        handled: false,\n        result: null\n      };\n    }\n  }, [focusedListeners, navigation]);\n  React.useEffect(function () {\n    return addListener === null || addListener === void 0 ? void 0 : addListener('focus', listener);\n  }, [addListener, listener]);\n}","map":{"version":3,"mappings":";;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,wBAAP;AAcA,eAAe,SAASC,kCAAT,OAGH;AAAA,MAFVC,UAEU,QAFVA,UAEU;AAAA,MADVC,gBACU,QADVA,gBACU;;AACV,0BAAwBJ,KAAK,CAACK,UAANL,CAAiBC,wBAAjBD,CAAxB;AAAA,MAAQM,WAAR,qBAAQA,WAAR;;AAEA,MAAMC,QAAQ,GAAGP,KAAK,CAACQ,WAANR,CACdS,kBAAD,EAA8C;AAC5C,QAAIN,UAAU,CAACO,SAAXP,EAAJ,EAA4B;AAC1B,2DAAuBC,gBAAvB,wCAAyC;AAAA,YAA9BG,SAA8B;;AACvC,yBAA4BA,SAAQ,CAACE,QAAD,CAApC;AAAA,YAAQE,OAAR,cAAQA,OAAR;AAAA,YAAiBC,MAAjB,cAAiBA,MAAjB;;AAEA,YAAID,OAAJ,EAAa;AACX,iBAAO;AAAEA,mBAAF,EAAEA,OAAF;AAAWC;AAAX,WAAP;AACD;AACF;;AAED,aAAO;AAAED,eAAO,EAAE,IAAX;AAAiBC,cAAM,EAAEH,QAAQ,CAACN,UAAD;AAAjC,OAAP;AATF,WAUO;AACL,aAAO;AAAEQ,eAAO,EAAE,KAAX;AAAkBC,cAAM,EAAE;AAA1B,OAAP;AACD;AAdY,KAgBf,CAACR,gBAAD,EAAmBD,UAAnB,CAhBeH,CAAjB;AAmBAA,OAAK,CAACa,SAANb,CACE;AAAA,WAAMM,WAAN,SAAMA,eAAN,WAAMA,GAAN,MAAMA,cAAW,CAAG,OAAH,EAAYC,QAAZ,CAAjB;AAAA,GADFP,EAEE,CAACM,WAAD,EAAcC,QAAd,CAFFP;AAID","names":["React","NavigationBuilderContext","useFocusedListenersChildrenAdapter","navigation","focusedListeners","useContext","addListener","listener","useCallback","callback","isFocused","handled","result","useEffect"],"sources":["useFocusedListenersChildrenAdapter.tsx"],"sourcesContent":["import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(\n    () => addListener?.('focus', listener),\n    [addListener, listener]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}