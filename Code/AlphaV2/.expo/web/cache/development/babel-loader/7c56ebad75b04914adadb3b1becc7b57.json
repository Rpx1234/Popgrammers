{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { getPathFromState, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from \"./LinkingContext\";\n\nvar getRootStateForNavigate = function getRootStateForNavigate(navigation, state) {\n  var parent = navigation.getParent();\n\n  if (parent) {\n    var parentState = parent.getState();\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [_objectSpread(_objectSpread({}, parentState.routes[parentState.index]), {}, {\n        state: state\n      })]\n    });\n  }\n\n  return state;\n};\n\nexport default function useLinkBuilder() {\n  var navigation = React.useContext(NavigationHelpersContext);\n  var linking = React.useContext(LinkingContext);\n  var buildLink = React.useCallback(function (name, params) {\n    var options = linking.options;\n\n    if ((options === null || options === void 0 ? void 0 : options.enabled) === false) {\n      return undefined;\n    }\n\n    var state = navigation ? getRootStateForNavigate(navigation, {\n      index: 0,\n      routes: [{\n        name: name,\n        params: params\n      }]\n    }) : {\n      index: 0,\n      routes: [{\n        name: name,\n        params: params\n      }]\n    };\n    var path = options !== null && options !== void 0 && options.getPathFromState ? options.getPathFromState(state, options === null || options === void 0 ? void 0 : options.config) : getPathFromState(state, options === null || options === void 0 ? void 0 : options.config);\n    return path;\n  }, [linking, navigation]);\n  return buildLink;\n}","map":{"version":3,"mappings":";;;;;;AAAA,SACEA,gBADF,EAGEC,wBAHF,QAMO,wBANP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,cAAP;;AAWA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAC9BC,UAD8B,EAE9BC,KAF8B,EAGb;AACjB,MAAMC,MAAM,GAAGF,UAAU,CAACG,SAAXH,EAAf;;AAEA,MAAIE,MAAJ,EAAY;AACV,QAAME,WAAW,GAAGF,MAAM,CAACG,QAAPH,EAApB;AAEA,WAAOH,uBAAuB,CAACG,MAAD,EAAS;AACrCI,WAAK,EAAE,CAD8B;AAErCC,YAAM,EAAE,iCAEDH,WAAW,CAACG,MAAZH,CAAmBA,WAAW,CAACE,KAA/BF,CAFC;AAGJH,aAAK,EAAEA;AAHH;AAF6B,KAAT,CAA9B;AASD;;AAED,SAAOA,KAAP;AApBF;;AA2BA,eAAe,SAASO,cAAT,GAA0B;AACvC,MAAMR,UAAU,GAAGH,KAAK,CAACY,UAANZ,CAAiBD,wBAAjBC,CAAnB;AACA,MAAMa,OAAO,GAAGb,KAAK,CAACY,UAANZ,CAAiBC,cAAjBD,CAAhB;AAEA,MAAMc,SAAS,GAAGd,KAAK,CAACe,WAANf,CAChB,UAACgB,IAAD,EAAeC,MAAf,EAAmC;AACjC,QAAQC,OAAR,GAAoBL,OAApB,CAAQK,OAAR;;AAEA,QAAI,QAAO,SAAPA,WAAO,WAAPA,mBAAO,CAAEC,OAAT,MAAqB,KAAzB,EAAgC;AAC9B,aAAOC,SAAP;AACD;;AAED,QAAMhB,KAAK,GAAGD,UAAU,GACpBD,uBAAuB,CAACC,UAAD,EAAa;AAClCM,WAAK,EAAE,CAD2B;AAElCC,YAAM,EAAE,CAAC;AAAEM,YAAF,EAAEA,IAAF;AAAQC;AAAR,OAAD;AAF0B,KAAb,CADH,GAOpB;AACER,WAAK,EAAE,CADT;AAEEC,YAAM,EAAE,CAAC;AAAEM,YAAF,EAAEA,IAAF;AAAQC;AAAR,OAAD;AAFV,KAPJ;AAYA,QAAMI,IAAI,GAAGH,OAAO,SAAPA,WAAO,WAAPA,WAAO,CAAEpB,gBAAToB,GACTA,OAAO,CAACpB,gBAARoB,CAAyBd,KAAzBc,EAAgCA,OAAhC,SAAgCA,WAAhC,WAAgCA,GAAhC,MAAgCA,UAAO,CAAEI,MAAzCJ,CADSA,GAETpB,gBAAgB,CAACM,KAAD,EAAQc,OAAR,SAAQA,WAAR,WAAQA,GAAR,MAAQA,UAAO,CAAEI,MAAjB,CAFpB;AAIA,WAAOD,IAAP;AAxBc,KA0BhB,CAACR,OAAD,EAAUV,UAAV,CA1BgBH,CAAlB;AA6BA,SAAOc,SAAP;AACD","names":["getPathFromState","NavigationHelpersContext","React","LinkingContext","getRootStateForNavigate","navigation","state","parent","getParent","parentState","getState","index","routes","useLinkBuilder","useContext","linking","buildLink","useCallback","name","params","options","enabled","undefined","path","config"],"sources":["useLinkBuilder.tsx"],"sourcesContent":["import {\n  getPathFromState,\n  NavigationHelpers,\n  NavigationHelpersContext,\n  NavigationProp,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\ntype NavigationObject =\n  | NavigationHelpers<ParamListBase>\n  | NavigationProp<ParamListBase>;\n\ntype MinimalState = {\n  index: number;\n  routes: { name: string; params?: object; state?: MinimalState }[];\n};\n\nconst getRootStateForNavigate = (\n  navigation: NavigationObject,\n  state: MinimalState\n): MinimalState => {\n  const parent = navigation.getParent();\n\n  if (parent) {\n    const parentState = parent.getState();\n\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [\n        {\n          ...parentState.routes[parentState.index],\n          state: state,\n        },\n      ],\n    });\n  }\n\n  return state;\n};\n\n/**\n * Build destination link for a navigate action.\n * Useful for showing anchor tags on the web for buttons that perform navigation.\n */\nexport default function useLinkBuilder() {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linking = React.useContext(LinkingContext);\n\n  const buildLink = React.useCallback(\n    (name: string, params?: object) => {\n      const { options } = linking;\n\n      if (options?.enabled === false) {\n        return undefined;\n      }\n\n      const state = navigation\n        ? getRootStateForNavigate(navigation, {\n            index: 0,\n            routes: [{ name, params }],\n          })\n        : // If we couldn't find a navigation object in context, we're at root\n          // So we'll construct a basic state object to use\n          {\n            index: 0,\n            routes: [{ name, params }],\n          };\n\n      const path = options?.getPathFromState\n        ? options.getPathFromState(state, options?.config)\n        : getPathFromState(state, options?.config);\n\n      return path;\n    },\n    [linking, navigation]\n  );\n\n  return buildLink;\n}\n"]},"metadata":{},"sourceType":"module"}