{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Formik } from 'formik';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { View, TextInput, Logo, Button, FormErrorMessage } from \"../components\";\nimport { Images, Colors, auth, db } from \"../config\";\nimport { useTogglePasswordVisibility } from \"../hooks\";\nimport { loginValidationSchema } from \"../utils\";\nimport { getDatabase, ref, set, update, child, get, onValue } from \"firebase/database\";\nimport { collection, getDocs, updateDoc, doc, query, where } from \"firebase/firestore\";\nimport Counter from \"react-native-counters\";\nexport var InventoryScreen = function InventoryScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  function readInventory() {\n    var dbRef = ref(getDatabase());\n    get(child(dbRef, \"inventory/\")).then(function (snapshot) {\n      if (snapshot.exists()) {\n        console.log(snapshot.val());\n        console.log(\"test\");\n      } else {\n        console.log(\"No data available\");\n      }\n    }).catch(function (error) {\n      console.error(error);\n    });\n  }\n\n  var updateInventory = function updateInventory(name, newqty) {\n    var docid, q, querySnapshot, dbRef;\n    return _regeneratorRuntime.async(function updateInventory$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            q = query(collection(db, 'Inventory'), where(\"name\", \"==\", name));\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getDocs(q));\n\n          case 3:\n            querySnapshot = _context.sent;\n            querySnapshot.forEach(function (doc) {\n              console.log(doc.id);\n              docid = doc.id;\n            });\n            dbRef = doc(db, 'Inventory', docid);\n            updateDoc(dbRef, {\n              qty: newqty\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    var getInventory = function getInventory() {\n      var inventorySnapshot, inventoryList;\n      return _regeneratorRuntime.async(function getInventory$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(getDocs(collection(db, \"Inventory\")));\n\n            case 2:\n              inventorySnapshot = _context2.sent;\n              inventoryList = inventorySnapshot.docs.map(function (doc) {\n                return doc.data();\n              });\n              setData(inventoryList);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getInventory();\n  }, []);\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Text, {\n    style: styles.screenTitle\n  }, \"Inventory Management\"), data.map(function (data, qty) {\n    return React.createElement(React.Fragment, null, React.createElement(View, {\n      style: styles.parent\n    }, React.createElement(View, {\n      style: styles.block\n    }, React.createElement(Text, {\n      key: data,\n      style: styles.itemText\n    }, \" \", data.name)), React.createElement(View, {\n      style: styles.block\n    }, React.createElement(Counter, {\n      start: parseInt(data.qty),\n      max: 1000,\n      onChange: function onChange(len, type) {\n        console.log(len, type);\n        qty = len;\n      }\n    })), React.createElement(Button, {\n      style: styles.button,\n      borderless: true,\n      title: 'Submit',\n      onPress: function onPress() {\n        return updateInventory(data.name, qty);\n      }\n    })));\n  }), React.createElement(Button, {\n    style: styles.borderlessButtonContainer,\n    borderless: true,\n    title: 'Return To HomePage',\n    onPress: function onPress() {\n      return navigation.navigate('TheaterHomeScreen');\n    }\n  }));\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    paddingHorizontal: 12,\n    alignItems: 'center'\n  },\n  logoContainer: {\n    alignItems: 'center'\n  },\n  screenTitle: {\n    fontSize: 25,\n    fontWeight: '900',\n    color: '#fe4f02',\n    paddingTop: 10,\n    paddingBottom: 20\n  },\n  buttonText: {\n    fontSize: 20,\n    color: Colors.white,\n    fontWeight: '700'\n  },\n  borderlessButtonContainer: {\n    marginTop: 16,\n    alignItems: 'center'\n  },\n  itemText: {\n    fontSize: 20,\n    fontWeight: '500',\n    color: '#ff9361'\n  },\n  parent: {\n    flexDirection: \"row\"\n  },\n  block: {\n    flex: 3,\n    margin: 6\n  },\n  button: {\n    width: '20%',\n    alignItems: 'center',\n    marginLeft: 10,\n    backgroundColor: '#fe4f02',\n    padding: 4,\n    borderRadius: 8,\n    height: 30,\n    color: '#f6f6f6'\n  }\n});","map":{"version":3,"sources":["C:/Users/Owner/Downloads/Popgrammers/Code/AlphaV2/screens/InventoryScreen.js"],"names":["React","useState","useEffect","Formik","signInWithEmailAndPassword","KeyboardAwareScrollView","View","TextInput","Logo","Button","FormErrorMessage","Images","Colors","auth","db","useTogglePasswordVisibility","loginValidationSchema","getDatabase","ref","set","update","child","get","onValue","collection","getDocs","updateDoc","doc","query","where","Counter","InventoryScreen","navigation","data","setData","readInventory","dbRef","then","snapshot","exists","console","log","val","catch","error","updateInventory","name","newqty","q","querySnapshot","forEach","id","docid","qty","getInventory","inventorySnapshot","inventoryList","docs","map","styles","container","screenTitle","parent","block","itemText","parseInt","len","type","button","borderlessButtonContainer","navigate","StyleSheet","create","flex","backgroundColor","paddingHorizontal","alignItems","logoContainer","fontSize","fontWeight","color","paddingTop","paddingBottom","buttonText","white","marginTop","flexDirection","margin","width","marginLeft","padding","borderRadius","height"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react';\nimport { Text, StyleSheet, ScrollView, FlatList } from 'react-native';\nimport { Formik } from 'formik';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\n\nimport { View, TextInput, Logo, Button, FormErrorMessage } from '../components';\nimport { Images, Colors, auth, db} from '../config';\nimport { useTogglePasswordVisibility } from '../hooks';\nimport { loginValidationSchema } from '../utils';\nimport { getDatabase, ref, set, update, child, get, onValue } from \"firebase/database\";\n\nimport { collection, getDocs, updateDoc, doc, query, where } from \"firebase/firestore\"; \nimport Counter from \"react-native-counters\";\n\nexport const InventoryScreen = ({ navigation }) => {\n\n\n  const [data, setData] = useState([]);\n\n  function readInventory(){\n    const dbRef = ref(getDatabase());\n    get(child(dbRef, `inventory/`)).then((snapshot) => {\n      if (snapshot.exists()) {\n        //inventory = (snapshot.val());\n        console.log(snapshot.val());\n        console.log(\"test\");\n\n\n      } else {\n        console.log(\"No data available\");\n     }\n    }).catch((error) => {\n      console.error(error);\n    });\n\n\n  }\n  \n  \n\n  const updateInventory = async (name,newqty) => {\n    var docid;\n    const q = query(collection(db, 'Inventory'), where(\"name\" , \"==\" , name));\n    const querySnapshot =  await getDocs(q);\n    querySnapshot.forEach((doc) => {\n      console.log(doc.id);\n      docid = doc.id;\n    });\n    const dbRef = doc(db, 'Inventory', docid);\n    updateDoc(dbRef, {\n      qty: newqty\n    });\n  };\n\n\n  \n  \n\n\n  useEffect(() => {\n    const getInventory = async () => {\n      const inventorySnapshot = await getDocs(collection(db, \"Inventory\"));\n      const inventoryList = inventorySnapshot.docs.map((doc) => doc.data());\n      setData(inventoryList);\n     // console.log(inventoryList);\n  };\n  getInventory();\n}, [])\n\n\n  \n  return (\n    \n   \n    <View style={styles.container}>\n      <Text style={styles.screenTitle}>Inventory Management</Text>\n      {/* Buttons */}\n      \n\n     \n      {data.map((data,qty) =>(\n        <React.Fragment>\n          <View style = {styles.parent}>\n            <View style = {styles.block}>\n              <Text key = {data} style = {styles.itemText}> {data.name}</Text>            \n\n            </View>\n            <View style = {styles.block} >\n              <Counter  start = {parseInt(data.qty)} max = {1000}  onChange={(len, type) => {\n                console.log(len, type);\n                qty = len;\n              }} />\n            </View>\n            \n            <Button style={styles.button} borderless  title= {'Submit'}   \n              onPress = {() => updateInventory(data.name, qty)}\n            />\n           \n\n          </View>\n        </React.Fragment>\n        \n           \n      ))}\n     \n      \n      <Button style={styles.borderlessButtonContainer} borderless\n        title={'Return To HomePage'}\n      onPress = {() => navigation.navigate('TheaterHomeScreen')} />\n         \n\n          \n            \n          \n\n\n\n    </View>\n    \n  );\n};\n\n\n          \nconst styles = StyleSheet.create({\n  container: {\n\tflex: 1,\n    backgroundColor: 'black',\n    paddingHorizontal: 12,\n    alignItems: 'center'\n  },\n  logoContainer: {\n    alignItems: 'center'\n  },\n  screenTitle: {\n    fontSize: 25,\n    fontWeight: '900',\n    color: '#fe4f02',\n    paddingTop: 10,\n    paddingBottom: 20\n  },\n  buttonText: {\n    fontSize: 20,\n    color: Colors.white,\n    fontWeight: '700',\n\n  },\n  borderlessButtonContainer: {\n    marginTop: 16, \n    alignItems: 'center',\n  },\n  itemText: {\n    fontSize: 20,\n    fontWeight: '500',\n    color: '#ff9361',\n    \n    \n  },\n  parent: {\n    \n    flexDirection: \"row\",\n    \n  },\n  block: {\n    flex: 3,\n    margin: 6,\n  },\n  \n  button: {\n    \n    width: '20%',\n    alignItems: 'center',\n    marginLeft: 10,\n    backgroundColor: '#fe4f02',\n    padding: 4,\n    borderRadius: 8,\n    height: 30,\n    color: '#f6f6f6'\n  }\n  \n  });\n  "]},"metadata":{},"sourceType":"module"}