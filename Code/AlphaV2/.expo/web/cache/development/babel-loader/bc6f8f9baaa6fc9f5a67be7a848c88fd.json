{"ast":null,"code":"import * as React from 'react';\nimport NavigationContext from \"./NavigationContext\";\nexport default function useFocusEvents(_ref) {\n  var state = _ref.state,\n      emitter = _ref.emitter;\n  var navigation = React.useContext(NavigationContext);\n  var lastFocusedKeyRef = React.useRef();\n  var currentFocusedKey = state.routes[state.index].key;\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('focus', function () {\n      lastFocusedKeyRef.current = currentFocusedKey;\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('blur', function () {\n      lastFocusedKeyRef.current = undefined;\n      emitter.emit({\n        type: 'blur',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    var lastFocusedKey = lastFocusedKeyRef.current;\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    }\n\n    if (lastFocusedKey === currentFocusedKey || !(navigation ? navigation.isFocused() : true)) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      return;\n    }\n\n    emitter.emit({\n      type: 'blur',\n      target: lastFocusedKey\n    });\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n}","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,iBAAP;AAYA,eAAe,SAASC,cAAT,OAGI;AAAA,MAFjBC,KAEiB,QAFjBA,KAEiB;AAAA,MADjBC,OACiB,QADjBA,OACiB;AACjB,MAAMC,UAAU,GAAGL,KAAK,CAACM,UAANN,CAAiBC,iBAAjBD,CAAnB;AACA,MAAMO,iBAAiB,GAAGP,KAAK,CAACQ,MAANR,EAA1B;AAEA,MAAMS,iBAAiB,GAAGN,KAAK,CAACO,MAANP,CAAaA,KAAK,CAACQ,KAAnBR,EAA0BS,GAApD;AAIAZ,OAAK,CAACa,SAANb,CACE;AAAA,WACEK,UADF,SACEA,cADF,WACEA,GADF,MACEA,aAAU,CAAES,WAAZT,CAAwB,OAAxBA,EAAiC,YAAM;AACrCE,uBAAiB,CAACQ,OAAlBR,GAA4BE,iBAA5BF;AACAH,aAAO,CAACY,IAARZ,CAAa;AAAEa,YAAI,EAAE,OAAR;AAAiBC,cAAM,EAAET;AAAzB,OAAbL;AAFF,MADF;AAAA,GADFJ,EAME,CAACS,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CANFL;AASAA,OAAK,CAACa,SAANb,CACE;AAAA,WACEK,UADF,SACEA,cADF,WACEA,GADF,MACEA,aAAU,CAAES,WAAZT,CAAwB,MAAxBA,EAAgC,YAAM;AACpCE,uBAAiB,CAACQ,OAAlBR,GAA4BY,SAA5BZ;AACAH,aAAO,CAACY,IAARZ,CAAa;AAAEa,YAAI,EAAE,MAAR;AAAgBC,cAAM,EAAET;AAAxB,OAAbL;AAFF,MADF;AAAA,GADFJ,EAME,CAACS,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CANFL;AASAA,OAAK,CAACa,SAANb,CAAgB,YAAM;AACpB,QAAMoB,cAAc,GAAGb,iBAAiB,CAACQ,OAAzC;AAEAR,qBAAiB,CAACQ,OAAlBR,GAA4BE,iBAA5BF;;AAIA,QAAIa,cAAc,KAAKD,SAAnBC,IAAgC,CAACf,UAArC,EAAiD;AAC/CD,aAAO,CAACY,IAARZ,CAAa;AAAEa,YAAI,EAAE,OAAR;AAAiBC,cAAM,EAAET;AAAzB,OAAbL;AARkB;;AAapB,QACEgB,cAAc,KAAKX,iBAAnBW,IACA,EAAEf,UAAU,GAAGA,UAAU,CAACgB,SAAXhB,EAAH,GAA4B,IAAxC,CAFF,EAGE;AACA;AACD;;AAED,QAAIe,cAAc,KAAKD,SAAvB,EAAkC;AAEhC;AACD;;AAEDf,WAAO,CAACY,IAARZ,CAAa;AAAEa,UAAI,EAAE,MAAR;AAAgBC,YAAM,EAAEE;AAAxB,KAAbhB;AACAA,WAAO,CAACY,IAARZ,CAAa;AAAEa,UAAI,EAAE,OAAR;AAAiBC,YAAM,EAAET;AAAzB,KAAbL;AA1BF,KA2BG,CAACK,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CA3BHL;AA4BD","names":["React","NavigationContext","useFocusEvents","state","emitter","navigation","useContext","lastFocusedKeyRef","useRef","currentFocusedKey","routes","index","key","useEffect","addListener","current","emit","type","target","undefined","lastFocusedKey","isFocused"],"sources":["useFocusEvents.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  emitter: NavigationEventEmitter<EventMapCore<State>>;\n};\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents<State extends NavigationState>({\n  state,\n  emitter,\n}: Options<State>) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(\n    () =>\n      navigation?.addListener('focus', () => {\n        lastFocusedKeyRef.current = currentFocusedKey;\n        emitter.emit({ type: 'focus', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(\n    () =>\n      navigation?.addListener('blur', () => {\n        lastFocusedKeyRef.current = undefined;\n        emitter.emit({ type: 'blur', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({ type: 'blur', target: lastFocusedKey });\n    emitter.emit({ type: 'focus', target: currentFocusedKey });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n"]},"metadata":{},"sourceType":"module"}