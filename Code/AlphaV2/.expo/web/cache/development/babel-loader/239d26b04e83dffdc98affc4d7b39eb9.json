{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"enabled\", \"onValueChange\", \"selectedValue\", \"itemStyle\", \"mode\", \"prompt\", \"dropdownIconColor\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { forwardRef, useRef } from 'react';\nimport PickerItem from \"./PickerItem\";\n\nvar createElement = require('react-native-web').createElement || require('react-native-web').unstable_createElement;\n\nvar Select = forwardRef(function (props, forwardedRef) {\n  return createElement('select', props);\n});\nvar Picker = forwardRef(function (props, forwardedRef) {\n  var enabled = props.enabled,\n      onValueChange = props.onValueChange,\n      selectedValue = props.selectedValue,\n      itemStyle = props.itemStyle,\n      mode = props.mode,\n      prompt = props.prompt,\n      dropdownIconColor = props.dropdownIconColor,\n      other = _objectWithoutProperties(props, _excluded);\n\n  var hostRef = useRef(null);\n  var handleChange = React.useCallback(function (e) {\n    var _e$target = e.target,\n        selectedIndex = _e$target.selectedIndex,\n        value = _e$target.value;\n\n    if (onValueChange) {\n      onValueChange(value, selectedIndex);\n    }\n  }, [onValueChange]);\n  return React.createElement(Select, _extends({\n    disabled: enabled === false ? true : undefined,\n    onChange: handleChange,\n    ref: hostRef,\n    value: selectedValue\n  }, other));\n});\nPicker.Item = PickerItem;\nexport default Picker;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAOA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,UAAR,EAAoBC,MAApB,QAAiC,OAAjC;AAIA,OAAOC,UAAP;;AAmBA,IAAMC,aAAa,GACjBC,OAAO,CAAC,kBAAD,CAAPA,CAA4BD,aAA5BC,IACAA,OAAO,CAAC,kBAAD,CAAPA,CAA4BC,sBAF9B;;AAIA,IAAMC,MAAM,GAAGN,UAAU,CAAC,UAACO,KAAD,EAAaC,YAAb;AAAA,SACxBL,aAAa,CAAC,QAAD,EAAWI,KAAX,CADW;AAAA,CAAD,CAAzB;AAIA,IAAME,MAAmD,GAAGT,UAAU,CAGpE,UAACO,KAAD,EAAQC,YAAR,EAAyB;AACzB,MACEE,OADF,GASIH,KATJ,CACEG,OADF;AAAA,MAEEC,aAFF,GASIJ,KATJ,CAEEI,aAFF;AAAA,MAGEC,aAHF,GASIL,KATJ,CAGEK,aAHF;AAAA,MAIEC,SAJF,GASIN,KATJ,CAIEM,SAJF;AAAA,MAKEC,IALF,GASIP,KATJ,CAKEO,IALF;AAAA,MAMEC,MANF,GASIR,KATJ,CAMEQ,MANF;AAAA,MAOEC,iBAPF,GASIT,KATJ,CAOES,iBAPF;AAAA,MAQKC,KARL,4BASIV,KATJ;;AAWA,MAAMW,OAAO,GAAGjB,MAAM,CAAC,IAAD,CAAtB;AAEA,MAAMkB,YAAY,GAAGpB,KAAK,CAACqB,WAANrB,CAClBsB,WAAD,EAAe;AACb,oBAA+BA,CAAC,CAACC,MAAjC;AAAA,QAAOC,aAAP,aAAOA,aAAP;AAAA,QAAsBC,KAAtB,aAAsBA,KAAtB;;AACA,QAAIb,aAAJ,EAAmB;AACjBA,mBAAa,CAACa,KAAD,EAAQD,aAAR,CAAbZ;AACD;AALgB,KAOnB,CAACA,aAAD,CAPmBZ,CAArB;AAUA,SAEEA,oBAACO,MAAD;AACEmB,YAAQ,EAAEf,OAAO,KAAK,KAAZA,GAAoB,IAApBA,GAA2BgB,SADvC;AAEEC,YAAQ,EAAER,YAFZ;AAGES,OAAG,EAAEV,OAHP;AAIEM,SAAK,EAAEZ;AAJT,KAKMK,KALN,EAFF;AA3BoE,EAAtE;AAwCAR,MAAM,CAACoB,IAAPpB,GAAcP,UAAdO;AAEA,eAAeA,MAAf","names":["React","forwardRef","useRef","PickerItem","createElement","require","unstable_createElement","Select","props","forwardedRef","Picker","enabled","onValueChange","selectedValue","itemStyle","mode","prompt","dropdownIconColor","other","hostRef","handleChange","useCallback","e","target","selectedIndex","value","disabled","undefined","onChange","ref","Item"],"sources":["Picker.web.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * @flow\n *\n */\n\nimport * as React from 'react';\nimport {forwardRef, useRef} from 'react';\nimport type {ViewProps} from 'react-native-web/src/exports/View/types';\nimport type {GenericStyleProp} from 'react-native-web/src/types';\nimport type {TextStyle} from 'react-native-web/src/exports/Text/types';\nimport PickerItem from './PickerItem';\n\ntype PickerProps = {\n  ...ViewProps,\n  children?: typeof PickerItem | Array<typeof PickerItem>,\n  enabled?: boolean,\n  onValueChange?: (number | string, number) => void,\n  selectedValue?: number | string,\n  /**\n   * dropdownIconColor\n   * Not used for Web.\n   */\n  dropdownIconColor?: string,\n  /* compat */\n  itemStyle?: GenericStyleProp<TextStyle>,\n  mode?: string,\n  prompt?: string,\n};\n\nconst createElement =\n  require('react-native-web').createElement ||\n  require('react-native-web').unstable_createElement;\n\nconst Select = forwardRef((props: any, forwardedRef) =>\n  createElement('select', props),\n);\n\nconst Picker: React$AbstractComponent<PickerProps, empty> = forwardRef<\n  PickerProps,\n  *,\n>((props, forwardedRef) => {\n  const {\n    enabled,\n    onValueChange,\n    selectedValue,\n    itemStyle,\n    mode,\n    prompt,\n    dropdownIconColor,\n    ...other\n  } = props;\n\n  const hostRef = useRef(null);\n\n  const handleChange = React.useCallback<any>(\n    (e: Object) => {\n      const {selectedIndex, value} = e.target;\n      if (onValueChange) {\n        onValueChange(value, selectedIndex);\n      }\n    },\n    [onValueChange],\n  );\n\n  return (\n    // $FlowFixMe\n    <Select\n      disabled={enabled === false ? true : undefined}\n      onChange={handleChange}\n      ref={hostRef}\n      value={selectedValue}\n      {...other}\n    />\n  );\n});\n\n// $FlowFixMe\nPicker.Item = PickerItem;\n\nexport default Picker;\n"]},"metadata":{},"sourceType":"module"}