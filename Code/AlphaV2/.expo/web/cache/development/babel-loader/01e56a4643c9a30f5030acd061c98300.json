{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar gestures = {};\nexport function getHandler(tag) {\n  if (tag in gestures) return gestures[tag];\n  throw new Error(\"No handler for tag \".concat(tag));\n}\nexport function createGestureHandler(handlerTag, handler) {\n  if (handlerTag in gestures) {\n    throw new Error(\"Handler with tag \".concat(handlerTag, \" already exists\"));\n  }\n\n  gestures[handlerTag] = handler;\n  gestures[handlerTag].handlerTag = handlerTag;\n}\nexport function dropGestureHandler(handlerTag) {\n  getHandler(handlerTag).destroy();\n  delete gestures[handlerTag];\n}\nexport function getNodes() {\n  return _objectSpread({}, gestures);\n}","map":{"version":3,"mappings":";;;;;;AAGA,IAAMA,QAAgE,GAAG,EAAzE;AAEA,OAAO,SAASC,UAAT,CAAoBC,GAApB,EAAiC;AACtC,MAAIA,GAAG,IAAIF,QAAX,EAAqB,OAAOA,QAAQ,CAACE,GAAD,CAAf;AAErB,QAAM,IAAIC,KAAJ,8BAAgCD,GAAhC,EAAN;AACD;AAED,OAAO,SAASE,oBAAT,CACLC,UADK,EAELC,OAFK,EAGL;AACA,MAAID,UAAU,IAAIL,QAAlB,EAA4B;AAC1B,UAAM,IAAIG,KAAJ,4BAA8BE,UAA9B,qBAAN;AACD;;AACDL,UAAQ,CAACK,UAAD,CAARL,GAAuBM,OAAvBN;AAEAA,UAAQ,CAACK,UAAD,CAARL,CAAqBK,UAArBL,GAAkCK,UAAlCL;AACD;AAED,OAAO,SAASO,kBAAT,CAA4BF,UAA5B,EAAgD;AACrDJ,YAAU,CAACI,UAAD,CAAVJ,CAAuBO,OAAvBP;AAEA,SAAOD,QAAQ,CAACK,UAAD,CAAf;AACD;AAED,OAAO,SAASI,QAAT,GAAoB;AACzB,2BAAYT,QAAZ;AACD","names":["gestures","getHandler","tag","Error","createGestureHandler","handlerTag","handler","dropGestureHandler","destroy","getNodes"],"sources":["NodeManager.ts"],"sourcesContent":["import { ValueOf } from '../typeUtils';\nimport { Gestures } from '../RNGestureHandlerModule.web';\n\nconst gestures: Record<number, InstanceType<ValueOf<typeof Gestures>>> = {};\n\nexport function getHandler(tag: number) {\n  if (tag in gestures) return gestures[tag];\n\n  throw new Error(`No handler for tag ${tag}`);\n}\n\nexport function createGestureHandler(\n  handlerTag: number,\n  handler: InstanceType<ValueOf<typeof Gestures>>\n) {\n  if (handlerTag in gestures) {\n    throw new Error(`Handler with tag ${handlerTag} already exists`);\n  }\n  gestures[handlerTag] = handler;\n  // @ts-ignore no types for web handlers yet\n  gestures[handlerTag].handlerTag = handlerTag;\n}\n\nexport function dropGestureHandler(handlerTag: number) {\n  getHandler(handlerTag).destroy();\n  // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n  delete gestures[handlerTag];\n}\n\nexport function getNodes() {\n  return { ...gestures };\n}\n"]},"metadata":{},"sourceType":"module"}