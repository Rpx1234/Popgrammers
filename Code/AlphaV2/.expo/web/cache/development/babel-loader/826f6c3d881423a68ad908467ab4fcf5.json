{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler } from \"../handlers/gestureHandlers\";\nimport { State } from \"../State\";\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\n\nvar DrawerLayout = function (_Component) {\n  _inherits(DrawerLayout, _Component);\n\n  var _super = _createSuper(DrawerLayout);\n\n  function DrawerLayout(_props) {\n    var _this;\n\n    _classCallCheck(this, DrawerLayout);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"openValue\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onGestureEvent\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"accessibilityIsModalView\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"pointerEventsView\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"panGestureHandler\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerShown\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"updateAnimatedEvent\", function (props, state) {\n      var drawerPosition = props.drawerPosition,\n          drawerWidth = props.drawerWidth,\n          drawerType = props.drawerType;\n      var dragXValue = state.dragX,\n          touchXValue = state.touchX,\n          drawerTranslation = state.drawerTranslation,\n          containerWidth = state.containerWidth;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n\n      if (drawerPosition !== 'left') {\n        dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n        touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue));\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n\n      var translationX = dragX;\n\n      if (drawerType === 'front') {\n        var startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n\n      _this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      var gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n\n      if (_this.props.onDrawerSlide) {\n        gestureOptions.listener = function (ev) {\n          var _this$props$onDrawerS, _this$props;\n\n          var translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          var position = translationX / _this.state.containerWidth;\n          (_this$props$onDrawerS = (_this$props = _this.props).onDrawerSlide) === null || _this$props$onDrawerS === void 0 ? void 0 : _this$props$onDrawerS.call(_this$props, position);\n        };\n      }\n\n      _this.onGestureEvent = Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleContainerLayout\", function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      _this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"emitStateChanged\", function (newState, drawerWillShow) {\n      var _this$props$onDrawerS2, _this$props2;\n\n      (_this$props$onDrawerS2 = (_this$props2 = _this.props).onDrawerStateChanged) === null || _this$props$onDrawerS2 === void 0 ? void 0 : _this$props$onDrawerS2.call(_this$props2, newState, drawerWillShow);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openingHandlerStateChange\", function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.handleRelease({\n          nativeEvent: nativeEvent\n        });\n      } else if (nativeEvent.state === State.ACTIVE) {\n        _this.emitStateChanged(DRAGGING, false);\n\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        if (_this.props.hideStatusBar) {\n          StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTapHandlerStateChange\", function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n\n      if (_this.drawerShown && nativeEvent.oldState === State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n        _this.closeDrawer();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRelease\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props6 = _this.props,\n          drawerWidth = _this$props6.drawerWidth,\n          drawerPosition = _this$props6.drawerPosition,\n          drawerType = _this$props6.drawerType;\n      var containerWidth = _this.state.containerWidth;\n      var dragX = nativeEvent.translationX,\n          velocityX = nativeEvent.velocityX,\n          touchX = nativeEvent.x;\n\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (_this.drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n\n      if (shouldOpen) {\n        _this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        _this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateShowing\", function (showing) {\n      var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n\n      _this.drawerShown = showing;\n      (_this$accessibilityIs = _this.accessibilityIsModalView.current) === null || _this$accessibilityIs === void 0 ? void 0 : _this$accessibilityIs.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      (_this$pointerEventsVi = _this.pointerEventsView.current) === null || _this$pointerEventsVi === void 0 ? void 0 : _this$pointerEventsVi.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var _this$props7 = _this.props,\n          drawerPosition = _this$props7.drawerPosition,\n          minSwipeDistance = _this$props7.minSwipeDistance,\n          edgeWidth = _this$props7.edgeWidth;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (_this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      (_this$panGestureHandl = _this.panGestureHandler.current) === null || _this$panGestureHandl === void 0 ? void 0 : _this$panGestureHandl.setNativeProps({\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"animateDrawer\", function (fromValue, toValue, velocity, speed) {\n      _this.state.dragX.setValue(0);\n\n      _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n\n      if (fromValue != null) {\n        var nextFramePosition = fromValue;\n\n        if (_this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n\n        _this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n\n      var willShow = toValue !== 0;\n\n      _this.updateShowing(willShow);\n\n      _this.emitStateChanged(SETTLING, willShow);\n\n      if (_this.props.hideStatusBar) {\n        StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n      }\n\n      Animated.spring(_this.state.drawerTranslation, {\n        velocity: velocity,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations,\n        speed: speed !== null && speed !== void 0 ? speed : undefined\n      }).start(function (_ref5) {\n        var finished = _ref5.finished;\n\n        if (finished) {\n          _this.emitStateChanged(IDLE, willShow);\n\n          if (willShow) {\n            var _this$props$onDrawerO, _this$props3;\n\n            (_this$props$onDrawerO = (_this$props3 = _this.props).onDrawerOpen) === null || _this$props$onDrawerO === void 0 ? void 0 : _this$props$onDrawerO.call(_this$props3);\n          } else {\n            var _this$props$onDrawerC, _this$props4;\n\n            (_this$props$onDrawerC = (_this$props4 = _this.props).onDrawerClose) === null || _this$props$onDrawerC === void 0 ? void 0 : _this$props$onDrawerC.call(_this$props4);\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this.animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0);\n\n      _this.forceUpdate();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n      _this.forceUpdate();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderOverlay\", function () {\n      invariant(_this.openValue, 'should be set');\n\n      var overlayOpacity = _this.openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: _this.props.overlayColor\n      };\n      return React.createElement(TapGestureHandler, {\n        onHandlerStateChange: _this.onTapHandlerStateChange\n      }, React.createElement(Animated.View, {\n        pointerEvents: _this.drawerShown ? 'auto' : 'none',\n        ref: _this.pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles]\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderDrawer\", function () {\n      var _this$props8 = _this.props,\n          drawerBackgroundColor = _this$props8.drawerBackgroundColor,\n          drawerWidth = _this$props8.drawerWidth,\n          drawerPosition = _this$props8.drawerPosition,\n          drawerType = _this$props8.drawerType,\n          drawerContainerStyle = _this$props8.drawerContainerStyle,\n          contentContainerStyle = _this$props8.contentContainerStyle;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n      var reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = _this.openValue;\n      invariant(openValue, 'should be set');\n      var containerStyles;\n\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n\n      var drawerTranslateX = 0;\n\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp'\n        });\n      }\n\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return React.createElement(Animated.View, {\n        style: styles.main,\n        onLayout: _this.handleContainerLayout\n      }, React.createElement(Animated.View, {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        importantForAccessibility: _this.drawerShown ? 'no-hide-descendants' : 'yes'\n      }, typeof _this.props.children === 'function' ? _this.props.children(_this.openValue) : _this.props.children, _this.renderOverlay()), React.createElement(Animated.View, {\n        pointerEvents: \"box-none\",\n        ref: _this.accessibilityIsModalView,\n        accessibilityViewIsModal: _this.drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle]\n      }, React.createElement(View, {\n        style: dynamicDrawerStyles\n      }, _this.props.renderNavigationView(_this.openValue))));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPanGestureRef\", function (ref) {\n      var _this$props$onGesture, _this$props5;\n\n      _this.panGestureHandler.current = ref;\n      (_this$props$onGesture = (_this$props5 = _this.props).onGestureRef) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props5, ref);\n    });\n\n    var _dragX = new Animated.Value(0);\n\n    var _touchX = new Animated.Value(0);\n\n    var _drawerTranslation = new Animated.Value(0);\n\n    _this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0\n    };\n\n    _this.updateAnimatedEvent(_props, _this.state);\n\n    return _this;\n  }\n\n  _createClass(DrawerLayout, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props9 = this.props,\n          drawerPosition = _this$props9.drawerPosition,\n          drawerLockMode = _this$props9.drawerLockMode,\n          edgeWidth = _this$props9.edgeWidth,\n          minSwipeDistance = _this$props9.minSwipeDistance;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return React.createElement(PanGestureHandler, {\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n      }, this.renderDrawer());\n    }\n  }]);\n\n  return DrawerLayout;\n}(Component);\n\nexport { DrawerLayout as default };\n\n_defineProperty(DrawerLayout, \"defaultProps\", {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked',\n  enableTrackpadTwoFingerGesture: false\n});\n\n_defineProperty(DrawerLayout, \"positions\", {\n  Left: 'left',\n  Right: 'right'\n});\n\nvar styles = StyleSheet.create({\n  drawerContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1002\n  }),\n  containerOnBack: _objectSpread({}, StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"mappings":"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","names":["React","Component","invariant","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","constructor","props","_defineProperty","createRef","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","setState","layout","width","newState","drawerWillShow","onDrawerStateChanged","oldState","ACTIVE","handleRelease","emitStateChanged","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","drawerShown","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","showing","accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","pointerEventsView","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","panGestureHandler","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","updateShowing","spring","bounciness","start","finished","onDrawerOpen","onDrawerClose","options","forceUpdate","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","onHandlerStateChange","onTapHandlerStateChange","View","ref","style","styles","overlay","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","handleContainerLayout","containerOnBack","containerInFront","importantForAccessibility","children","renderOverlay","drawerContainer","renderNavigationView","onGestureRef","updateAnimatedEvent","UNSAFE_componentWillUpdate","render","setPanGestureRef","failOffsetY","openingHandlerStateChange","enableTrackpadTwoFingerGesture","enabled","renderDrawer","Left","Right","StyleSheet","create","absoluteFillObject","zIndex","flex","overflow"],"sources":["DrawerLayout.tsx"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies\n// on react-native-gesture-handler library which isn't very popular at the\n// moment I decided to keep it here for the time being. It will allow us\n// to move faster and fix issues that may arise in gesture handler library\n// that could be found when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n  TapGestureHandler,\n  HandlerStateChangeEvent,\n  TapGestureHandlerEventPayload,\n} from '../handlers/gestureHandlers';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\nexport type DrawerPosition = 'left' | 'right';\n\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\nexport type DrawerType = 'front' | 'back' | 'slide';\n\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\nexport interface DrawerLayoutProps {\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n  drawerPosition?: DrawerPosition;\n  drawerWidth?: number;\n  drawerBackgroundColor?: string;\n  drawerLockMode?: DrawerLockMode;\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n  onDrawerClose?: () => void;\n  onDrawerOpen?: () => void;\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n  edgeWidth?: number;\n  minSwipeDistance?: number;\n  hideStatusBar?: boolean;\n  statusBarAnimation?: StatusBarAnimation;\n  overlayColor?: string;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n  enableTrackpadTwoFingerGesture?: boolean;\n  onDrawerSlide?: (position: number) => void;\n  onGestureRef?: (ref: PanGestureHandler) => void;\n}\n\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n};\n\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  UNSAFE_componentWillUpdate(\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  private openValue?: Animated.AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView = React.createRef<View>();\n  private pointerEventsView = React.createRef<View>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer.\n      // In order to handle right-side drawer the only thing we need to\n      // do is to reverse events coming from gesture handler in a way they\n      // emulate left-side drawer gestures. E.g. dragX is simply -dragX, and\n      // touchX is calulcated by subtracing real touchX from the width of the\n      // container (such that when touch happens at the right edge the value\n      // is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the dragX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the animation\n        // because it takes one frame of a roundtrip to pass RELEASE event from\n        // native driver to JS before we can start animating. Without it, it is more\n        // noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    const overlayOpacity = this.openValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right according\n    // to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | Animated.AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      drawerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [closedDrawerOffset, 0],\n        extrapolate: 'clamp',\n      });\n    }\n    const drawerStyles: {\n      transform: { translateX: number | Animated.AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK\n    // taken from https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (this\n      .panGestureHandler as React.MutableRefObject<PanGestureHandler>).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}