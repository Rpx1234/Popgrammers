{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"rippleColor\"],\n    _excluded2 = [\"children\", \"style\"],\n    _excluded3 = [\"children\", \"style\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport createNativeWrapper from \"../handlers/createNativeWrapper\";\nimport GestureHandlerButton from \"./GestureHandlerButton\";\nimport { State } from \"../State\";\nexport var RawButton = createNativeWrapper(GestureHandlerButton, {\n  shouldCancelWhenOutside: false,\n  shouldActivateOnStart: false\n});\nexport var BaseButton = function (_React$Component) {\n  _inherits(BaseButton, _React$Component);\n\n  var _super = _createSuper(BaseButton);\n\n  function BaseButton(props) {\n    var _this;\n\n    _classCallCheck(this, BaseButton);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastActive\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEvent\", function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      var state = nativeEvent.state,\n          oldState = nativeEvent.oldState,\n          pointerInside = nativeEvent.pointerInside;\n      var active = pointerInside && state === State.ACTIVE;\n\n      if (active !== _this.lastActive && _this.props.onActiveStateChange) {\n        _this.props.onActiveStateChange(active);\n      }\n\n      if (oldState === State.ACTIVE && state !== State.CANCELLED && _this.lastActive && _this.props.onPress) {\n        _this.props.onPress(active);\n      }\n\n      _this.lastActive = active;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandlerStateChange\", function (e) {\n      var _this$props$onHandler, _this$props;\n\n      (_this$props$onHandler = (_this$props = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props, e);\n\n      _this.handleEvent(e);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onGestureEvent\", function (e) {\n      var _this$props$onGesture, _this$props2;\n\n      (_this$props$onGesture = (_this$props2 = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props2, e);\n\n      _this.handleEvent(e);\n    });\n\n    _this.lastActive = false;\n    return _this;\n  }\n\n  _createClass(BaseButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          rippleColor = _this$props5.rippleColor,\n          rest = _objectWithoutProperties(_this$props5, _excluded);\n\n      return React.createElement(RawButton, _extends({\n        rippleColor: processColor(rippleColor)\n      }, rest, {\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.onHandlerStateChange\n      }));\n    }\n  }]);\n\n  return BaseButton;\n}(React.Component);\nvar AnimatedBaseButton = Animated.createAnimatedComponent(BaseButton);\nvar btnStyles = StyleSheet.create({\n  underlay: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    top: 0\n  }\n});\nexport var RectButton = function (_React$Component2) {\n  _inherits(RectButton, _React$Component2);\n\n  var _super2 = _createSuper(RectButton);\n\n  function RectButton(props) {\n    var _this2;\n\n    _classCallCheck(this, RectButton);\n\n    _this2 = _super2.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this2), \"opacity\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this2), \"onActiveStateChange\", function (active) {\n      var _this$props$onActiveS, _this$props3;\n\n      if (Platform.OS !== 'android') {\n        _this2.opacity.setValue(active ? _this2.props.activeOpacity : 0);\n      }\n\n      (_this$props$onActiveS = (_this$props3 = _this2.props).onActiveStateChange) === null || _this$props$onActiveS === void 0 ? void 0 : _this$props$onActiveS.call(_this$props3, active);\n    });\n\n    _this2.opacity = new Animated.Value(0);\n    return _this2;\n  }\n\n  _createClass(RectButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          children = _this$props6.children,\n          style = _this$props6.style,\n          rest = _objectWithoutProperties(_this$props6, _excluded2);\n\n      var resolvedStyle = StyleSheet.flatten(style !== null && style !== void 0 ? style : {});\n      return React.createElement(BaseButton, _extends({}, rest, {\n        style: resolvedStyle,\n        onActiveStateChange: this.onActiveStateChange\n      }), React.createElement(Animated.View, {\n        style: [btnStyles.underlay, {\n          opacity: this.opacity,\n          backgroundColor: this.props.underlayColor,\n          borderRadius: resolvedStyle.borderRadius,\n          borderTopLeftRadius: resolvedStyle.borderTopLeftRadius,\n          borderTopRightRadius: resolvedStyle.borderTopRightRadius,\n          borderBottomLeftRadius: resolvedStyle.borderBottomLeftRadius,\n          borderBottomRightRadius: resolvedStyle.borderBottomRightRadius\n        }]\n      }), children);\n    }\n  }]);\n\n  return RectButton;\n}(React.Component);\n\n_defineProperty(RectButton, \"defaultProps\", {\n  activeOpacity: 0.105,\n  underlayColor: 'black'\n});\n\nexport var BorderlessButton = function (_React$Component3) {\n  _inherits(BorderlessButton, _React$Component3);\n\n  var _super3 = _createSuper(BorderlessButton);\n\n  function BorderlessButton(props) {\n    var _this3;\n\n    _classCallCheck(this, BorderlessButton);\n\n    _this3 = _super3.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this3), \"opacity\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this3), \"onActiveStateChange\", function (active) {\n      var _this$props$onActiveS2, _this$props4;\n\n      if (Platform.OS !== 'android') {\n        _this3.opacity.setValue(active ? _this3.props.activeOpacity : 1);\n      }\n\n      (_this$props$onActiveS2 = (_this$props4 = _this3.props).onActiveStateChange) === null || _this$props$onActiveS2 === void 0 ? void 0 : _this$props$onActiveS2.call(_this$props4, active);\n    });\n\n    _this3.opacity = new Animated.Value(1);\n    return _this3;\n  }\n\n  _createClass(BorderlessButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props7 = this.props,\n          children = _this$props7.children,\n          style = _this$props7.style,\n          rest = _objectWithoutProperties(_this$props7, _excluded3);\n\n      return React.createElement(AnimatedBaseButton, _extends({}, rest, {\n        onActiveStateChange: this.onActiveStateChange,\n        style: [style, Platform.OS === 'ios' && {\n          opacity: this.opacity\n        }]\n      }), children);\n    }\n  }]);\n\n  return BorderlessButton;\n}(React.Component);\n\n_defineProperty(BorderlessButton, \"defaultProps\", {\n  activeOpacity: 0.3,\n  borderless: true\n});\n\nexport { default as PureNativeButton } from \"./GestureHandlerButton\";","map":{"version":3,"mappings":"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","names":["React","createNativeWrapper","GestureHandlerButton","State","RawButton","shouldCancelWhenOutside","shouldActivateOnStart","BaseButton","constructor","props","_defineProperty","nativeEvent","state","oldState","pointerInside","active","ACTIVE","lastActive","onActiveStateChange","CANCELLED","onPress","e","onHandlerStateChange","handleEvent","onGestureEvent","render","rippleColor","rest","processColor","Component","AnimatedBaseButton","Animated","createAnimatedComponent","btnStyles","StyleSheet","create","underlay","position","left","right","bottom","top","RectButton","Platform","OS","opacity","setValue","activeOpacity","Value","children","style","resolvedStyle","flatten","View","backgroundColor","underlayColor","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","BorderlessButton","borderless","default","PureNativeButton"],"sources":["GestureButtons.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  processColor,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport createNativeWrapper from '../handlers/createNativeWrapper';\nimport GestureHandlerButton from './GestureHandlerButton';\nimport { State } from '../State';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlers';\nimport {\n  NativeViewGestureHandlerPayload,\n  NativeViewGestureHandlerProps,\n} from '../handlers/NativeViewGestureHandler';\n\nexport interface RawButtonProps extends NativeViewGestureHandlerProps {\n  exclusive?: boolean;\n  // TODO: we should transform props in `createNativeWrapper`\n  rippleColor?: any; // it was present in BaseButtonProps before but is used here in code\n}\n\nexport interface BaseButtonProps extends RawButtonProps {\n  onPress?: (pointerInside: boolean) => void;\n  onActiveStateChange?: (active: boolean) => void;\n  style?: StyleProp<ViewStyle>;\n  testID?: string;\n}\n\nexport interface RectButtonProps extends BaseButtonProps {\n  underlayColor?: string;\n  activeOpacity?: number;\n}\n\nexport interface BorderlessButtonProps extends BaseButtonProps {\n  borderless?: boolean;\n  activeOpacity?: number;\n}\n\nexport const RawButton = createNativeWrapper(GestureHandlerButton, {\n  shouldCancelWhenOutside: false,\n  shouldActivateOnStart: false,\n});\n\nexport class BaseButton extends React.Component<BaseButtonProps> {\n  private lastActive: boolean;\n\n  constructor(props: BaseButtonProps) {\n    super(props);\n    this.lastActive = false;\n  }\n\n  private handleEvent = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>) => {\n    const { state, oldState, pointerInside } = nativeEvent;\n    const active = pointerInside && state === State.ACTIVE;\n\n    if (active !== this.lastActive && this.props.onActiveStateChange) {\n      this.props.onActiveStateChange(active);\n    }\n\n    if (\n      oldState === State.ACTIVE &&\n      state !== State.CANCELLED &&\n      this.lastActive &&\n      this.props.onPress\n    ) {\n      this.props.onPress(active);\n    }\n\n    this.lastActive = active;\n  };\n\n  // Normally, the parent would execute it's handler first,\n  // then forward the event to listeners. However, here our handler\n  // is virtually only forwarding events to listeners, so we reverse the order\n  // to keep the proper order of the callbacks (from \"raw\" ones to \"processed\").\n  private onHandlerStateChange = (\n    e: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>\n  ) => {\n    this.props.onHandlerStateChange?.(e);\n    this.handleEvent(e);\n  };\n\n  private onGestureEvent = (\n    e: GestureEvent<NativeViewGestureHandlerPayload>\n  ) => {\n    this.props.onGestureEvent?.(e);\n    this.handleEvent(\n      e as HandlerStateChangeEvent<NativeViewGestureHandlerPayload>\n    ); // TODO: maybe it is not correct\n  };\n\n  render() {\n    const { rippleColor, ...rest } = this.props;\n\n    return (\n      <RawButton\n        rippleColor={processColor(rippleColor)}\n        {...rest}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}\n      />\n    );\n  }\n}\n\nconst AnimatedBaseButton = Animated.createAnimatedComponent(BaseButton);\n\nconst btnStyles = StyleSheet.create({\n  underlay: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    top: 0,\n  },\n});\n\nexport class RectButton extends React.Component<RectButtonProps> {\n  static defaultProps = {\n    activeOpacity: 0.105,\n    underlayColor: 'black',\n  };\n\n  private opacity: Animated.Value;\n\n  constructor(props: RectButtonProps) {\n    super(props);\n    this.opacity = new Animated.Value(0);\n  }\n\n  private onActiveStateChange = (active: boolean) => {\n    if (Platform.OS !== 'android') {\n      this.opacity.setValue(active ? this.props.activeOpacity! : 0);\n    }\n\n    this.props.onActiveStateChange?.(active);\n  };\n\n  render() {\n    const { children, style, ...rest } = this.props;\n\n    const resolvedStyle = StyleSheet.flatten(style ?? {});\n\n    return (\n      <BaseButton\n        {...rest}\n        style={resolvedStyle}\n        onActiveStateChange={this.onActiveStateChange}>\n        <Animated.View\n          style={[\n            btnStyles.underlay,\n            {\n              opacity: this.opacity,\n              backgroundColor: this.props.underlayColor,\n              borderRadius: resolvedStyle.borderRadius,\n              borderTopLeftRadius: resolvedStyle.borderTopLeftRadius,\n              borderTopRightRadius: resolvedStyle.borderTopRightRadius,\n              borderBottomLeftRadius: resolvedStyle.borderBottomLeftRadius,\n              borderBottomRightRadius: resolvedStyle.borderBottomRightRadius,\n            },\n          ]}\n        />\n        {children}\n      </BaseButton>\n    );\n  }\n}\n\nexport class BorderlessButton extends React.Component<BorderlessButtonProps> {\n  static defaultProps = {\n    activeOpacity: 0.3,\n    borderless: true,\n  };\n\n  private opacity: Animated.Value;\n\n  constructor(props: BorderlessButtonProps) {\n    super(props);\n    this.opacity = new Animated.Value(1);\n  }\n\n  private onActiveStateChange = (active: boolean) => {\n    if (Platform.OS !== 'android') {\n      this.opacity.setValue(active ? this.props.activeOpacity! : 1);\n    }\n\n    this.props.onActiveStateChange?.(active);\n  };\n\n  render() {\n    const { children, style, ...rest } = this.props;\n\n    return (\n      <AnimatedBaseButton\n        {...rest}\n        onActiveStateChange={this.onActiveStateChange}\n        style={[style, Platform.OS === 'ios' && { opacity: this.opacity }]}>\n        {children}\n      </AnimatedBaseButton>\n    );\n  }\n}\n\nexport { default as PureNativeButton } from './GestureHandlerButton';\n"]},"metadata":{},"sourceType":"module"}