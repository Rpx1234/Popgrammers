{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { AuthStack } from \"./AuthStack\";\nimport { AppStack } from \"./AppStack\";\nimport { AuthenticatedUserContext } from \"../providers\";\nimport { LoadingIndicator } from \"../components\";\nimport { auth } from \"../config\";\nexport var RootNavigator = function RootNavigator() {\n  var _useContext = useContext(AuthenticatedUserContext),\n      user = _useContext.user,\n      setUser = _useContext.setUser;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  useEffect(function () {\n    var unsubscribeAuthStateChanged = onAuthStateChanged(auth, function (authenticatedUser) {\n      authenticatedUser ? setUser(authenticatedUser) : setUser(null);\n      setIsLoading(false);\n    });\n    return unsubscribeAuthStateChanged;\n  }, [user]);\n\n  if (isLoading) {\n    return React.createElement(LoadingIndicator, null);\n  }\n\n  return React.createElement(NavigationContainer, null, user ? React.createElement(AppStack, null) : React.createElement(AuthStack, null));\n};","map":{"version":3,"sources":["C:/Users/Owner/Downloads/Popgrammers/Code/AlphaV2/navigation/RootNavigator.js"],"names":["React","useState","useContext","useEffect","NavigationContainer","onAuthStateChanged","AuthStack","AppStack","AuthenticatedUserContext","LoadingIndicator","auth","RootNavigator","user","setUser","isLoading","setIsLoading","unsubscribeAuthStateChanged","authenticatedUser"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,kBAAT,QAAmC,eAAnC;AAEA,SAASC,SAAT;AACA,SAASC,QAAT;AACA,SAASC,wBAAT;AACA,SAASC,gBAAT;AACA,SAASC,IAAT;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC,oBAA0BT,UAAU,CAACM,wBAAD,CAApC;AAAA,MAAQI,IAAR,eAAQA,IAAR;AAAA,MAAcC,OAAd,eAAcA,OAAd;;AACA,kBAAkCZ,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOa,SAAP;AAAA,MAAkBC,YAAlB;;AAEAZ,EAAAA,SAAS,CAAC,YAAM;AAEd,QAAMa,2BAA2B,GAAGX,kBAAkB,CACpDK,IADoD,EAEpD,UAAAO,iBAAiB,EAAI;AACnBA,MAAAA,iBAAiB,GAAGJ,OAAO,CAACI,iBAAD,CAAV,GAAgCJ,OAAO,CAAC,IAAD,CAAxD;AACAE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KALmD,CAAtD;AASA,WAAOC,2BAAP;AACD,GAZQ,EAYN,CAACJ,IAAD,CAZM,CAAT;;AAcA,MAAIE,SAAJ,EAAe;AACb,WAAO,oBAAC,gBAAD,OAAP;AACD;;AAED,SACE,oBAAC,mBAAD,QACGF,IAAI,GAAG,oBAAC,QAAD,OAAH,GAAkB,oBAAC,SAAD,OADzB,CADF;AAKD,CA3BM","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { onAuthStateChanged } from 'firebase/auth';\n\nimport { AuthStack } from './AuthStack';\nimport { AppStack } from './AppStack';\nimport { AuthenticatedUserContext } from '../providers';\nimport { LoadingIndicator } from '../components';\nimport { auth } from '../config';\n\nexport const RootNavigator = () => {\n  const { user, setUser } = useContext(AuthenticatedUserContext);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // onAuthStateChanged returns an unsubscriber\n    const unsubscribeAuthStateChanged = onAuthStateChanged(\n      auth,\n      authenticatedUser => {\n        authenticatedUser ? setUser(authenticatedUser) : setUser(null);\n        setIsLoading(false);\n      }\n    );\n\n    // unsubscribe auth listener on unmount\n    return unsubscribeAuthStateChanged;\n  }, [user]);\n\n  if (isLoading) {\n    return <LoadingIndicator />;\n  }\n\n  return (\n    <NavigationContainer>\n      {user ? <AppStack /> : <AuthStack />}\n    </NavigationContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}