{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler } from \"../handlers/gestureHandlers\";\nimport { State } from \"../State\";\nvar DRAG_TOSS = 0.05;\n\nvar Swipeable = function (_Component) {\n  _inherits(Swipeable, _Component);\n\n  var _super = _createSuper(Swipeable);\n\n  function Swipeable(_props) {\n    var _this;\n\n    _classCallCheck(this, Swipeable);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onGestureEvent\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"transX\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"showLeftAction\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"leftActionTranslate\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"showRightAction\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"rightActionTranslate\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"updateAnimatedEvent\", function (props, state) {\n      var friction = props.friction,\n          overshootFriction = props.overshootFriction;\n      var dragX = state.dragX,\n          rowTranslation = state.rowTranslation,\n          _state$leftWidth = state.leftWidth,\n          leftWidth = _state$leftWidth === void 0 ? 0 : _state$leftWidth,\n          _state$rowWidth = state.rowWidth,\n          rowWidth = _state$rowWidth === void 0 ? 0 : _state$rowWidth;\n      var _state$rightOffset = state.rightOffset,\n          rightOffset = _state$rightOffset === void 0 ? rowWidth : _state$rightOffset;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var _props$overshootLeft = props.overshootLeft,\n          overshootLeft = _props$overshootLeft === void 0 ? leftWidth > 0 : _props$overshootLeft,\n          _props$overshootRight = props.overshootRight,\n          overshootRight = _props$overshootRight === void 0 ? rightWidth > 0 : _props$overshootRight;\n      var transX = Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - (overshootRight ? 1 : overshootFriction), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : overshootFriction)],\n        outputRange: [-rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)]\n      });\n      _this.transX = transX;\n      _this.showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new Animated.Value(0);\n      _this.leftActionTranslate = _this.showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      _this.showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new Animated.Value(0);\n      _this.rightActionTranslate = _this.showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTapHandlerStateChange\", function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.close();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandlerStateChange\", function (ev) {\n      if (ev.nativeEvent.oldState === State.ACTIVE) {\n        _this.handleRelease(ev);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRelease\", function (ev) {\n      var _ev$nativeEvent = ev.nativeEvent,\n          velocityX = _ev$nativeEvent.velocityX,\n          dragX = _ev$nativeEvent.translationX;\n      var _this$state = _this.state,\n          _this$state$leftWidth = _this$state.leftWidth,\n          leftWidth = _this$state$leftWidth === void 0 ? 0 : _this$state$leftWidth,\n          _this$state$rowWidth = _this$state.rowWidth,\n          rowWidth = _this$state$rowWidth === void 0 ? 0 : _this$state$rowWidth,\n          rowState = _this$state.rowState;\n      var _this$state$rightOffs = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs === void 0 ? rowWidth : _this$state$rightOffs;\n      var rightWidth = rowWidth - rightOffset;\n      var _this$props5 = _this.props,\n          friction = _this$props5.friction,\n          _this$props5$leftThre = _this$props5.leftThreshold,\n          leftThreshold = _this$props5$leftThre === void 0 ? leftWidth / 2 : _this$props5$leftThre,\n          _this$props5$rightThr = _this$props5.rightThreshold,\n          rightThreshold = _this$props5$rightThr === void 0 ? rightWidth / 2 : _this$props5$rightThr;\n      var startOffsetX = _this.currentOffset() + dragX / friction;\n      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      var toValue = 0;\n\n      if (rowState === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n\n      _this.animateRow(startOffsetX, toValue, velocityX / friction);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"animateRow\", function (fromValue, toValue, velocityX) {\n      var _this$state2 = _this.state,\n          dragX = _this$state2.dragX,\n          rowTranslation = _this$state2.rowTranslation;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n\n      _this.setState({\n        rowState: Math.sign(toValue)\n      });\n\n      Animated.spring(rowTranslation, _objectSpread({\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations\n      }, _this.props.animationOptions)).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        if (finished) {\n          if (toValue > 0 && _this.props.onSwipeableLeftOpen) {\n            _this.props.onSwipeableLeftOpen();\n          } else if (toValue < 0 && _this.props.onSwipeableRightOpen) {\n            _this.props.onSwipeableRightOpen();\n          }\n\n          if (toValue === 0) {\n            var _this$props$onSwipeab, _this$props;\n\n            (_this$props$onSwipeab = (_this$props = _this.props).onSwipeableClose) === null || _this$props$onSwipeab === void 0 ? void 0 : _this$props$onSwipeab.call(_this$props);\n          } else {\n            var _this$props$onSwipeab2, _this$props2;\n\n            (_this$props$onSwipeab2 = (_this$props2 = _this.props).onSwipeableOpen) === null || _this$props$onSwipeab2 === void 0 ? void 0 : _this$props$onSwipeab2.call(_this$props2);\n          }\n        }\n      });\n\n      if (toValue > 0 && _this.props.onSwipeableLeftWillOpen) {\n        _this.props.onSwipeableLeftWillOpen();\n      } else if (toValue < 0 && _this.props.onSwipeableRightWillOpen) {\n        _this.props.onSwipeableRightWillOpen();\n      }\n\n      if (toValue === 0) {\n        var _this$props$onSwipeab3, _this$props3;\n\n        (_this$props$onSwipeab3 = (_this$props3 = _this.props).onSwipeableWillClose) === null || _this$props$onSwipeab3 === void 0 ? void 0 : _this$props$onSwipeab3.call(_this$props3);\n      } else {\n        var _this$props$onSwipeab4, _this$props4;\n\n        (_this$props$onSwipeab4 = (_this$props4 = _this.props).onSwipeableWillOpen) === null || _this$props$onSwipeab4 === void 0 ? void 0 : _this$props$onSwipeab4.call(_this$props4);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRowLayout\", function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n\n      _this.setState({\n        rowWidth: nativeEvent.layout.width\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"currentOffset\", function () {\n      var _this$state3 = _this.state,\n          _this$state3$leftWidt = _this$state3.leftWidth,\n          leftWidth = _this$state3$leftWidt === void 0 ? 0 : _this$state3$leftWidt,\n          _this$state3$rowWidth = _this$state3.rowWidth,\n          rowWidth = _this$state3$rowWidth === void 0 ? 0 : _this$state3$rowWidth,\n          rowState = _this$state3.rowState;\n      var _this$state$rightOffs2 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs2 === void 0 ? rowWidth : _this$state$rightOffs2;\n      var rightWidth = rowWidth - rightOffset;\n\n      if (rowState === 1) {\n        return leftWidth;\n      } else if (rowState === -1) {\n        return -rightWidth;\n      }\n\n      return 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"close\", function () {\n      _this.animateRow(_this.currentOffset(), 0);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openLeft\", function () {\n      var _this$state$leftWidth2 = _this.state.leftWidth,\n          leftWidth = _this$state$leftWidth2 === void 0 ? 0 : _this$state$leftWidth2;\n\n      _this.animateRow(_this.currentOffset(), leftWidth);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openRight\", function () {\n      var _this$state$rowWidth2 = _this.state.rowWidth,\n          rowWidth = _this$state$rowWidth2 === void 0 ? 0 : _this$state$rowWidth2;\n      var _this$state$rightOffs3 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs3 === void 0 ? rowWidth : _this$state$rightOffs3;\n      var rightWidth = rowWidth - rightOffset;\n\n      _this.animateRow(_this.currentOffset(), -rightWidth);\n    });\n\n    var _dragX = new Animated.Value(0);\n\n    _this.state = {\n      dragX: _dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined\n    };\n\n    _this.updateAnimatedEvent(_props, _this.state);\n\n    _this.onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _dragX\n      }\n    }], {\n      useNativeDriver: _props.useNativeAnimations\n    });\n    return _this;\n  }\n\n  _createClass(Swipeable, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var rowState = this.state.rowState;\n      var _this$props6 = this.props,\n          children = _this$props6.children,\n          renderLeftActions = _this$props6.renderLeftActions,\n          renderRightActions = _this$props6.renderRightActions;\n      var left = renderLeftActions && React.createElement(Animated.View, {\n        style: [styles.leftActions, {\n          transform: [{\n            translateX: this.leftActionTranslate\n          }]\n        }]\n      }, renderLeftActions(this.showLeftAction, this.transX), React.createElement(View, {\n        onLayout: function onLayout(_ref4) {\n          var nativeEvent = _ref4.nativeEvent;\n          return _this2.setState({\n            leftWidth: nativeEvent.layout.x\n          });\n        }\n      }));\n      var right = renderRightActions && React.createElement(Animated.View, {\n        style: [styles.rightActions, {\n          transform: [{\n            translateX: this.rightActionTranslate\n          }]\n        }]\n      }, renderRightActions(this.showRightAction, this.transX), React.createElement(View, {\n        onLayout: function onLayout(_ref5) {\n          var nativeEvent = _ref5.nativeEvent;\n          return _this2.setState({\n            rightOffset: nativeEvent.layout.x\n          });\n        }\n      }));\n      return React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-10, 10]\n      }, this.props, {\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.onHandlerStateChange\n      }), React.createElement(Animated.View, {\n        onLayout: this.onRowLayout,\n        style: [styles.container, this.props.containerStyle]\n      }, left, right, React.createElement(TapGestureHandler, {\n        enabled: rowState !== 0,\n        onHandlerStateChange: this.onTapHandlerStateChange\n      }, React.createElement(Animated.View, {\n        pointerEvents: rowState === 0 ? 'auto' : 'box-only',\n        style: [{\n          transform: [{\n            translateX: this.transX\n          }]\n        }, this.props.childrenContainerStyle]\n      }, children))));\n    }\n  }]);\n\n  return Swipeable;\n}(Component);\n\nexport { Swipeable as default };\n\n_defineProperty(Swipeable, \"defaultProps\", {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: true\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;;;;;AAWA,SACEC,iBADF,EAEEC,iBAFF;AASA,SAASC,KAAT;AAEA,IAAMC,SAAS,GAAG,IAAlB;;IAmEqBC,S;;;;;AAUnBC,qBAAYC,MAAZD,EAAmC;AAAA;;AAAA;;AACjC,8BAAMC,MAAN;;AADiCC;;AAAAA;;AAAAA;;AAAAA;;AAAAA;;AAAAA;;AAAAA,0EA0CL,UAC5BD,KAD4B,EAE5BE,KAF4B,EAGzB;AACH,UAAQC,QAAR,GAAwCH,KAAxC,CAAQG,QAAR;AAAA,UAAkBC,iBAAlB,GAAwCJ,KAAxC,CAAkBI,iBAAlB;AACA,UAAQC,KAAR,GAA+DH,KAA/D,CAAQG,KAAR;AAAA,UAAeC,cAAf,GAA+DJ,KAA/D,CAAeI,cAAf;AAAA,6BAA+DJ,KAA/D,CAA+BK,SAA/B;AAAA,UAA+BA,SAA/B,iCAA2C,CAA3C;AAAA,4BAA+DL,KAA/D,CAA8CM,QAA9C;AAAA,UAA8CA,QAA9C,gCAAyD,CAAzD;AACA,+BAAmCN,KAAnC,CAAQO,WAAR;AAAA,UAAQA,WAAR,mCAAsBD,QAAtB;AACA,UAAME,UAAU,GAAGC,IAAI,CAACC,GAALD,CAAS,CAATA,EAAYH,QAAQ,GAAGC,WAAvBE,CAAnB;AAEA,iCAGIX,KAHJ,CACEa,aADF;AAAA,UACEA,aADF,qCACkBN,SAAS,GAAG,CAD9B;AAAA,kCAGIP,KAHJ,CAEEc,cAFF;AAAA,UAEEA,cAFF,sCAEmBJ,UAAU,GAAG,CAFhC;AAKA,UAAMK,MAAM,GAAGC,QAAQ,CAACC,GAATD,CACbV,cADaU,EAEbX,KAAK,CAACa,WAANb,CAAkB;AAChBc,kBAAU,EAAE,CAAC,CAAD,EAAIhB,QAAJ,CADI;AAEhBiB,mBAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFG,OAAlBf,CAFaW,EAMbE,WANaF,CAMD;AACZG,kBAAU,EAAE,CACV,CAACT,UAAD,IAAeI,cAAc,GAAG,CAAH,GAAOV,iBAApC,CADU,EAEV,CAACM,UAFS,EAGVH,SAHU,EAIVA,SAAS,IAAIM,aAAa,GAAG,CAAH,GAAOT,iBAAxB,CAJC,CADA;AAOZgB,mBAAW,EAAE,CACX,CAACV,UAAD,IAAeI,cAAc,IAAIV,iBAAiB,GAAI,CAAvCU,GAA2C,CAA3CA,GAA+C,CAA9D,CADW,EAEX,CAACJ,UAFU,EAGXH,SAHW,EAIXA,SAAS,IAAIM,aAAa,IAAIT,iBAAiB,GAAI,CAAtCS,GAA0C,CAA1CA,GAA8C,CAAlD,CAJE;AAPD,OANCG,CAAf;AAoBA,YAAKD,MAAL,GAAcA,MAAd;AACA,YAAKM,cAAL,GACEd,SAAS,GAAG,CAAZA,GACIQ,MAAM,CAACG,WAAPH,CAAmB;AACjBI,kBAAU,EAAE,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQZ,SAAR,CADK;AAEjBa,mBAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAFI,OAAnBL,CADJR,GAKI,IAAIS,QAAQ,CAACM,KAAb,CAAmB,CAAnB,CANN;AAOA,YAAKC,mBAAL,GAA2B,MAAKF,cAAL,CAAoBH,WAApB,CAAgC;AACzDC,kBAAU,EAAE,CAAC,CAAD,EAAIK,MAAM,CAACC,SAAX,CAD6C;AAEzDL,mBAAW,EAAE,CAAC,CAAC,KAAF,EAAS,CAAT,CAF4C;AAGzDM,mBAAW,EAAE;AAH4C,OAAhC,CAA3B;AAKA,YAAKC,eAAL,GACEjB,UAAU,GAAG,CAAbA,GACIK,MAAM,CAACG,WAAPH,CAAmB;AACjBI,kBAAU,EAAE,CAAC,CAACT,UAAF,EAAc,CAAd,EAAiB,CAAjB,CADK;AAEjBU,mBAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAFI,OAAnBL,CADJL,GAKI,IAAIM,QAAQ,CAACM,KAAb,CAAmB,CAAnB,CANN;AAOA,YAAKM,oBAAL,GAA4B,MAAKD,eAAL,CAAqBT,WAArB,CAAiC;AAC3DC,kBAAU,EAAE,CAAC,CAAD,EAAIK,MAAM,CAACC,SAAX,CAD+C;AAE3DL,mBAAW,EAAE,CAAC,CAAC,KAAF,EAAS,CAAT,CAF8C;AAG3DM,mBAAW,EAAE;AAH8C,OAAjC,CAA5B;AAhGiC;;AAAAzB,8EAuGD,gBAE4B;AAAA,UAD5D4B,WAC4D,QAD5DA,WAC4D;;AAC5D,UAAIA,WAAW,CAACC,QAAZD,KAAyBjC,KAAK,CAACmC,MAAnC,EAA2C;AACzC,cAAKC,KAAL;AACD;AA5GgC;;AAAA/B,2EAgHjCgC,YAD6B,EAE1B;AACH,UAAIA,EAAE,CAACJ,WAAHI,CAAeH,QAAfG,KAA4BrC,KAAK,CAACmC,MAAtC,EAA8C;AAC5C,cAAKG,aAAL,CAAmBD,EAAnB;AACD;AApHgC;;AAAAhC,oEAwHjCgC,YADsB,EAEnB;AACH,4BAA2CA,EAAE,CAACJ,WAA9C;AAAA,UAAQM,SAAR,mBAAQA,SAAR;AAAA,UAAiC9B,KAAjC,mBAAmB+B,YAAnB;AACA,wBAAkD,MAAKlC,KAAvD;AAAA,8CAAQK,SAAR;AAAA,UAAQA,SAAR,sCAAoB,CAApB;AAAA,6CAAuBC,QAAvB;AAAA,UAAuBA,QAAvB,qCAAkC,CAAlC;AAAA,UAAqC6B,QAArC,eAAqCA,QAArC;AACA,kCAAmC,MAAKnC,KAAxC,CAAQO,WAAR;AAAA,UAAQA,WAAR,sCAAsBD,QAAtB;AACA,UAAME,UAAU,GAAGF,QAAQ,GAAGC,WAA9B;AACA,yBAII,MAAKT,KAJT;AAAA,UACEG,QADF,gBACEA,QADF;AAAA,+CAEEmC,aAFF;AAAA,UAEEA,aAFF,sCAEkB/B,SAAS,GAAG,CAF9B;AAAA,+CAGEgC,cAHF;AAAA,UAGEA,cAHF,sCAGmB7B,UAAU,GAAG,CAHhC;AAMA,UAAM8B,YAAY,GAAG,MAAKC,aAAL,KAAuBpC,KAAK,GAAGF,QAApD;AACA,UAAMiC,YAAY,GAAG,CAAC/B,KAAK,GAAGR,SAAS,GAAGsC,SAArB,IAAkChC,QAAvD;AAEA,UAAIuC,OAAO,GAAG,CAAd;;AACA,UAAIL,QAAQ,KAAK,CAAjB,EAAoB;AAClB,YAAID,YAAY,GAAGE,aAAnB,EAAkC;AAChCI,iBAAO,GAAGnC,SAAVmC;AADF,eAEO,IAAIN,YAAY,GAAG,CAACG,cAApB,EAAoC;AACzCG,iBAAO,GAAG,CAAChC,UAAXgC;AACD;AALH,aAMO,IAAIL,QAAQ,KAAK,CAAjB,EAAoB;AAEzB,YAAID,YAAY,GAAG,CAACE,aAApB,EAAmC;AACjCI,iBAAO,GAAGnC,SAAVmC;AACD;AAJI,aAKA;AAEL,YAAIN,YAAY,GAAGG,cAAnB,EAAmC;AACjCG,iBAAO,GAAG,CAAChC,UAAXgC;AACD;AACF;;AAED,YAAKC,UAAL,CAAgBH,YAAhB,EAA8BE,OAA9B,EAAuCP,SAAS,GAAGhC,QAAnD;AA1JiC;;AAAAF,iEA6Jd,UACnB2C,SADmB,EAEnBF,OAFmB,EAGnBP,SAHmB,EAShB;AACH,yBAAkC,MAAKjC,KAAvC;AAAA,UAAQG,KAAR,gBAAQA,KAAR;AAAA,UAAeC,cAAf,gBAAeA,cAAf;AACAD,WAAK,CAACwC,QAANxC,CAAe,CAAfA;AACAC,oBAAc,CAACuC,QAAfvC,CAAwBsC,SAAxBtC;;AAEA,YAAKwC,QAAL,CAAc;AAAET,gBAAQ,EAAE1B,IAAI,CAACoC,IAALpC,CAAU+B,OAAV/B;AAAZ,OAAd;;AACAK,cAAQ,CAACgC,MAAThC,CAAgBV,cAAhBU;AACEiC,0BAAkB,EAAE,GADtBjC;AAEEkC,iCAAyB,EAAE,GAF7BlC;AAGEmC,gBAAQ,EAAEhB,SAHZnB;AAIEoC,kBAAU,EAAE,CAJdpC;AAKE0B,eAL8B,EAK9BA,OALF1B;AAMEqC,uBAAe,EAAE,MAAKrD,KAAL,CAAWsD;AAN9BtC,SAOK,MAAKhB,KAAL,CAAWuD,gBAPhBvC,GAQGwC,KARHxC,CAQS,iBAAkB;AAAA,YAAfyC,QAAe,SAAfA,QAAe;;AACzB,YAAIA,QAAJ,EAAc;AACZ,cAAIf,OAAO,GAAG,CAAVA,IAAe,MAAK1C,KAAL,CAAW0D,mBAA9B,EAAmD;AACjD,kBAAK1D,KAAL,CAAW0D,mBAAX;AADF,iBAEO,IAAIhB,OAAO,GAAG,CAAVA,IAAe,MAAK1C,KAAL,CAAW2D,oBAA9B,EAAoD;AACzD,kBAAK3D,KAAL,CAAW2D,oBAAX;AACD;;AAED,cAAIjB,OAAO,KAAK,CAAhB,EAAmB;AAAA;;AACjB,0DAAK1C,KAAL,EAAW4D,gBAAX;AADF,iBAEO;AAAA;;AACL,4DAAK5D,KAAL,EAAW6D,eAAX;AACD;AACF;AArBH;;AAuBA,UAAInB,OAAO,GAAG,CAAVA,IAAe,MAAK1C,KAAL,CAAW8D,uBAA9B,EAAuD;AACrD,cAAK9D,KAAL,CAAW8D,uBAAX;AADF,aAEO,IAAIpB,OAAO,GAAG,CAAVA,IAAe,MAAK1C,KAAL,CAAW+D,wBAA9B,EAAwD;AAC7D,cAAK/D,KAAL,CAAW+D,wBAAX;AACD;;AAED,UAAIrB,OAAO,KAAK,CAAhB,EAAmB;AAAA;;AACjB,wDAAK1C,KAAL,EAAWgE,oBAAX;AADF,aAEO;AAAA;;AACL,wDAAKhE,KAAL,EAAWiE,mBAAX;AACD;AA7MgC;;AAAAhE,kEAgNb,iBAAwC;AAAA,UAArC4B,WAAqC,SAArCA,WAAqC;;AAC5D,YAAKiB,QAAL,CAAc;AAAEtC,gBAAQ,EAAEqB,WAAW,CAACqC,MAAZrC,CAAmBsC;AAA/B,OAAd;AAjNiC;;AAAAlE,oEAoNX,YAAM;AAC5B,yBAAkD,MAAKC,KAAvD;AAAA,+CAAQK,SAAR;AAAA,UAAQA,SAAR,sCAAoB,CAApB;AAAA,+CAAuBC,QAAvB;AAAA,UAAuBA,QAAvB,sCAAkC,CAAlC;AAAA,UAAqC6B,QAArC,gBAAqCA,QAArC;AACA,mCAAmC,MAAKnC,KAAxC,CAAQO,WAAR;AAAA,UAAQA,WAAR,uCAAsBD,QAAtB;AACA,UAAME,UAAU,GAAGF,QAAQ,GAAGC,WAA9B;;AACA,UAAI4B,QAAQ,KAAK,CAAjB,EAAoB;AAClB,eAAO9B,SAAP;AADF,aAEO,IAAI8B,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AAC1B,eAAO,CAAC3B,UAAR;AACD;;AACD,aAAO,CAAP;AA7NiC;;AAAAT,4DAgO3B,YAAM;AACZ,YAAK0C,UAAL,CAAgB,MAAKF,aAAL,EAAhB,EAAsC,CAAtC;AAjOiC;;AAAAxC,+DAoOxB,YAAM;AACf,mCAA0B,MAAKC,KAA/B,CAAQK,SAAR;AAAA,UAAQA,SAAR,uCAAoB,CAApB;;AACA,YAAKoC,UAAL,CAAgB,MAAKF,aAAL,EAAhB,EAAsClC,SAAtC;AAtOiC;;AAAAN,gEAyOvB,YAAM;AAChB,kCAAyB,MAAKC,KAA9B,CAAQM,QAAR;AAAA,UAAQA,QAAR,sCAAmB,CAAnB;AACA,mCAAmC,MAAKN,KAAxC,CAAQO,WAAR;AAAA,UAAQA,WAAR,uCAAsBD,QAAtB;AACA,UAAME,UAAU,GAAGF,QAAQ,GAAGC,WAA9B;;AACA,YAAKkC,UAAL,CAAgB,MAAKF,aAAL,EAAhB,EAAsC,CAAC/B,UAAvC;AA7OiC;;AAEjC,QAAML,MAAK,GAAG,IAAIW,QAAQ,CAACM,KAAb,CAAmB,CAAnB,CAAd;;AACA,UAAKpB,KAAL,GAAa;AACXG,WAAK,EAALA,MADW;AAEXC,oBAAc,EAAE,IAAIU,QAAQ,CAACM,KAAb,CAAmB,CAAnB,CAFL;AAGXe,cAAQ,EAAE,CAHC;AAIX9B,eAAS,EAAE6D,SAJA;AAKX3D,iBAAW,EAAE2D,SALF;AAMX5D,cAAQ,EAAE4D;AANC,KAAb;;AAQA,UAAKC,mBAAL,CAAyBrE,MAAzB,EAAgC,MAAKE,KAArC;;AAEA,UAAKoE,cAAL,GAAsBtD,QAAQ,CAACuD,KAATvD,CACpB,CAAC;AAAEa,iBAAW,EAAE;AAAEO,oBAAY,EAAE/B;AAAhB;AAAf,KAAD,CADoBW,EAEpB;AAAEqC,qBAAe,EAAErD,MAAK,CAACsD;AAAzB,KAFoBtC,CAAtB;AAbiC;AAiBlC;;;;WAEDwD,oCAA2BxE,KAA3BwE,EAAkDtE,KAAlDsE,EAAyE;AACvE,UACE,KAAKxE,KAAL,CAAWG,QAAX,KAAwBH,KAAK,CAACG,QAA9B,IACA,KAAKH,KAAL,CAAWa,aAAX,KAA6Bb,KAAK,CAACa,aADnC,IAEA,KAAKb,KAAL,CAAWc,cAAX,KAA8Bd,KAAK,CAACc,cAFpC,IAGA,KAAKd,KAAL,CAAWI,iBAAX,KAAiCJ,KAAK,CAACI,iBAHvC,IAIA,KAAKF,KAAL,CAAWK,SAAX,KAAyBL,KAAK,CAACK,SAJ/B,IAKA,KAAKL,KAAL,CAAWO,WAAX,KAA2BP,KAAK,CAACO,WALjC,IAMA,KAAKP,KAAL,CAAWM,QAAX,KAAwBN,KAAK,CAACM,QAPhC,EAQE;AACA,aAAK6D,mBAAL,CAAyBrE,KAAzB,EAAgCE,KAAhC;AACD;AACF;;;WAiNDuE,kBAAS;AAAA;;AACP,UAAQpC,QAAR,GAAqB,KAAKnC,KAA1B,CAAQmC,QAAR;AACA,yBAA4D,KAAKrC,KAAjE;AAAA,UAAQ0E,QAAR,gBAAQA,QAAR;AAAA,UAAkBC,iBAAlB,gBAAkBA,iBAAlB;AAAA,UAAqCC,kBAArC,gBAAqCA,kBAArC;AAEA,UAAMC,IAAI,GAAGF,iBAAiB,IAC5BnF,oBAACwB,QAAD,CAAU8D,IAAV;AACEC,aAAK,EAAE,CACLC,MAAM,CAACC,WADF,EAGL;AAAEC,mBAAS,EAAE,CAAC;AAAEC,sBAAU,EAAE,KAAK5D;AAAnB,WAAD;AAAb,SAHK;AADT,SAMGoD,iBAAiB,CAAC,KAAKtD,cAAN,EAAuB,KAAKN,MAA5B,CANpB,EAOEvB,oBAACsF,IAAD;AACEM,gBAAQ,EAAE;AAAA,cAAGvD,WAAH,SAAGA,WAAH;AAAA,iBACR,OAAKiB,QAAL,CAAc;AAAEvC,qBAAS,EAAEsB,WAAW,CAACqC,MAAZrC,CAAmBwD;AAAhC,WAAd,CADQ;AAAA;AADZ,QAPF,CADF;AAgBA,UAAMC,KAAK,GAAGV,kBAAkB,IAC9BpF,oBAACwB,QAAD,CAAU8D,IAAV;AACEC,aAAK,EAAE,CACLC,MAAM,CAACO,YADF,EAEL;AAAEL,mBAAS,EAAE,CAAC;AAAEC,sBAAU,EAAE,KAAKvD;AAAnB,WAAD;AAAb,SAFK;AADT,SAKGgD,kBAAkB,CAAC,KAAKjD,eAAN,EAAwB,KAAKZ,MAA7B,CALrB,EAMEvB,oBAACsF,IAAD;AACEM,gBAAQ,EAAE;AAAA,cAAGvD,WAAH,SAAGA,WAAH;AAAA,iBACR,OAAKiB,QAAL,CAAc;AAAErC,uBAAW,EAAEoB,WAAW,CAACqC,MAAZrC,CAAmBwD;AAAlC,WAAd,CADQ;AAAA;AADZ,QANF,CADF;AAeA,aACE7F,oBAACE,iBAAD;AACE8F,qBAAa,EAAE,CAAC,CAAC,EAAF,EAAM,EAAN;AADjB,SAEM,KAAKxF,KAFX;AAGEsE,sBAAc,EAAE,KAAKA,cAHvB;AAIEmB,4BAAoB,EAAE,KAAKA;AAJ7B,UAKEjG,oBAACwB,QAAD,CAAU8D,IAAV;AACEM,gBAAQ,EAAE,KAAKM,WADjB;AAEEX,aAAK,EAAE,CAACC,MAAM,CAACW,SAAR,EAAmB,KAAK3F,KAAL,CAAW4F,cAA9B;AAFT,SAGGf,IAHH,EAIGS,KAJH,EAKE9F,oBAACG,iBAAD;AACEkG,eAAO,EAAExD,QAAQ,KAAK,CADxB;AAEEoD,4BAAoB,EAAE,KAAKK;AAF7B,SAGEtG,oBAACwB,QAAD,CAAU8D,IAAV;AACEiB,qBAAa,EAAE1D,QAAQ,KAAK,CAAbA,GAAiB,MAAjBA,GAA0B,UAD3C;AAEE0C,aAAK,EAAE,CACL;AACEG,mBAAS,EAAE,CAAC;AAAEC,sBAAU,EAAE,KAAKpE;AAAnB,WAAD;AADb,SADK,EAIL,KAAKf,KAAL,CAAWgG,sBAJN;AAFT,SAQGtB,QARH,CAHF,CALF,CALF,CADF;AA4BD;;;;EAzToCjF,S;;SAAlBK,S;;gBAAAA,W,gBAIG;AACpBK,UAAQ,EAAE,CADU;AAEpBC,mBAAiB,EAAE,CAFC;AAGpBkD,qBAAmB,EAAE;AAHD;;AAwTxB,IAAM0B,MAAM,GAAGiB,UAAU,CAACC,MAAXD,CAAkB;AAC/BN,WAAS,EAAE;AACTQ,YAAQ,EAAE;AADD,GADoB;AAI/BlB,aAAW,kCACNgB,UAAU,CAACG,kBADL;AAETC,iBAAa,EAAEC,WAAW,CAACC,KAAZD,GAAoB,aAApBA,GAAoC;AAF1C,IAJoB;AAQ/Bf,cAAY,kCACPU,UAAU,CAACG,kBADJ;AAEVC,iBAAa,EAAEC,WAAW,CAACC,KAAZD,GAAoB,KAApBA,GAA4B;AAFjC;AARmB,CAAlBL,CAAf","names":["React","Component","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","Swipeable","constructor","props","_defineProperty","state","friction","overshootFriction","dragX","rowTranslation","leftWidth","rowWidth","rightOffset","rightWidth","Math","max","overshootLeft","overshootRight","transX","Animated","add","interpolate","inputRange","outputRange","showLeftAction","Value","leftActionTranslate","Number","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","nativeEvent","oldState","ACTIVE","close","ev","handleRelease","velocityX","translationX","rowState","leftThreshold","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","setValue","setState","sign","spring","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","useNativeAnimations","animationOptions","start","finished","onSwipeableLeftOpen","onSwipeableRightOpen","onSwipeableClose","onSwipeableOpen","onSwipeableLeftWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","onSwipeableWillOpen","layout","width","undefined","updateAnimatedEvent","onGestureEvent","event","UNSAFE_componentWillUpdate","render","children","renderLeftActions","renderRightActions","left","View","style","styles","leftActions","transform","translateX","onLayout","x","right","rightActions","activeOffsetX","onHandlerStateChange","onRowLayout","container","containerStyle","enabled","onTapHandlerStateChange","pointerEvents","childrenContainerStyle","StyleSheet","create","overflow","absoluteFillObject","flexDirection","I18nManager","isRTL"],"sources":["Swipeable.tsx"],"sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us\n// to move faster and fix possible issues quicker\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  PanGestureHandlerProps,\n  GestureEvent,\n  PanGestureHandlerEventPayload,\n  HandlerStateChangeEvent,\n  TapGestureHandlerEventPayload,\n} from '../handlers/gestureHandlers';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\ninterface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  enableTrackpadTwoFingerGesture?: boolean;\n  friction?: number;\n  leftThreshold?: number;\n  rightThreshold?: number;\n  overshootLeft?: boolean;\n  overshootRight?: boolean;\n  overshootFriction?: number;\n  onSwipeableLeftOpen?: () => void;\n  onSwipeableRightOpen?: () => void;\n  onSwipeableOpen?: () => void;\n  onSwipeableClose?: () => void;\n  onSwipeableLeftWillOpen?: () => void;\n  onSwipeableRightWillOpen?: () => void;\n  onSwipeableWillOpen?: () => void;\n  onSwipeableWillClose?: () => void;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1]\n   * dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: Animated.AnimatedInterpolation,\n    dragAnimatedValue: Animated.AnimatedInterpolation\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1]\n   * dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: Animated.AnimatedInterpolation,\n    dragAnimatedValue: Animated.AnimatedInterpolation\n  ) => React.ReactNode;\n  useNativeAnimations?: boolean;\n  animationOptions?: Record<string, unknown>;\n  containerStyle?: StyleProp<ViewStyle>;\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\ntype SwipeableState = {\n  dragX: Animated.Value;\n  rowTranslation: Animated.Value;\n  rowState: number;\n  leftWidth?: number;\n  rightOffset?: number;\n  rowWidth?: number;\n};\n\nexport default class Swipeable extends Component<\n  SwipeableProps,\n  SwipeableState\n> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n\n  constructor(props: SwipeableProps) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this.updateAnimatedEvent(props, this.state);\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations! }\n    );\n  }\n\n  UNSAFE_componentWillUpdate(props: SwipeableProps, state: SwipeableState) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private transX?: Animated.AnimatedInterpolation;\n  private showLeftAction?: Animated.AnimatedInterpolation | Animated.Value;\n  private leftActionTranslate?: Animated.AnimatedInterpolation;\n  private showRightAction?: Animated.AnimatedInterpolation | Animated.Value;\n  private rightActionTranslate?: Animated.AnimatedInterpolation;\n\n  private updateAnimatedEvent = (\n    props: SwipeableProps,\n    state: SwipeableState\n  ) => {\n    const { friction, overshootFriction } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const {\n      overshootLeft = leftWidth > 0,\n      overshootRight = rightWidth > 0,\n    } = props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction!],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [\n        -rightWidth - (overshootRight ? 1 : overshootFriction!),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 : overshootFriction!),\n      ],\n      outputRange: [\n        -rightWidth - (overshootRight || overshootFriction! > 1 ? 1 : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft || overshootFriction! > 1 ? 1 : 0),\n      ],\n    });\n    this.transX = transX;\n    this.showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this.showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  private onHandlerStateChange = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n  };\n\n  private handleRelease = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this.currentOffset() + dragX / friction!;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\n  };\n\n  private animateRow = (\n    fromValue: number,\n    toValue: number,\n    velocityX?:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0 && this.props.onSwipeableLeftOpen) {\n          this.props.onSwipeableLeftOpen();\n        } else if (toValue < 0 && this.props.onSwipeableRightOpen) {\n          this.props.onSwipeableRightOpen();\n        }\n\n        if (toValue === 0) {\n          this.props.onSwipeableClose?.();\n        } else {\n          this.props.onSwipeableOpen?.();\n        }\n      }\n    });\n    if (toValue > 0 && this.props.onSwipeableLeftWillOpen) {\n      this.props.onSwipeableLeftWillOpen();\n    } else if (toValue < 0 && this.props.onSwipeableRightWillOpen) {\n      this.props.onSwipeableRightWillOpen();\n    }\n\n    if (toValue === 0) {\n      this.props.onSwipeableWillClose?.();\n    } else {\n      this.props.onSwipeableWillOpen?.();\n    }\n  };\n\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  private currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const { children, renderLeftActions, renderRightActions } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          // all those and below parameters can have ! since they are all asigned in constructor in `updateAnimatedEvent` but TS cannot spot it for some reason\n          { transform: [{ translateX: this.leftActionTranslate! }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction!, this.transX!)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this.rightActionTranslate! }] },\n        ]}>\n        {renderRightActions(this.showRightAction!, this.transX!)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-10, 10]}\n        {...this.props}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View\n          onLayout={this.onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this.transX! }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}