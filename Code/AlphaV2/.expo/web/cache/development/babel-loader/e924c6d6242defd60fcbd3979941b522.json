{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _excluded = [\"children\", \"screenListeners\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport Group from \"./Group\";\nimport isArrayEqual from \"./isArrayEqual\";\nimport isRecordEqual from \"./isRecordEqual\";\nimport NavigationHelpersContext from \"./NavigationHelpersContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport Screen from \"./Screen\";\nimport { PrivateValueStore } from \"./types\";\nimport useChildListeners from \"./useChildListeners\";\nimport useComponent from \"./useComponent\";\nimport useCurrentRender from \"./useCurrentRender\";\nimport useDescriptors from \"./useDescriptors\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useFocusedListenersChildrenAdapter from \"./useFocusedListenersChildrenAdapter\";\nimport useFocusEvents from \"./useFocusEvents\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useNavigationHelpers from \"./useNavigationHelpers\";\nimport useOnAction from \"./useOnAction\";\nimport useOnGetState from \"./useOnGetState\";\nimport useOnRouteFocus from \"./useOnRouteFocus\";\nimport useRegisterNavigator from \"./useRegisterNavigator\";\nimport useScheduleUpdate from \"./useScheduleUpdate\";\nPrivateValueStore;\n\nvar isValidKey = function isValidKey(key) {\n  return key === undefined || typeof key === 'string' && key !== '';\n};\n\nvar getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, groupKey, groupOptions) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the screen '\" + child.props.name + \"'. It must be a non-empty string or 'undefined'.\");\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the group. It must be a non-empty string or 'undefined'.\");\n        }\n\n        acc.push.apply(acc, _toConsumableArray(getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== Group ? groupOptions : groupOptions != null ? [].concat(_toConsumableArray(groupOptions), [child.props.screenOptions]) : [child.props.screenOptions])));\n        return acc;\n      }\n    }\n\n    throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \" + (React.isValidElement(child) ? \"'\" + (typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name) + \"'\" + ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? \" for the screen '\" + child.props.name + \"'\" : '') : typeof child === 'object' ? JSON.stringify(child) : \"'\" + String(child) + \"'\") + \"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$props = config.props,\n          name = _config$props.name,\n          children = _config$props.children,\n          component = _config$props.component,\n          getComponent = _config$props.getComponent;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\"Got an invalid name (\" + JSON.stringify(name) + \") for the screen. It must be a non-empty string.\");\n      }\n\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\"Got both 'component' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\"Got an invalid value for 'children' prop for the screen '\" + name + \"'. It must be a function returning a React Element.\");\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\"Got an invalid value for 'component' prop for the screen '\" + name + \"'. It must be a valid React Component.\");\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\" + name + \"'. It must be a function returning a React Component.\");\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\" + name + \"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\"Got a component with the name '\" + component.name + \"' for the screen '\" + name + \"'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.\");\n          }\n        }\n      } else {\n        throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\" + name + \"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");\n      }\n    });\n  }\n\n  return configs;\n};\n\nexport default function useNavigationBuilder(createRouter, options) {\n  var navigatorKey = useRegisterNavigator();\n  var route = React.useContext(NavigationRouteContext);\n\n  var children = options.children,\n      screenListeners = options.screenListeners,\n      rest = _objectWithoutProperties(options, _excluded);\n\n  var _React$useRef = React.useRef(createRouter(_objectSpread(_objectSpread({}, rest), route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n    initialRouteName: route.params.screen\n  } : null))),\n      router = _React$useRef.current;\n\n  var routeConfigs = getRouteConfigsFromChildren(children);\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config.props.name in acc) {\n      throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\" + config.props.name + \"')\");\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config.props.name;\n  });\n  var routeKeyList = routeNames.reduce(function (acc, curr) {\n    acc[curr] = screens[curr].keys.map(function (key) {\n      return key !== null && key !== void 0 ? key : '';\n    }).join(':');\n    return acc;\n  }, {});\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr].props.initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return _extends(acc, _defineProperty({}, curr, screens[curr].props.getId));\n  }, {});\n\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n\n  var _React$useContext = React.useContext(NavigationStateContext),\n      currentState = _React$useContext.state,\n      getCurrentState = _React$useContext.getState,\n      setCurrentState = _React$useContext.setState,\n      setKey = _React$useContext.setKey,\n      getKey = _React$useContext.getKey,\n      getIsInitial = _React$useContext.getIsInitial;\n\n  var stateCleanedUp = React.useRef(false);\n  var cleanUpState = React.useCallback(function () {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  var setState = React.useCallback(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n\n    setCurrentState(state);\n  }, [setCurrentState]);\n\n  var _React$useMemo = React.useMemo(function () {\n    var _route$params4;\n\n    var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n      var _route$params, _route$params2, _route$params3;\n\n      var initialParams = screens[curr].props.initialParams;\n      var initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n      acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? _objectSpread(_objectSpread({}, initialParams), initialParamsFromParams) : undefined;\n      return acc;\n    }, {});\n\n    if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n      return [router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList: routeGetIdList\n      }), true];\n    } else {\n      var _route$params$state, _route$params5;\n\n      return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n        routeNames: routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList: routeGetIdList\n      }), false];\n    }\n  }, [currentState, router, isStateValid]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      initializedState = _React$useMemo2[0],\n      isFirstStateInitialization = _React$useMemo2[1];\n\n  var previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(function () {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  var previousRouteKeyList = previousRouteKeyListRef.current;\n  var state = isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames) || !isRecordEqual(routeKeyList, previousRouteKeyList)) {\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(function (name) {\n        return previousRouteKeyList.hasOwnProperty(name) && routeKeyList[name] !== previousRouteKeyList[name];\n      })\n    });\n  }\n\n  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n\n  if (route !== null && route !== void 0 && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n\n  var shouldUpdate = state !== nextState;\n  useScheduleUpdate(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(function () {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n\n    return function () {\n      setTimeout(function () {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n  }, []);\n  var initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  var getState = React.useCallback(function () {\n    var currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  var emitter = useEventEmitter(function (e) {\n    var _ref;\n\n    var routeNames = [];\n    var route;\n\n    if (e.target) {\n      var _route;\n\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, _toConsumableArray(Object.keys(screens).filter(function (name) {\n        var _route2;\n\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      })));\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    var navigation = descriptors[route.key].navigation;\n\n    var listeners = (_ref = []).concat.apply(_ref, _toConsumableArray([screenListeners].concat(_toConsumableArray(routeNames.map(function (name) {\n      var listeners = screens[name].props.listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map === null || map === void 0 ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n\n    listeners.forEach(function (listener) {\n      return listener === null || listener === void 0 ? void 0 : listener(e);\n    });\n  });\n  useFocusEvents({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n\n  var _useChildListeners = useChildListeners(),\n      childListeners = _useChildListeners.listeners,\n      addListener = _useChildListeners.addListener;\n\n  var _useKeyedChildListene = useKeyedChildListeners(),\n      keyedListeners = _useKeyedChildListene.keyedListeners,\n      addKeyedListener = _useKeyedChildListene.addKeyedListener;\n\n  var onAction = useOnAction({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = useOnRouteFocus({\n    router: router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = useNavigationHelpers({\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var descriptors = useDescriptors({\n    state: state,\n    screens: screens,\n    navigation: navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction: onAction,\n    getState: getState,\n    setState: setState,\n    onRouteFocus: onRouteFocus,\n    addListener: addListener,\n    addKeyedListener: addKeyedListener,\n    router: router,\n    emitter: emitter\n  });\n  useCurrentRender({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAAA,SACEA,aADF,QAWO,2BAXP;AAYA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,QAAmC,UAAnC;AAEA,OAAOC,KAAP;AACA,OAAOC,YAAP;AACA,OAAOC,aAAP;AACA,OAAOC,wBAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,MAAP;AACA,SAKEC,iBALF;AAQA,OAAOC,iBAAP;AACA,OAAOC,YAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,cAAP;AACA,OAAOC,eAAP;AACA,OAAOC,kCAAP;AACA,OAAOC,cAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,oBAAP;AACA,OAAOC,WAAP;AACA,OAAOC,aAAP;AACA,OAAOC,eAAP;AACA,OAAOC,oBAAP;AACA,OAAOC,iBAAP;AAIAd,iBAAiB;;AAOjB,IAAMe,UAAU,GAAIC,SAAdD,UAAcC,IAAD;AAAA,SACjBA,GAAG,KAAKC,SAARD,IAAsB,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,EADxC;AAAA,CAAnB;;AAQA,IAAME,2BAA2B,GAAG,SAA9BA,2BAA8B,CAKlCC,QALkC,EAMlCC,QANkC,EAOlCC,YAPkC,EAY/B;AACH,MAAMC,OAAO,GAAG/B,KAAK,CAACgC,QAANhC,CAAeiC,OAAfjC,CAAuB4B,QAAvB5B,EAAiCkC,MAAjClC,CAEd,UAACmC,GAAD,EAAMC,KAAN,EAAgB;AAAA;;AAChB,QAAIpC,KAAK,CAACqC,cAANrC,CAAqBoC,KAArBpC,CAAJ,EAAiC;AAC/B,UAAIoC,KAAK,CAACE,IAANF,KAAe5B,MAAnB,EAA2B;AAIzB,YAAI,CAACgB,UAAU,CAACY,KAAK,CAACG,KAANH,CAAYI,aAAb,CAAf,EAA4C;AAC1C,gBAAM,IAAIC,KAAJ,2CACoCC,IAAI,CAACC,SAALD,CACtCN,KAAK,CAACG,KAANH,CAAYI,aAD0BE,CADpC,0BAIFN,KAAK,CAACG,KAANH,CAAYQ,IAJV,sDAAN;AAOD;;AAEDT,WAAG,CAACU,IAAJV,CAAS;AACPW,cAAI,EAAE,CAACjB,QAAD,EAAWO,KAAK,CAACG,KAANH,CAAYI,aAAvB,CADC;AAEPO,iBAAO,EAAEjB,YAFF;AAGPS,eAAK,EAAEH,KAAK,CAACG;AAHN,SAATJ;AAWA,eAAOA,GAAP;AACD;;AAED,UAAIC,KAAK,CAACE,IAANF,KAAepC,KAAK,CAACgD,QAArBZ,IAAiCA,KAAK,CAACE,IAANF,KAAelC,KAApD,EAA2D;AACzD,YAAI,CAACsB,UAAU,CAACY,KAAK,CAACG,KAANH,CAAYI,aAAb,CAAf,EAA4C;AAC1C,gBAAM,IAAIC,KAAJ,2CACoCC,IAAI,CAACC,SAALD,CACtCN,KAAK,CAACG,KAANH,CAAYI,aAD0BE,CADpC,oEAAN;AAFuD;;AAWzDP,WAAG,CAACU,IAAJV,UAAG,qBACER,2BAA2B,CAC5BS,KAAK,CAACG,KAANH,CAAYR,QADgB,EAE5BQ,KAAK,CAACG,KAANH,CAAYI,aAFgB,EAG5BJ,KAAK,CAACE,IAANF,KAAelC,KAAfkC,GACIN,YADJM,GAEIN,YAAY,IAAI,IAAhBA,gCACIA,YADJA,IACkBM,KAAK,CAACG,KAANH,CAAYa,aAD9BnB,KAEA,CAACM,KAAK,CAACG,KAANH,CAAYa,aAAb,CAPwB,CAD7B,EAAHd;AAWA,eAAOA,GAAP;AACD;AACF;;AAED,UAAM,IAAIM,KAAJ,wGAEFzC,KAAK,CAACqC,cAANrC,CAAqBoC,KAArBpC,WAEM,OAAOoC,KAAK,CAACE,IAAb,KAAsB,QAAtB,GAAiCF,KAAK,CAACE,IAAvC,kBAA8CF,KAAK,CAACE,IAApD,gDAA8CY,YAAYN,IAFhE5C,WAIM,qBAAK,CAACuC,KAAN,sDAAaK,IAAb,yBAAwCR,KAAK,CAACG,KAANH,CAAYQ,IAApD,SAA8D,EAJpE5C,IAMI,OAAOoC,KAAP,KAAiB,QAAjB,GACAM,IAAI,CAACC,SAALD,CAAeN,KAAfM,CADA,SAEIS,MAAM,CAACf,KAAD,CAFV,MARF,iGAAN;AA1Dc,KAuEb,EAvEapC,CAAhB;;AAyEA,MAAIoD,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;AACzCrB,WAAO,CAACwB,OAARxB,CAAiByB,gBAAD,EAAY;AAC1B,0BAAoDA,MAAM,CAACjB,KAA3D;AAAA,UAAQK,IAAR,iBAAQA,IAAR;AAAA,UAAchB,QAAd,iBAAcA,QAAd;AAAA,UAAwB6B,SAAxB,iBAAwBA,SAAxB;AAAA,UAAmCC,YAAnC,iBAAmCA,YAAnC;;AAEA,UAAI,OAAOd,IAAP,KAAgB,QAAhB,IAA4B,CAACA,IAAjC,EAAuC;AACrC,cAAM,IAAIH,KAAJ,2BACoBC,IAAI,CAACC,SAALD,CACtBE,IADsBF,CADpB,sDAAN;AAKD;;AAED,UACEd,QAAQ,IAAI,IAAZA,IACA6B,SAAS,KAAK/B,SADdE,IAEA8B,YAAY,KAAKhC,SAHnB,EAIE;AACA,YAAIE,QAAQ,IAAI,IAAZA,IAAoB6B,SAAS,KAAK/B,SAAtC,EAAiD;AAC/C,gBAAM,IAAIe,KAAJ,gEACyDG,IADzD,wCAAN;AAGD;;AAED,YAAIhB,QAAQ,IAAI,IAAZA,IAAoB8B,YAAY,KAAKhC,SAAzC,EAAoD;AAClD,gBAAM,IAAIe,KAAJ,mEAC4DG,IAD5D,wCAAN;AAGD;;AAED,YAAIa,SAAS,KAAK/B,SAAd+B,IAA2BC,YAAY,KAAKhC,SAAhD,EAA2D;AACzD,gBAAM,IAAIe,KAAJ,oEAC6DG,IAD7D,wCAAN;AAGD;;AAED,YAAIhB,QAAQ,IAAI,IAAZA,IAAoB,OAAOA,QAAP,KAAoB,UAA5C,EAAwD;AACtD,gBAAM,IAAIa,KAAJ,+DACwDG,IADxD,yDAAN;AAGD;;AAED,YAAIa,SAAS,KAAK/B,SAAd+B,IAA2B,CAACxD,kBAAkB,CAACwD,SAAD,CAAlD,EAA+D;AAC7D,gBAAM,IAAIhB,KAAJ,gEACyDG,IADzD,4CAAN;AAGD;;AAED,YAAIc,YAAY,KAAKhC,SAAjBgC,IAA8B,OAAOA,YAAP,KAAwB,UAA1D,EAAsE;AACpE,gBAAM,IAAIjB,KAAJ,mEAC4DG,IAD5D,2DAAN;AAGD;;AAED,YAAI,OAAOa,SAAP,KAAqB,UAAzB,EAAqC;AACnC,cAAIA,SAAS,CAACb,IAAVa,KAAmB,WAAvB,EAAoC;AAIlCE,mBAAO,CAACC,IAARD,wFACuFf,IADvFe;AAJF,iBAOO,IAAI,SAASE,IAAT,CAAcJ,SAAS,CAACb,IAAxB,CAAJ,EAAmC;AACxCe,mBAAO,CAACC,IAARD,qCACoCF,SAAS,CAACb,IAD9Ce,0BACuEf,IADvEe;AAGD;AACF;AAtDH,aAuDO;AACL,cAAM,IAAIlB,KAAJ,qFAC8EG,IAD9E,yLAAN;AAGD;AAtEH;AAwED;;AAED,SAAOb,OAAP;AAjKF;;AA2KA,eAAe,SAAS+B,oBAAT,CAObC,YAPa,EAQbhB,OARa,EAeb;AACA,MAAMiB,YAAY,GAAG1C,oBAAoB,EAAzC;AAEA,MAAM2C,KAAK,GAAGjE,KAAK,CAACkE,UAANlE,CAAiBM,sBAAjBN,CAAd;;AAIA,MAAQ4B,QAAR,GAA+CmB,OAA/C,CAAQnB,QAAR;AAAA,MAAkBuC,eAAlB,GAA+CpB,OAA/C,CAAkBoB,eAAlB;AAAA,MAAsCC,IAAtC,4BAA+CrB,OAA/C;;AACA,sBAA4B/C,KAAK,CAACqE,MAANrE,CAC1B+D,YAAY,iCACNK,IADM,GAENH,KAAK,SAALA,SAAK,WAALA,SAAK,CAAEK,MAAPL,IACJA,KAAK,CAACK,MAANL,CAAaM,KAAbN,IAAsB,IADlBA,IAEJA,KAAK,CAACK,MAANL,CAAaO,OAAbP,KAAyB,KAFrBA,IAGJ,OAAOA,KAAK,CAACK,MAANL,CAAaQ,MAApB,KAA+B,QAH3BR,GAIA;AAAES,oBAAgB,EAAET,KAAK,CAACK,MAANL,CAAaQ;AAAjC,GAJAR,GAKA,IAPM,EADcjE,CAA5B;AAAA,MAAiB2E,MAAjB,iBAAQC,OAAR;;AAYA,MAAMC,YAAY,GAAGlD,2BAA2B,CAI9CC,QAJ8C,CAAhD;AAMA,MAAMkD,OAAO,GAAGD,YAAY,CAAC3C,MAAb2C,CAEd,UAAC1C,GAAD,EAAMqB,MAAN,EAAiB;AACjB,QAAIA,MAAM,CAACjB,KAAPiB,CAAaZ,IAAbY,IAAqBrB,GAAzB,EAA8B;AAC5B,YAAM,IAAIM,KAAJ,gHACyGe,MAAM,CAACjB,KAAPiB,CAAaZ,IADtH,QAAN;AAGD;;AAEDT,OAAG,CAACqB,MAAM,CAACjB,KAAPiB,CAAaZ,IAAd,CAAHT,GAAyBqB,MAAzBrB;AACA,WAAOA,GAAP;AAVc,KAWb,EAXa0C,CAAhB;AAaA,MAAME,UAAU,GAAGF,YAAY,CAACG,GAAbH,CAAkBrB,gBAAD;AAAA,WAAYA,MAAM,CAACjB,KAAPiB,CAAaZ,IAAzB;AAAA,GAAjBiC,CAAnB;AACA,MAAMI,YAAY,GAAGF,UAAU,CAAC7C,MAAX6C,CACnB,UAAC5C,GAAD,EAAM+C,IAAN,EAAe;AACb/C,OAAG,CAAC+C,IAAD,CAAH/C,GAAY2C,OAAO,CAACI,IAAD,CAAPJ,CAAchC,IAAdgC,CAAmBE,GAAnBF,CAAwBrD,aAAD;AAAA,aAASA,GAAT,SAASA,OAAT,WAASA,SAAO,EAAhB;AAAA,KAAvBqD,EAA2CK,IAA3CL,CAAgD,GAAhDA,CAAZ3C;AACA,WAAOA,GAAP;AAHiB,KAKnB,EALmB4C,CAArB;AAOA,MAAMK,cAAc,GAAGL,UAAU,CAAC7C,MAAX6C,CACrB,UAAC5C,GAAD,EAAM+C,IAAN,EAAe;AACb,QAAQG,aAAR,GAA0BP,OAAO,CAACI,IAAD,CAAPJ,CAAcvC,KAAxC,CAAQ8C,aAAR;AACAlD,OAAG,CAAC+C,IAAD,CAAH/C,GAAYkD,aAAZlD;AACA,WAAOA,GAAP;AAJmB,KAMrB,EANqB4C,CAAvB;AAQA,MAAMO,cAAc,GAAGP,UAAU,CAAC7C,MAAX6C,CAGrB,UAAC5C,GAAD,EAAM+C,IAAN;AAAA,WACEK,SAAcpD,GAAdoD,sBACGL,IADHK,EACUT,OAAO,CAACI,IAAD,CAAPJ,CAAcvC,KAAduC,CAAoBU,KAD9BD,EADF;AAAA,GAHqBR,EAOrB,EAPqBA,CAAvB;;AAUA,MAAI,CAACA,UAAU,CAACU,MAAhB,EAAwB;AACtB,UAAM,IAAIhD,KAAJ,CACJ,4FADI,CAAN;AAGD;;AAED,MAAMiD,YAAY,GAAG1F,KAAK,CAAC2F,WAAN3F,CAClBuE,eAAD;AAAA,WAAWA,KAAK,CAACjC,IAANiC,KAAe7C,SAAf6C,IAA4BA,KAAK,CAACjC,IAANiC,KAAeI,MAAM,CAACrC,IAA7D;AAAA,GADmBtC,EAEnB,CAAC2E,MAAM,CAACrC,IAAR,CAFmBtC,CAArB;AAKA,MAAM4F,kBAAkB,GAAG5F,KAAK,CAAC2F,WAAN3F,CACxBuE,eAAD;AAAA,WACEA,KAAK,KAAK7C,SAAV6C,IAAuBA,KAAK,CAACsB,KAANtB,KAAgB,KAAvCA,IAAgDmB,YAAY,CAACnB,KAAD,CAD9D;AAAA,GADyBvE,EAGzB,CAAC0F,YAAD,CAHyB1F,CAA3B;;AAMA,0BAOIA,KAAK,CAACkE,UAANlE,CAAiBO,sBAAjBP,CAPJ;AAAA,MACS8F,YADT,qBACEvB,KADF;AAAA,MAEYwB,eAFZ,qBAEEC,QAFF;AAAA,MAGYC,eAHZ,qBAGEC,QAHF;AAAA,MAIEC,MAJF,qBAIEA,MAJF;AAAA,MAKEC,MALF,qBAKEA,MALF;AAAA,MAMEC,YANF,qBAMEA,YANF;;AASA,MAAMC,cAAc,GAAGtG,KAAK,CAACqE,MAANrE,CAAa,KAAbA,CAAvB;AAEA,MAAMuG,YAAY,GAAGvG,KAAK,CAAC2F,WAAN3F,CAAkB,YAAM;AAC3CiG,mBAAe,CAACvE,SAAD,CAAfuE;AACAK,kBAAc,CAAC1B,OAAf0B,GAAyB,IAAzBA;AAFmB,KAGlB,CAACL,eAAD,CAHkBjG,CAArB;AAKA,MAAMkG,QAAQ,GAAGlG,KAAK,CAAC2F,WAAN3F,CACduE,eAAD,EAAwE;AACtE,QAAI+B,cAAc,CAAC1B,OAAnB,EAA4B;AAI1B;AACD;;AACDqB,mBAAe,CAAC1B,KAAD,CAAf0B;AARa,KAUf,CAACA,eAAD,CAVejG,CAAjB;;AAaA,uBAAuDA,KAAK,CAACwG,OAANxG,CAAc,YAAM;AAAA;;AACzE,QAAMyG,qBAAqB,GAAG1B,UAAU,CAAC7C,MAAX6C,CAE5B,UAAC5C,GAAD,EAAM+C,IAAN,EAAe;AAAA;;AACf,UAAQG,aAAR,GAA0BP,OAAO,CAACI,IAAD,CAAPJ,CAAcvC,KAAxC,CAAQ8C,aAAR;AACA,UAAMqB,uBAAuB,GAC3B,MAAK,SAALzC,SAAK,WAALA,kCAAK,CAAEK,MAAP,gEAAeC,KAAf,KAAwB,IAAxB,IACA,MAAK,SAALN,SAAK,WAALA,mCAAK,CAAEK,MAAP,kEAAeE,OAAf,MAA2B,KAD3B,IAEA,MAAK,SAALP,SAAK,WAALA,mCAAK,CAAEK,MAAP,kEAAeG,MAAf,MAA0BS,IAF1B,GAGIjB,KAAK,CAACK,MAANL,CAAaK,MAHjB,GAII5C,SALN;AAOAS,SAAG,CAAC+C,IAAD,CAAH/C,GACEkD,aAAa,KAAK3D,SAAlB2D,IAA+BqB,uBAAuB,KAAKhF,SAA3D2D,mCAESA,aAFTA,GAGSqB,uBAHTrB,IAKI3D,SANNS;AAQA,aAAOA,GAAP;AAnB4B,OAoB3B,EApB2B4C,CAA9B;;AA0BA,QACE,CAACe,YAAY,KAAKpE,SAAjBoE,IAA8B,CAACJ,YAAY,CAACI,YAAD,CAA5C,KACA,MAAK,SAAL7B,SAAK,WAALA,mCAAK,CAAEK,MAAP,kEAAeC,KAAf,KAAwB,IAF1B,EAGE;AACA,aAAO,CACLI,MAAM,CAACgC,eAAPhC,CAAuB;AACrBI,kBADqB,EACrBA,UADqB;AAErBK,sBAAc,EAAEqB,qBAFK;AAGrBnB;AAHqB,OAAvBX,CADK,EAML,IANK,CAAP;AAJF,WAYO;AAAA;;AACL,aAAO,CACLA,MAAM,CAACiC,kBAAPjC,wBACEV,KADF,SACEA,SADF,WACEA,GADF,MACEA,GADF,kBACEA,KAAK,CAAEK,MADT,mDACEuC,eAAetC,KADjB,qEAC2BuB,YAD3BnB,EAEE;AACEI,kBADF,EACEA,UADF;AAEEK,sBAAc,EAAEqB,qBAFlB;AAGEnB;AAHF,OAFFX,CADK,EASL,KATK,CAAP;AAxCuE;AAApB,KA0DpD,CAACmB,YAAD,EAAenB,MAAf,EAAuBe,YAAvB,CA1DoD1F,CAAvD;AAAA;AAAA,MAAO8G,gBAAP;AAAA,MAAyBC,0BAAzB;;AA4DA,MAAMC,uBAAuB,GAAGhH,KAAK,CAACqE,MAANrE,CAAaiF,YAAbjF,CAAhC;AAEAA,OAAK,CAACiH,SAANjH,CAAgB,YAAM;AACpBgH,2BAAuB,CAACpC,OAAxBoC,GAAkC/B,YAAlC+B;AADF;AAIA,MAAME,oBAAoB,GAAGF,uBAAuB,CAACpC,OAArD;AAEA,MAAIL,KAAK,GAIPqB,kBAAkB,CAACE,YAAD,CAAlBF,GACKE,YADLF,GAEKkB,gBANP;AAQA,MAAIK,SAAgB,GAAG5C,KAAvB;;AAEA,MACE,CAACpE,YAAY,CAACoE,KAAK,CAACQ,UAAP,EAAmBA,UAAnB,CAAb,IACA,CAAC3E,aAAa,CAAC6E,YAAD,EAAeiC,oBAAf,CAFhB,EAGE;AAEAC,aAAS,GAAGxC,MAAM,CAACyC,2BAAPzC,CAAmCJ,KAAnCI,EAA0C;AACpDI,gBADoD,EACpDA,UADoD;AAEpDK,oBAFoD,EAEpDA,cAFoD;AAGpDE,oBAHoD,EAGpDA,cAHoD;AAIpD+B,qBAAe,EAAE9B,MAAM,CAACzC,IAAPyC,CAAYN,YAAZM,EAA0B+B,MAA1B/B,CACd3C,cAAD;AAAA,eACEsE,oBAAoB,CAACK,cAArBL,CAAoCtE,IAApCsE,KACAjC,YAAY,CAACrC,IAAD,CAAZqC,KAAuBiC,oBAAoB,CAACtE,IAAD,CAF7C;AAAA,OADe2C;AAJmC,KAA1CZ,CAAZwC;AAUD;;AAED,MAAMK,uBAAuB,GAAGxH,KAAK,CAACqE,MAANrE,CAAaiE,KAAb,SAAaA,SAAb,WAAaA,GAAb,MAAaA,QAAK,CAAEK,MAApBtE,CAAhC;AAEAA,OAAK,CAACiH,SAANjH,CAAgB,YAAM;AACpBwH,2BAAuB,CAAC5C,OAAxB4C,GAAkCvD,KAAlC,SAAkCA,SAAlC,WAAkCA,GAAlC,MAAkCA,QAAK,CAAEK,MAAzCkD;AADF,KAEG,CAACvD,KAAD,SAACA,SAAD,WAACA,GAAD,MAACA,QAAK,CAAEK,MAAR,CAFHtE;;AAIA,MAAIiE,KAAJ,SAAIA,SAAJ,WAAIA,SAAK,CAAEK,MAAX,EAAmB;AACjB,QAAMmD,cAAc,GAAGD,uBAAuB,CAAC5C,OAA/C;AAEA,QAAI8C,MAAJ;;AAEA,QACE,OAAOzD,KAAK,CAACK,MAANL,CAAaM,KAApB,KAA8B,QAA9B,IACAN,KAAK,CAACK,MAANL,CAAaM,KAAbN,IAAsB,IADtB,IAEAA,KAAK,CAACK,MAANL,KAAiBwD,cAHnB,EAIE;AAEAC,YAAM,GAAG3H,aAAa,CAAC4H,KAAd5H,CAAoBkE,KAAK,CAACK,MAANL,CAAaM,KAAjCxE,CAAT2H;AANF,WAOO,IACL,OAAOzD,KAAK,CAACK,MAANL,CAAaQ,MAApB,KAA+B,QAA/B,KACER,KAAK,CAACK,MAANL,CAAaO,OAAbP,KAAyB,KAAzBA,IAAkC8C,0BAAlC9C,IACAA,KAAK,CAACK,MAANL,KAAiBwD,cAFnB,CADK,EAIL;AAEAC,YAAM,GAAG3H,aAAa,CAAC6H,QAAd7H,CAAuB;AAC9B6C,YAAI,EAAEqB,KAAK,CAACK,MAANL,CAAaQ,MADW;AAE9BH,cAAM,EAAEL,KAAK,CAACK,MAANL,CAAaK,MAFS;AAG9BuD,YAAI,EAAE5D,KAAK,CAACK,MAANL,CAAa4D;AAHW,OAAvB9H,CAAT2H;AAlBe;;AA0BjB,QAAMI,YAAY,GAAGJ,MAAM,GACvB/C,MAAM,CAACoD,iBAAPpD,CAAyBwC,SAAzBxC,EAAoC+C,MAApC/C,EAA4C;AAC1CI,gBAD0C,EAC1CA,UAD0C;AAE1CK,oBAF0C,EAE1CA,cAF0C;AAG1CE;AAH0C,KAA5CX,CADuB,GAMvB,IANJ;AAQAwC,aAAS,GACPW,YAAY,KAAK,IAAjBA,GACInD,MAAM,CAACiC,kBAAPjC,CAA0BmD,YAA1BnD,EAAwC;AACtCI,gBADsC,EACtCA,UADsC;AAEtCK,oBAFsC,EAEtCA,cAFsC;AAGtCE;AAHsC,KAAxCX,CADJmD,GAMIX,SAPNA;AAQD;;AAED,MAAMa,YAAY,GAAGzD,KAAK,KAAK4C,SAA/B;AAEA5F,mBAAiB,CAAC,YAAM;AACtB,QAAIyG,YAAJ,EAAkB;AAEhB9B,cAAQ,CAACiB,SAAD,CAARjB;AACD;AAJc,IAAjB3E;AAUAgD,OAAK,GAAG4C,SAAR5C;AAEAvE,OAAK,CAACiH,SAANjH,CAAgB,YAAM;AACpBmG,UAAM,CAACnC,YAAD,CAANmC;;AAEA,QAAI,CAACE,YAAY,EAAjB,EAAqB;AAInBH,cAAQ,CAACiB,SAAD,CAARjB;AACD;;AAED,WAAO,YAAM;AAKX+B,gBAAU,CAAC,YAAM;AACf,YAAIlC,eAAe,OAAOrE,SAAtBqE,IAAmCK,MAAM,OAAOpC,YAApD,EAAkE;AAChEuC,sBAAY;AACb;AAHO,SAIP,CAJO,CAAV0B;AALF;AAVF,KAsBG,EAtBHjI;AA2BA,MAAMkI,mBAAmB,GAAGlI,KAAK,CAACqE,MAANrE,EAA5B;AACAkI,qBAAmB,CAACtD,OAApBsD,GAA8BpB,gBAA9BoB;AAEA,MAAMlC,QAAQ,GAAGhG,KAAK,CAAC2F,WAAN3F,CAAkB,YAAa;AAC9C,QAAM8F,YAAY,GAAGC,eAAe,EAApC;AAEA,WAAOH,kBAAkB,CAACE,YAAD,CAAlBF,GACFE,YADEF,GAEFsC,mBAAmB,CAACtD,OAFzB;AAHe,KAMd,CAACmB,eAAD,EAAkBH,kBAAlB,CANc5F,CAAjB;AAQA,MAAMmI,OAAO,GAAGrH,eAAe,CAAuBsH,WAAD,EAAO;AAAA;;AAC1D,QAAIrD,UAAU,GAAG,EAAjB;AAEA,QAAId,KAAJ;;AAEA,QAAImE,CAAC,CAACC,MAAN,EAAc;AAAA;;AACZpE,WAAK,GAAGM,KAAK,CAAC+D,MAAN/D,CAAagE,IAAbhE,CAAmBN,eAAD;AAAA,eAAWA,KAAK,CAACxC,GAANwC,KAAcmE,CAAC,CAACC,MAA3B;AAAA,OAAlB9D,CAARN;;AAEA,oBAAIA,KAAJ,mCAAIuE,OAAO5F,IAAX,EAAiB;AACfmC,kBAAU,CAAClC,IAAXkC,CAAgBd,KAAK,CAACrB,IAAtBmC;AACD;AALH,WAMO;AACLd,WAAK,GAAGM,KAAK,CAAC+D,MAAN/D,CAAaA,KAAK,CAACkE,KAAnBlE,CAARN;AACAc,gBAAU,CAAClC,IAAXkC,iBAAU,qBACLQ,MAAM,CAACzC,IAAPyC,CAAYT,OAAZS,EAAqB+B,MAArB/B,CAA6B3C,cAAD;AAAA;;AAAA,eAAU,uBAAK,IAAL,0CAAOA,IAAP,MAAgBA,IAA1B;AAA5B,QADK,EAAVmC;AAGD;;AAED,QAAId,KAAK,IAAI,IAAb,EAAmB;AACjB;AACD;;AAED,QAAMyE,UAAU,GAAGC,WAAW,CAAC1E,KAAK,CAACxC,GAAP,CAAXkH,CAAuBD,UAA1C;;AAEA,QAAME,SAAS,GAAI,YAChBC,MADgB,gCAGZ,CACD1E,eADC,4BAEEY,UAAU,CAACC,GAAXD,CAAgBnC,cAAD,EAAU;AAC1B,UAAQgG,SAAR,GAAsB9D,OAAO,CAAClC,IAAD,CAAPkC,CAAcvC,KAApC,CAAQqG,SAAR;AACA,aAAOA,SAAP;AAFC,MAFF,GAMD5D,GANC,CAMI4D,mBAAD,EAAe;AACnB,UAAM5D,GAAG,GACP,OAAO4D,SAAP,KAAqB,UAArB,GACIA,SAAS,CAAC;AAAE3E,aAAK,EAAEA,KAAT;AAAuByE;AAAvB,OAAD,CADb,GAEIE,SAHN;AAKA,aAAO5D,GAAG,GACNO,MAAM,CAACzC,IAAPyC,CAAYP,GAAZO,EACG+B,MADH/B,CACWjD,cAAD;AAAA,eAAUA,IAAI,KAAK8F,CAAC,CAAC9F,IAArB;AAAA,OADViD,EAEGP,GAFHO,CAEQjD,cAAD;AAAA,eAAU0C,GAAV,SAAUA,OAAV,WAAUA,GAAV,MAAUA,MAAG,CAAG1C,IAAH,CAAb;AAAA,OAFPiD,CADM,GAIN7D,SAJJ;AAZC,MAHY,GAwBhB4F,MAxBgB,CAwBT,UAACwB,EAAD,EAAKC,CAAL,EAAQC,IAAR;AAAA,aAAiBF,EAAE,IAAIE,IAAI,CAACC,WAALD,CAAiBF,EAAjBE,MAAyBD,CAAhD;AAAA,KAxBS,CAAnB;;AA0BAH,aAAS,CAACrF,OAAVqF,CAAmBM,kBAAD;AAAA,aAAcA,QAAd,SAAcA,YAAd,WAAcA,GAAd,MAAcA,WAAQ,CAAGd,CAAH,CAAtB;AAAA,KAAlBQ;AAlD6B,IAA/B;AAqDA5H,gBAAc,CAAC;AAAEuD,SAAF,EAAEA,KAAF;AAAS4D;AAAT,GAAD,CAAdnH;AAEAhB,OAAK,CAACiH,SAANjH,CAAgB,YAAM;AACpBmI,WAAO,CAACgB,IAARhB,CAAa;AAAE7F,UAAI,EAAE,OAAR;AAAiB8G,UAAI,EAAE;AAAE7E;AAAF;AAAvB,KAAb4D;AADF,KAEG,CAACA,OAAD,EAAU5D,KAAV,CAFHvE;;AAIA,2BAAmDU,iBAAiB,EAApE;AAAA,MAAmB2I,cAAnB,sBAAQT,SAAR;AAAA,MAAmCU,WAAnC,sBAAmCA,WAAnC;;AAEA,8BAA6CrI,sBAAsB,EAAnE;AAAA,MAAQsI,cAAR,yBAAQA,cAAR;AAAA,MAAwBC,gBAAxB,yBAAwBA,gBAAxB;;AAEA,MAAMC,QAAQ,GAAGtI,WAAW,CAAC;AAC3BwD,UAD2B,EAC3BA,MAD2B;AAE3BqB,YAF2B,EAE3BA,QAF2B;AAG3BE,YAH2B,EAG3BA,QAH2B;AAI3BzE,OAAG,EAAEwC,KAAF,SAAEA,SAAF,WAAEA,GAAF,MAAEA,QAAK,CAAExC,GAJe;AAK3BiI,mBAAe,EAAEL,cAAc,CAAC3B,MALL;AAM3BiC,yBAAqB,EAAEJ,cAAc,CAACK,YANX;AAO3BC,uBAAmB,EAAE;AACnB9E,gBADmB,EACnBA,UADmB;AAEnBK,oBAFmB,EAEnBA,cAFmB;AAGnBE;AAHmB,KAPM;AAY3B6C;AAZ2B,GAAD,CAA5B;AAeA,MAAM2B,YAAY,GAAGzI,eAAe,CAAC;AACnCsD,UADmC,EACnCA,MADmC;AAEnClD,OAAG,EAAEwC,KAAF,SAAEA,SAAF,WAAEA,GAAF,MAAEA,QAAK,CAAExC,GAFuB;AAGnCuE,YAHmC,EAGnCA,QAHmC;AAInCE;AAJmC,GAAD,CAApC;AAOA,MAAMwC,UAAU,GAAGxH,oBAAoB,CAKrC;AACAuI,YADA,EACAA,QADA;AAEAzD,YAFA,EAEAA,QAFA;AAGAmC,WAHA,EAGAA,OAHA;AAIAxD;AAJA,GALqC,CAAvC;AAYA5D,oCAAkC,CAAC;AACjC2H,cADiC,EACjCA,UADiC;AAEjCqB,oBAAgB,EAAEV,cAAc,CAACW;AAFA,GAAD,CAAlCjJ;AAKAK,eAAa,CAAC;AACZ4E,YADY,EACZA,QADY;AAEZiE,qBAAiB,EAAEV,cAAc,CAACvD;AAFtB,GAAD,CAAb5E;AAKA,MAAMuH,WAAW,GAAG9H,cAAc,CAKhC;AACA0D,SADA,EACAA,KADA;AAEAO,WAFA,EAEAA,OAFA;AAGA4D,cAHA,EAGAA,UAHA;AAIAzF,iBAAa,EAAEF,OAAO,CAACE,aAJvB;AAKAiH,wBAAoB,EAAEnH,OAAO,CAACmH,oBAL9B;AAMAT,YANA,EAMAA,QANA;AAOAzD,YAPA,EAOAA,QAPA;AAQAE,YARA,EAQAA,QARA;AASA4D,gBATA,EASAA,YATA;AAUAR,eAVA,EAUAA,WAVA;AAWAE,oBAXA,EAWAA,gBAXA;AAYA7E,UAZA,EAYAA,MAZA;AAcAwD;AAdA,GALgC,CAAlC;AAsBAvH,kBAAgB,CAAC;AACf2D,SADe,EACfA,KADe;AAEfmE,cAFe,EAEfA,UAFe;AAGfC;AAHe,GAAD,CAAhB/H;AAMA,MAAMuJ,iBAAiB,GAAGxJ,YAAY,CAACN,wBAAwB,CAAC+J,QAA1B,EAAoC;AACxEC,SAAK,EAAE3B;AADiE,GAApC,CAAtC;AAIA,SAAO;AACLnE,SADK,EACLA,KADK;AAELmE,cAFK,EAELA,UAFK;AAGLC,eAHK,EAGLA,WAHK;AAILwB;AAJK,GAAP;AAMD","names":["CommonActions","React","isValidElementType","Group","isArrayEqual","isRecordEqual","NavigationHelpersContext","NavigationRouteContext","NavigationStateContext","Screen","PrivateValueStore","useChildListeners","useComponent","useCurrentRender","useDescriptors","useEventEmitter","useFocusedListenersChildrenAdapter","useFocusEvents","useKeyedChildListeners","useNavigationHelpers","useOnAction","useOnGetState","useOnRouteFocus","useRegisterNavigator","useScheduleUpdate","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","configs","Children","toArray","reduce","acc","child","isValidElement","type","props","navigationKey","Error","JSON","stringify","name","push","keys","options","Fragment","screenOptions","_child$type","String","process","env","NODE_ENV","forEach","config","component","getComponent","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","route","useContext","screenListeners","rest","useRef","params","state","initial","screen","initialRouteName","router","current","routeConfigs","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","Object","getId","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getCurrentState","getState","setCurrentState","setState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","useMemo","initialRouteParamList","initialParamsFromParams","getInitialState","getRehydratedState","_route$params5","initializedState","isFirstStateInitialization","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","getStateForRouteNamesChange","routeKeyChanges","filter","hasOwnProperty","previousNestedParamsRef","previousParams","action","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","routes","find","_route","index","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","focusedListeners","focus","getStateListeners","defaultScreenOptions","NavigationContent","Provider","value"],"sources":["useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}