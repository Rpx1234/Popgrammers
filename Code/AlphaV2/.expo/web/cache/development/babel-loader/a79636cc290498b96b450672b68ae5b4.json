{"ast":null,"code":"export default function memoize(callback) {\n  var previous;\n  var result;\n  return function () {\n    var hasChanged = false;\n\n    for (var _len = arguments.length, dependencies = new Array(_len), _key = 0; _key < _len; _key++) {\n      dependencies[_key] = arguments[_key];\n    }\n\n    if (previous) {\n      if (previous.length !== dependencies.length) {\n        hasChanged = true;\n      } else {\n        for (var i = 0; i < previous.length; i++) {\n          if (previous[i] !== dependencies[i]) {\n            hasChanged = true;\n            break;\n          }\n        }\n      }\n    } else {\n      hasChanged = true;\n    }\n\n    previous = dependencies;\n\n    if (hasChanged || result === undefined) {\n      result = callback.apply(void 0, dependencies);\n    }\n\n    return result;\n  };\n}","map":{"version":3,"mappings":"AAAA,eAAe,SAASA,OAAT,CACbC,QADa,EAEb;AACA,MAAIC,QAAJ;AACA,MAAIC,MAAJ;AAEA,SAAO,YAAmC;AACxC,QAAIC,UAAU,GAAG,KAAjB;;AADwC,sCAA/BC,YAA+B;AAA/BA,kBAA+B,MAA/BA,GAA+BC,eAA/BD;AAA+B;;AAGxC,QAAIH,QAAJ,EAAc;AACZ,UAAIA,QAAQ,CAACK,MAATL,KAAoBG,YAAY,CAACE,MAArC,EAA6C;AAC3CH,kBAAU,GAAG,IAAbA;AADF,aAEO;AACL,aAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAAQ,CAACK,MAA7B,EAAqCC,CAAC,EAAtC,EAA0C;AACxC,cAAIN,QAAQ,CAACM,CAAD,CAARN,KAAgBG,YAAY,CAACG,CAAD,CAAhC,EAAqC;AACnCJ,sBAAU,GAAG,IAAbA;AACA;AACD;AACF;AACF;AAVH,WAWO;AACLA,gBAAU,GAAG,IAAbA;AACD;;AAEDF,YAAQ,GAAGG,YAAXH;;AAEA,QAAIE,UAAU,IAAID,MAAM,KAAKM,SAA7B,EAAwC;AACtCN,YAAM,GAAGF,QAAQ,MAARA,SAAYI,YAAZJ,CAATE;AACD;;AAED,WAAOA,MAAP;AAxBF;AA0BD","names":["memoize","callback","previous","result","hasChanged","dependencies","arguments","length","i","undefined"],"sources":["memoize.tsx"],"sourcesContent":["export default function memoize<Result, Deps extends readonly any[]>(\n  callback: (...deps: Deps) => Result\n) {\n  let previous: Deps | undefined;\n  let result: Result | undefined;\n\n  return (...dependencies: Deps): Result => {\n    let hasChanged = false;\n\n    if (previous) {\n      if (previous.length !== dependencies.length) {\n        hasChanged = true;\n      } else {\n        for (let i = 0; i < previous.length; i++) {\n          if (previous[i] !== dependencies[i]) {\n            hasChanged = true;\n            break;\n          }\n        }\n      }\n    } else {\n      hasChanged = true;\n    }\n\n    previous = dependencies;\n\n    if (hasChanged || result === undefined) {\n      result = callback(...dependencies);\n    }\n\n    return result;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}