{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nexport default function useOnRouteFocus(_ref) {\n  var router = _ref.router,\n      getState = _ref.getState,\n      sourceRouteKey = _ref.key,\n      setState = _ref.setState;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onRouteFocusParent = _React$useContext.onRouteFocus;\n\n  return React.useCallback(function (key) {\n    var state = getState();\n    var result = router.getStateForRouteFocus(state, key);\n\n    if (result !== state) {\n      setState(result);\n    }\n\n    if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n      onRouteFocusParent(sourceRouteKey);\n    }\n  }, [getState, onRouteFocusParent, router, setState, sourceRouteKey]);\n}","map":{"version":3,"mappings":"AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,wBAAP;AAcA,eAAe,SAASC,eAAT,OAKK;AAAA,MAJlBC,MAIkB,QAJlBA,MAIkB;AAAA,MAHlBC,QAGkB,QAHlBA,QAGkB;AAAA,MAFbC,cAEa,QAFlBC,GAEkB;AAAA,MADlBC,QACkB,QADlBA,QACkB;;AAClB,0BAA6CP,KAAK,CAACQ,UAANR,CAC3CC,wBAD2CD,CAA7C;AAAA,MAAsBS,kBAAtB,qBAAQC,YAAR;;AAIA,SAAOV,KAAK,CAACW,WAANX,CACJM,aAAD,EAAiB;AACf,QAAMM,KAAK,GAAGR,QAAQ,EAAtB;AACA,QAAMS,MAAM,GAAGV,MAAM,CAACW,qBAAPX,CAA6BS,KAA7BT,EAAoCG,GAApCH,CAAf;;AAEA,QAAIU,MAAM,KAAKD,KAAf,EAAsB;AACpBL,cAAQ,CAACM,MAAD,CAARN;AACD;;AAED,QAAIE,kBAAkB,KAAKM,SAAvBN,IAAoCJ,cAAc,KAAKU,SAA3D,EAAsE;AACpEN,wBAAkB,CAACJ,cAAD,CAAlBI;AACD;AAXE,KAaL,CAACL,QAAD,EAAWK,kBAAX,EAA+BN,MAA/B,EAAuCI,QAAvC,EAAiDF,cAAjD,CAbKL,CAAP;AAeD","names":["React","NavigationBuilderContext","useOnRouteFocus","router","getState","sourceRouteKey","key","setState","useContext","onRouteFocusParent","onRouteFocus","useCallback","state","result","getStateForRouteFocus","undefined"],"sources":["useOnRouteFocus.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\n\ntype Options<Action extends NavigationAction> = {\n  router: Router<NavigationState, Action>;\n  getState: () => NavigationState;\n  setState: (state: NavigationState) => void;\n  key?: string;\n};\n\n/**\n * Hook to handle focus actions for a route.\n * Focus action needs to be treated specially, coz when a nested route is focused,\n * the parent navigators also needs to be focused.\n */\nexport default function useOnRouteFocus<Action extends NavigationAction>({\n  router,\n  getState,\n  key: sourceRouteKey,\n  setState,\n}: Options<Action>) {\n  const { onRouteFocus: onRouteFocusParent } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  return React.useCallback(\n    (key: string) => {\n      const state = getState();\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (result !== state) {\n        setState(result);\n      }\n\n      if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n        onRouteFocusParent(sourceRouteKey);\n      }\n    },\n    [getState, onRouteFocusParent, router, setState, sourceRouteKey]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}