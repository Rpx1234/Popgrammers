"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDevServerMiddleware = void 0;
const cli_server_api_1 = require("@react-native-community/cli-server-api");
const body_parser_1 = __importDefault(require("body-parser"));
const middlwareMutations_1 = require("../middlwareMutations");
const clientLogsMiddleware_1 = __importDefault(require("./clientLogsMiddleware"));
const createJsInspectorMiddleware_1 = __importDefault(require("./createJsInspectorMiddleware"));
const remoteDevtoolsCorsMiddleware_1 = require("./remoteDevtoolsCorsMiddleware");
const remoteDevtoolsSecurityHeadersMiddleware_1 = require("./remoteDevtoolsSecurityHeadersMiddleware");
const suppressErrorMiddleware_1 = require("./suppressErrorMiddleware");
/**
 * Extends the default `createDevServerMiddleware` and adds some Expo CLI-specific dev middleware
 * with exception for the manifest middleware which is currently in `xdl`.
 *
 * Adds:
 * - `/logs`: pipe runtime `console` logs to the `props.logger` object.
 * - `/inspector`: launch hermes inspector proxy in chrome.
 * - CORS support for remote devtools
 * - body parser middleware
 *
 * @param props.watchFolders array of directory paths to use with watchman
 * @param props.port port that the dev server will run on
 * @param props.logger bunyan instance that all runtime `console` logs will be piped through.
 *
 * @returns
 */
function createDevServerMiddleware({ watchFolders, port, logger, }) {
    const { middleware, attachToServer } = cli_server_api_1.createDevServerMiddleware({
        port,
        watchFolders,
    });
    // securityHeadersMiddleware does not support cross-origin requests for remote devtools to get the sourcemap.
    // We replace with the enhanced version.
    middlwareMutations_1.replaceMiddlewareWith(middleware, cli_server_api_1.securityHeadersMiddleware, remoteDevtoolsSecurityHeadersMiddleware_1.remoteDevtoolsSecurityHeadersMiddleware);
    middleware.use(remoteDevtoolsCorsMiddleware_1.remoteDevtoolsCorsMiddleware);
    middlwareMutations_1.prependMiddleware(middleware, suppressErrorMiddleware_1.suppressRemoteDebuggingErrorMiddleware);
    middleware.use(body_parser_1.default.json());
    middleware.use('/logs', clientLogsMiddleware_1.default(logger));
    middleware.use('/inspector', createJsInspectorMiddleware_1.default());
    return { middleware, attachToServer, logger };
}
exports.createDevServerMiddleware = createDevServerMiddleware;
//# sourceMappingURL=devServerMiddleware.js.map