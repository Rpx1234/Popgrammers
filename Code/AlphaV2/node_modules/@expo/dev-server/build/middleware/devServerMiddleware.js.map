{"version":3,"file":"devServerMiddleware.js","sourceRoot":"","sources":["../../src/middleware/devServerMiddleware.ts"],"names":[],"mappings":";;;;;;AACA,2EAGgD;AAChD,8DAAqC;AAGrC,8DAAiF;AACjF,kFAA0D;AAC1D,gGAAwE;AACxE,iFAA8E;AAC9E,uGAAoG;AACpG,uEAAmF;AAMnF;;;;;;;;;;;;;;;GAeG;AACH,SAAgB,yBAAyB,CAAC,EACxC,YAAY,EACZ,IAAI,EACJ,MAAM,GAKP;IACC,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,0CAAoC,CAAC;QAC1E,IAAI;QACJ,YAAY;KACb,CAAC,CAAC;IAEH,6GAA6G;IAC7G,wCAAwC;IACxC,0CAAqB,CACnB,UAA2B,EAC3B,0CAAyB,EACzB,iFAAuC,CACxC,CAAC;IACF,UAAU,CAAC,GAAG,CAAC,2DAA4B,CAAC,CAAC;IAC7C,sCAAiB,CAAC,UAAU,EAAE,gEAAsC,CAAC,CAAC;IAEtE,UAAU,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;IAClC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,8BAAoB,CAAC,MAAM,CAAC,CAAC,CAAC;IACtD,UAAU,CAAC,GAAG,CAAC,YAAY,EAAE,qCAA2B,EAAE,CAAC,CAAC;IAE5D,OAAO,EAAE,UAAU,EAAE,cAAc,EAAE,MAAM,EAAE,CAAC;AAChD,CAAC;AA7BD,8DA6BC","sourcesContent":["import type Log from '@expo/bunyan';\nimport {\n  createDevServerMiddleware as createReactNativeDevServerMiddleware,\n  securityHeadersMiddleware,\n} from '@react-native-community/cli-server-api';\nimport bodyParser from 'body-parser';\nimport type { Server as ConnectServer } from 'connect';\n\nimport { prependMiddleware, replaceMiddlewareWith } from '../middlwareMutations';\nimport clientLogsMiddleware from './clientLogsMiddleware';\nimport createJsInspectorMiddleware from './createJsInspectorMiddleware';\nimport { remoteDevtoolsCorsMiddleware } from './remoteDevtoolsCorsMiddleware';\nimport { remoteDevtoolsSecurityHeadersMiddleware } from './remoteDevtoolsSecurityHeadersMiddleware';\nimport { suppressRemoteDebuggingErrorMiddleware } from './suppressErrorMiddleware';\n\nexport type AttachToServerFunction = ReturnType<\n  typeof createReactNativeDevServerMiddleware\n>['attachToServer'];\n\n/**\n * Extends the default `createDevServerMiddleware` and adds some Expo CLI-specific dev middleware\n * with exception for the manifest middleware which is currently in `xdl`.\n *\n * Adds:\n * - `/logs`: pipe runtime `console` logs to the `props.logger` object.\n * - `/inspector`: launch hermes inspector proxy in chrome.\n * - CORS support for remote devtools\n * - body parser middleware\n *\n * @param props.watchFolders array of directory paths to use with watchman\n * @param props.port port that the dev server will run on\n * @param props.logger bunyan instance that all runtime `console` logs will be piped through.\n *\n * @returns\n */\nexport function createDevServerMiddleware({\n  watchFolders,\n  port,\n  logger,\n}: {\n  watchFolders: readonly string[];\n  port: number;\n  logger: Log;\n}): { middleware: ConnectServer; attachToServer: AttachToServerFunction; logger: Log } {\n  const { middleware, attachToServer } = createReactNativeDevServerMiddleware({\n    port,\n    watchFolders,\n  });\n\n  // securityHeadersMiddleware does not support cross-origin requests for remote devtools to get the sourcemap.\n  // We replace with the enhanced version.\n  replaceMiddlewareWith(\n    middleware as ConnectServer,\n    securityHeadersMiddleware,\n    remoteDevtoolsSecurityHeadersMiddleware\n  );\n  middleware.use(remoteDevtoolsCorsMiddleware);\n  prependMiddleware(middleware, suppressRemoteDebuggingErrorMiddleware);\n\n  middleware.use(bodyParser.json());\n  middleware.use('/logs', clientLogsMiddleware(logger));\n  middleware.use('/inspector', createJsInspectorMiddleware());\n\n  return { middleware, attachToServer, logger };\n}\n"]}