{"version":3,"sources":["../src/XDLError.ts"],"names":["ERROR_PREFIX","XDLError","Error","constructor","code","message","startsWith","substring","length","isXDLError"],"mappings":";;;;;;;;;AAEA,MAAMA,YAAY,GAAG,SAArB;;AAEe,MAAMC,QAAN,SAAuBC,KAAvB,CAA6B;AAM1CC,EAAAA,WAAW,CAACC,IAAD,EAAkBC,OAAlB,EAAmC;AAC5C,UAAM,EAAN,EAD4C,CAG5C;AACA;;AAJ4C,kCAL9B,UAK8B;;AAAA;;AAAA;;AAK5C,QAAIA,OAAO,CAACC,UAAR,CAAmBN,YAAnB,CAAJ,EAAsC;AACpCK,MAAAA,OAAO,GAAGA,OAAO,CAACE,SAAR,CAAkBP,YAAY,CAACQ,MAA/B,CAAV;AACD;;AAED,SAAKH,OAAL,GAAeA,OAAf;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKK,UAAL,GAAkB,IAAlB;AACD;;AAlByC","sourcesContent":["import { ErrorCode } from './internal';\n\nconst ERROR_PREFIX = 'Error: ';\n\nexport default class XDLError extends Error {\n  readonly name = 'XDLError';\n\n  code: string;\n  isXDLError: true;\n\n  constructor(code: ErrorCode, message: string) {\n    super('');\n\n    // If e.toString() was called to get `message` we don't want it to look\n    // like \"Error: Error:\".\n    if (message.startsWith(ERROR_PREFIX)) {\n      message = message.substring(ERROR_PREFIX.length);\n    }\n\n    this.message = message;\n    this.code = code;\n    this.isXDLError = true;\n  }\n}\n"],"file":"XDLError.js"}