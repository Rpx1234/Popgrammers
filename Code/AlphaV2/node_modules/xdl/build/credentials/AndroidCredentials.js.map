{"version":3,"sources":["../../src/credentials/AndroidCredentials.ts"],"names":["log","logger","global","exportCertBinary","keystorePath","keystorePassword","keyAlias","certFile","err","code","warn","info","stdout","stderr","error","exportCertBase64","logKeystoreHashes","keystoreInfo","linePrefix","data","fs","readFile","googleHash","crypto","createHash","update","digest","toUpperCase","googleHash256","fbHash","replace","unlink","createKeystore","keyPassword","androidPackage","generateUploadKeystore","uploadKeystorePath","experienceName","keystoreData","Buffer","from","toString"],"mappings":"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","sourcesContent":["import spawnAsync, { SpawnResult } from '@expo/spawn-async';\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { Logger as logger } from '../internal';\n\nconst log = logger.global;\n\nexport type Keystore = {\n  keystore: string;\n  keystorePassword: string;\n  keyPassword: string;\n  keyAlias: string;\n};\n\nexport type KeystoreInfo = {\n  keystorePath: string;\n  keystorePassword: string;\n  keyPassword: string;\n  keyAlias: string;\n};\n\nasync function exportCertBinary(\n  {\n    keystorePath,\n    keystorePassword,\n    keyAlias,\n  }: Pick<KeystoreInfo, 'keystorePath' | 'keystorePassword' | 'keyAlias'>,\n  certFile: string\n): Promise<SpawnResult> {\n  try {\n    return spawnAsync('keytool', [\n      '-exportcert',\n      '-keystore',\n      keystorePath,\n      '-storepass',\n      keystorePassword,\n      '-alias',\n      keyAlias,\n      '-file',\n      certFile,\n      '-noprompt',\n      '-storetype',\n      'JKS',\n    ]);\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      log.warn('Are you sure you have keytool installed?');\n      log.info('keytool is a part of OpenJDK: https://openjdk.java.net/');\n      log.info('Also make sure that keytool is in your PATH after installation.');\n    }\n    if (err.stdout) {\n      log.info(err.stdout);\n    }\n    if (err.stderr) {\n      log.error(err.stderr);\n    }\n    throw err;\n  }\n}\n\nexport async function exportCertBase64(\n  {\n    keystorePath,\n    keystorePassword,\n    keyAlias,\n  }: Pick<KeystoreInfo, 'keystorePath' | 'keystorePassword' | 'keyAlias'>,\n  certFile: string\n): Promise<SpawnResult> {\n  try {\n    return spawnAsync('keytool', [\n      '-export',\n      '-rfc',\n      '-keystore',\n      keystorePath,\n      '-storepass',\n      keystorePassword,\n      '-alias',\n      keyAlias,\n      '-file',\n      certFile,\n      '-noprompt',\n      '-storetype',\n      'JKS',\n    ]);\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      log.warn('Are you sure you have keytool installed?');\n      log.info('keytool is a part of OpenJDK: https://openjdk.java.net/');\n      log.info('Also make sure that keytool is in your PATH after installation.');\n    }\n    if (err.stdout) {\n      log.info(err.stdout);\n    }\n    if (err.stderr) {\n      log.error(err.stderr);\n    }\n    throw err;\n  }\n}\n\nexport async function logKeystoreHashes(keystoreInfo: KeystoreInfo, linePrefix: string = '') {\n  const { keystorePath } = keystoreInfo;\n  const certFile = `${keystorePath}.cer`;\n  try {\n    await exportCertBinary(keystoreInfo, certFile);\n    const data = await fs.readFile(certFile);\n    const googleHash = crypto.createHash('sha1').update(data).digest('hex').toUpperCase();\n    const googleHash256 = crypto.createHash('sha256').update(data).digest('hex').toUpperCase();\n    const fbHash = crypto.createHash('sha1').update(data).digest('base64');\n    log.info(\n      `${linePrefix}Google Certificate Fingerprint:     ${googleHash.replace(\n        /(.{2}(?!$))/g,\n        '$1:'\n      )}`\n    );\n    log.info(`${linePrefix}Google Certificate Hash (SHA-1):    ${googleHash}`);\n    log.info(`${linePrefix}Google Certificate Hash (SHA-256):  ${googleHash256}`);\n    log.info(`${linePrefix}Facebook Key Hash:                  ${fbHash}`);\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      log.warn('Are you sure you have keytool installed?');\n      log.info('keytool is a part of OpenJDK: https://openjdk.java.net/');\n      log.info('Also make sure that keytool is in your PATH after installation.');\n    }\n    if (err.stdout) {\n      log.info(err.stdout);\n    }\n    if (err.stderr) {\n      log.error(err.stderr);\n    }\n    throw err;\n  } finally {\n    try {\n      await fs.unlink(certFile);\n    } catch (err) {\n      if (err.code !== 'ENOENT') {\n        log.error(err);\n      }\n    }\n  }\n}\n\nasync function createKeystore(\n  { keystorePath, keystorePassword, keyAlias, keyPassword }: KeystoreInfo,\n  androidPackage: string\n): Promise<SpawnResult> {\n  try {\n    return await spawnAsync('keytool', [\n      '-genkey',\n      '-v',\n      '-storetype',\n      'JKS',\n      '-storepass',\n      keystorePassword,\n      '-keypass',\n      keyPassword,\n      '-keystore',\n      keystorePath,\n      '-alias',\n      keyAlias,\n      '-keyalg',\n      'RSA',\n      '-keysize',\n      '2048',\n      '-validity',\n      '10000',\n      '-dname',\n      `CN=${androidPackage},OU=,O=,L=,S=,C=US`,\n    ]);\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      log.warn('Are you sure you have keytool installed?');\n      log.info('keytool is a part of OpenJDK: https://openjdk.java.net/');\n      log.info('Also make sure that keytool is in your PATH after installation.');\n    }\n    if (err.stdout) {\n      log.info(err.stdout);\n    }\n    if (err.stderr) {\n      log.error(err.stderr);\n    }\n    throw err;\n  }\n}\n\nexport async function generateUploadKeystore(\n  uploadKeystorePath: string,\n  androidPackage: string,\n  experienceName: string\n): Promise<KeystoreInfo> {\n  const keystoreData = {\n    keystorePassword: uuidv4().replace(/-/g, ''),\n    keyPassword: uuidv4().replace(/-/g, ''),\n    keyAlias: Buffer.from(experienceName).toString('base64'),\n    keystorePath: uploadKeystorePath,\n  };\n  await createKeystore(keystoreData, androidPackage);\n  return keystoreData;\n}\n"],"file":"AndroidCredentials.js"}