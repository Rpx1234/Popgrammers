{"version":3,"sources":["../../src/start/watchBabelConfig.ts"],"names":["watchingFiles","getProjectBabelConfigFile","projectRoot","resolveFrom","silent","watchBabelConfigForProject","configPath","watchBabelConfig","includes","push","configName","path","relative","cur","prev","size","ProjectUtils","logInfo","chalk","bold"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA;AACA,MAAMA,aAAuB,GAAG,EAAhC;AAEA;AACA;AACA;;AACO,SAASC,yBAAT,CAAmCC,WAAnC,EAA4E;AACjF,SACEC,uBAAYC,MAAZ,CAAmBF,WAAnB,EAAgC,mBAAhC,KACAC,uBAAYC,MAAZ,CAAmBF,WAAnB,EAAgC,YAAhC,CADA,IAEAC,uBAAYC,MAAZ,CAAmBF,WAAnB,EAAgC,eAAhC,CAHF;AAKD;;AAEM,SAASG,0BAAT,CAAoCH,WAApC,EAAyD;AAC9D,QAAMI,UAAU,GAAGL,yBAAyB,CAACC,WAAD,CAA5C;;AACA,MAAII,UAAJ,EAAgB;AACd,WAAOC,gBAAgB,CAACL,WAAD,EAAcI,UAAd,CAAvB;AACD;;AACD,SAAOA,UAAP;AACD;AAED;AACA;AACA;;;AACO,SAASC,gBAAT,CAA0BL,WAA1B,EAA+CI,UAA/C,EAAyE;AAC9E,MAAIN,aAAa,CAACQ,QAAd,CAAuBF,UAAvB,CAAJ,EAAwC;AACtC;AACD;;AAEDN,EAAAA,aAAa,CAACS,IAAd,CAAmBH,UAAnB;;AACA,QAAMI,UAAU,GAAGC,gBAAKC,QAAL,CAAcV,WAAd,EAA2BI,UAA3B,CAAnB;;AACA,uBAAUA,UAAV,EAAsB,CAACO,GAAD,EAAWC,IAAX,KAAyB;AAC7C,QAAIA,IAAI,CAACC,IAAL,IAAaF,GAAG,CAACE,IAArB,EAA2B;AACzBC,+BAAaC,OAAb,CACEf,WADF,EAEE,MAFF,EAGG,+BAA8BgB,iBAAMC,IAAN,CAC7BT,UAD6B,CAE7B,8CALJ;AAOD;AACF,GAVD;AAWD","sourcesContent":["import chalk from 'chalk';\nimport { watchFile } from 'fs';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { ProjectUtils } from '../internal';\n\n// List of files that are being observed.\nconst watchingFiles: string[] = [];\n\n/**\n * Get the babel configuration file for the project.\n */\nexport function getProjectBabelConfigFile(projectRoot: string): string | undefined {\n  return (\n    resolveFrom.silent(projectRoot, './babel.config.js') ||\n    resolveFrom.silent(projectRoot, './.babelrc') ||\n    resolveFrom.silent(projectRoot, './.babelrc.js')\n  );\n}\n\nexport function watchBabelConfigForProject(projectRoot: string) {\n  const configPath = getProjectBabelConfigFile(projectRoot);\n  if (configPath) {\n    return watchBabelConfig(projectRoot, configPath);\n  }\n  return configPath;\n}\n\n/**\n * Watch the babel configuration file and warn to reload the CLI if it changes.\n */\nexport function watchBabelConfig(projectRoot: string, configPath: string): void {\n  if (watchingFiles.includes(configPath)) {\n    return;\n  }\n\n  watchingFiles.push(configPath);\n  const configName = path.relative(projectRoot, configPath);\n  watchFile(configPath, (cur: any, prev: any) => {\n    if (prev.size || cur.size) {\n      ProjectUtils.logInfo(\n        projectRoot,\n        'expo',\n        `\\u203A Detected a change in ${chalk.bold(\n          configName\n        )}. Restart the server to see the new results.`\n      );\n    }\n  });\n}\n"],"file":"watchBabelConfig.js"}