{"version":3,"sources":["../../src/start/startLegacyReactNativeServerAsync.ts"],"names":["treekillAsync","treekill","METRO_VERBOSE_WARNING","NODE_12_WINDOWS_METRO_ERROR","NODE_12_WINDOWS_METRO_SUGGESTION","_logPackagerOutput","projectRoot","level","data","output","toString","_isIgnorableDuplicateModuleWarning","ProjectUtils","logDebug","_isIgnorableMetroConsoleOutput","_isIgnorableRnpmWarning","includes","logError","replace","test","logInfo","startsWith","reactNativeNodeModulesPath","path","join","reactNativeNodeModulesPattern","reactNativeNodeModulesCollisionRegex","RegExp","startReactNativeServerAsync","options","exp","verbose","stopReactNativeServerAsync","Watchman","addToPathAsync","unblockAndGetVersionAsync","packagerPort","metroPort","customLogReporterPath","require","resolve","__dirname","sourceExtsConfig","isTS","isReact","isModern","sourceExts","target","packagerOpts","port","nonPersistent","Versions","gteSdkVersion","lteSdkVersion","assetPlugins","resolveFrom","silent","Error","maxWorkers","userPackagerOpts","config","userSourceExts","Set","undefined","cliOpts","key","val","Object","entries","push","process","env","EXPO_DEBUG","reset","cliPath","packagerProcess","child_process","fork","cwd","NODE_OPTIONS","METRO_NODE_OPTIONS","REACT_NATIVE_APP_ROOT","ELECTRON_RUN_AS_NODE","ProjectSettings","setPackagerInfoAsync","packagerPid","pid","on","stdout","stderr","setEncoding","pipe","exitPromise","Promise","reject","once","code","e","packagerUrl","UrlUtils","constructBundleUrlAsync","urlType","hostType","race","_waitForRunningAsync","packagerInfo","readPackagerInfoAsync","url","retries","response","axios","request","responseType","proxy","message"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { getBareExtensions, getManagedExtensions } from '@expo/config/paths';\nimport axios from 'axios';\nimport child_process from 'child_process';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport split from 'split';\nimport treekill from 'tree-kill';\nimport { promisify } from 'util';\n\nimport {\n  assertValidProjectRoot,\n  delayAsync,\n  getFreePortAsync,\n  ProjectSettings,\n  ProjectUtils,\n  StartDevServerOptions,\n  UrlUtils,\n  Versions,\n  Watchman,\n} from '../internal';\n\nconst treekillAsync = promisify<number, string>(treekill);\n\n// The --verbose flag is intended for react-native-cli/metro, not expo-cli\nconst METRO_VERBOSE_WARNING = 'Run CLI with --verbose flag for more details.';\n\n// Remove these constants and related code when SDK35 isn't supported anymore\n// Context: https://github.com/expo/expo-cli/issues/1074\nconst NODE_12_WINDOWS_METRO_ERROR = `Invalid regular expression: /(.*\\\\__fixtures__\\\\.*|node_modules[\\\\]react[\\\\]dist[\\\\].*|website\\\\node_modules\\\\.*|heapCapture\\\\bundle.js|.*\\\\__tests__\\\\.*)$/: Unterminated character class`;\nconst NODE_12_WINDOWS_METRO_SUGGESTION = `\\nUnable to start the project due to a documented incompatibility between Node 12 LTS and Expo SDK 35 on Windows.\nPlease refer to this GitHub comment for a solution:\nhttps://github.com/expo/expo-cli/issues/1074#issuecomment-559220752\\n`;\n\nfunction _logPackagerOutput(projectRoot: string, level: string, data: object) {\n  let output = data.toString();\n  if (!output) {\n    return;\n  }\n  // Temporarily hide warnings about duplicate providesModule declarations\n  // under react-native\n  if (_isIgnorableDuplicateModuleWarning(projectRoot, level, output)) {\n    ProjectUtils.logDebug(\n      projectRoot,\n      'expo',\n      `Suppressing @providesModule warning: ${output}`,\n      'project-suppress-providesmodule-warning'\n    );\n    return;\n  }\n  if (_isIgnorableMetroConsoleOutput(output) || _isIgnorableRnpmWarning(output)) {\n    ProjectUtils.logDebug(projectRoot, 'expo', output);\n    return;\n  }\n\n  if (output.includes(NODE_12_WINDOWS_METRO_ERROR)) {\n    ProjectUtils.logError(projectRoot, 'expo', NODE_12_WINDOWS_METRO_SUGGESTION);\n    return;\n  }\n\n  if (output.includes(METRO_VERBOSE_WARNING)) {\n    output = output.replace(METRO_VERBOSE_WARNING, '');\n  }\n\n  if (/^Scanning folders for symlinks in /.test(output)) {\n    ProjectUtils.logDebug(projectRoot, 'metro', output);\n    return;\n  }\n  if (level === 'info') {\n    ProjectUtils.logInfo(projectRoot, 'metro', output);\n  } else {\n    ProjectUtils.logError(projectRoot, 'metro', output);\n  }\n}\n\nfunction _isIgnorableMetroConsoleOutput(output: string) {\n  // As of react-native 0.61.x, Metro prints console logs from the device to console, without\n  // passing them through the custom log reporter.\n  //\n  // Managed apps have a separate remote logging implementation included in the Expo SDK,\n  // (see: _handleDeviceLogs), so we can just ignore these device logs from Metro.\n  // if (/^ () /)\n  //\n  // These logs originate from:\n  // https://github.com/facebook/metro/blob/e8181fb9db7db31adf7d1ed9ab840f54449ef238/packages/metro/src/lib/logToConsole.js#L50\n  return /^\\s+(INFO|WARN|LOG|GROUP|DEBUG) /.test(output);\n}\n\nfunction _isIgnorableRnpmWarning(output: string) {\n  return output.startsWith(\n    'warn The following packages use deprecated \"rnpm\" config that will stop working from next release'\n  );\n}\n\nfunction _isIgnorableDuplicateModuleWarning(\n  projectRoot: string,\n  level: string,\n  output: string\n): boolean {\n  if (\n    level !== 'error' ||\n    !output.startsWith('jest-haste-map: @providesModule naming collision:')\n  ) {\n    return false;\n  }\n\n  const reactNativeNodeModulesPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'node_modules'\n  );\n  const reactNativeNodeModulesPattern = escapeRegExp(reactNativeNodeModulesPath);\n  const reactNativeNodeModulesCollisionRegex = new RegExp(\n    `Paths: ${reactNativeNodeModulesPattern}.+ collides with ${reactNativeNodeModulesPattern}.+`\n  );\n  return reactNativeNodeModulesCollisionRegex.test(output);\n}\n\nexport async function startReactNativeServerAsync({\n  projectRoot,\n  options = {},\n  exp = getConfig(projectRoot).exp,\n  verbose = true,\n}: {\n  projectRoot: string;\n  options: StartDevServerOptions;\n  exp?: ExpoConfig;\n  verbose?: boolean;\n}): Promise<void> {\n  assertValidProjectRoot(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  await Watchman.addToPathAsync(); // Attempt to fix watchman if it's hanging\n  await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  let packagerPort = await getFreePortAsync(options.metroPort || 19001); // Create packager options\n\n  const customLogReporterPath: string = require.resolve(\n    path.join(__dirname, '../../build/reporter')\n  );\n\n  // TODO: Bacon: Support .mjs (short-lived JS modules extension that some packages use)\n  const sourceExtsConfig = { isTS: true, isReact: true, isModern: false };\n  const sourceExts =\n    options.target === 'bare'\n      ? getBareExtensions([], sourceExtsConfig)\n      : getManagedExtensions([], sourceExtsConfig);\n\n  let packagerOpts: { [key: string]: any } = {\n    port: packagerPort,\n    customLogReporterPath,\n    sourceExts,\n  };\n\n  if (options.nonPersistent && !Versions.gteSdkVersion(exp, '33.0.0')) {\n    // Expo SDK -32 | React Native -57\n    packagerOpts.nonPersistent = true;\n  }\n\n  if (!Versions.lteSdkVersion(exp, '32.0.0')) {\n    // Expo SDK +33 | React Native +59.8 (hooks): Add asset plugins\n\n    // starting with SDK 37, we bundle this plugin with the expo-asset package instead of expo,\n    // so check there first and fall back to expo if we can't find it in expo-asset\n    packagerOpts.assetPlugins = resolveFrom.silent(projectRoot, 'expo-asset/tools/hashAssetFiles');\n    if (!packagerOpts.assetPlugins) {\n      packagerOpts.assetPlugins = resolveFrom.silent(projectRoot, 'expo/tools/hashAssetFiles');\n      if (!packagerOpts.assetPlugins) {\n        throw new Error(\n          'Unable to find the expo-asset package in the current project. Install it and try again.'\n        );\n      }\n    }\n  }\n\n  if (options.maxWorkers) {\n    packagerOpts['max-workers'] = options.maxWorkers;\n  }\n\n  if (Versions.lteSdkVersion(exp, '15.0.0')) {\n    // Expo SDK -15 | React Native -42: customLogReporterPath is not supported\n    delete packagerOpts.customLogReporterPath;\n  }\n  const userPackagerOpts = exp.packagerOpts;\n\n  if (userPackagerOpts) {\n    // The RN CLI expects rn-cli.config.js's path to be absolute. We use the\n    // project root to resolve relative paths since that was the original\n    // behavior of the RN CLI.\n    if (userPackagerOpts.config) {\n      userPackagerOpts.config = path.resolve(projectRoot, userPackagerOpts.config);\n    }\n\n    // Provide a fallback if the value isn't given\n    const userSourceExts = userPackagerOpts.sourceExts ?? [];\n\n    packagerOpts = {\n      ...packagerOpts,\n      ...userPackagerOpts,\n      // In order to prevent people from forgetting to include the .expo extension or other things\n      // NOTE(brentvatne): we should probably do away with packagerOpts soon in favor of @expo/metro-config!\n      sourceExts: [...new Set([...packagerOpts.sourceExts, ...userSourceExts])],\n    };\n\n    if (userPackagerOpts.port !== undefined && userPackagerOpts.port !== null) {\n      packagerPort = userPackagerOpts.port;\n    }\n  }\n  const cliOpts = ['start'];\n  for (const [key, val] of Object.entries(packagerOpts)) {\n    // If the packager opt value is boolean, don't set\n    // --[opt] [value], just set '--opt'\n    if (val && typeof val === 'boolean') {\n      cliOpts.push(`--${key}`);\n    } else if (val) {\n      cliOpts.push(`--${key}`, val);\n    }\n  }\n\n  if (process.env.EXPO_DEBUG) {\n    cliOpts.push('--verbose');\n  }\n\n  if (options.reset) {\n    cliOpts.push('--reset-cache');\n  }\n\n  // Get the CLI path\n  const cliPath = resolveFrom(projectRoot, 'react-native/local-cli/cli.js');\n\n  // Run the copy of Node that's embedded in Electron by setting the\n  // ELECTRON_RUN_AS_NODE environment variable\n  // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the\n  // child process\n  const packagerProcess = child_process.fork(cliPath, cliOpts, {\n    cwd: projectRoot,\n    env: {\n      ...process.env,\n      NODE_OPTIONS: process.env.METRO_NODE_OPTIONS,\n      REACT_NATIVE_APP_ROOT: projectRoot,\n      ELECTRON_RUN_AS_NODE: '1',\n    },\n    silent: true,\n  });\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort,\n    packagerPid: packagerProcess.pid,\n  }); // TODO: do we need this? don't know if it's ever called\n  process.on('exit', () => {\n    treekill(packagerProcess.pid);\n  });\n  if (!packagerProcess.stdout) {\n    throw new Error('Expected spawned process to have a stdout stream, but none was found.');\n  }\n  if (!packagerProcess.stderr) {\n    throw new Error('Expected spawned process to have a stderr stream, but none was found.');\n  }\n  packagerProcess.stdout.setEncoding('utf8');\n  packagerProcess.stderr.setEncoding('utf8');\n  packagerProcess.stdout.pipe(split()).on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'info', data);\n    }\n  });\n  packagerProcess.stderr.on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'error', data);\n    }\n  });\n  const exitPromise = new Promise<void>((resolve, reject) => {\n    packagerProcess.once('exit', async code => {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Metro Bundler process exited with code ${code}`);\n      if (code) {\n        reject(new Error(`Metro Bundler process exited with code ${code}`));\n      } else {\n        resolve();\n      }\n      try {\n        await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n          packagerPort: null,\n          packagerPid: null,\n        });\n      } catch (e) {}\n    });\n  });\n  const packagerUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, {\n    urlType: 'http',\n    hostType: 'localhost',\n  });\n  await Promise.race([_waitForRunningAsync(projectRoot, `${packagerUrl}/status`), exitPromise]);\n}\n\nexport async function stopReactNativeServerAsync(projectRoot: string): Promise<void> {\n  assertValidProjectRoot(projectRoot);\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort || !packagerInfo.packagerPid) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `No packager found for project at ${projectRoot}.`);\n    return;\n  }\n  ProjectUtils.logDebug(\n    projectRoot,\n    'expo',\n    `Killing packager process tree: ${packagerInfo.packagerPid}`\n  );\n  try {\n    await treekillAsync(packagerInfo.packagerPid, 'SIGKILL');\n  } catch (e) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping packager process: ${e.toString()}`);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort: null,\n    packagerPid: null,\n  });\n}\n\nasync function _waitForRunningAsync(\n  projectRoot: string,\n  url: string,\n  retries: number = 300\n): Promise<true> {\n  try {\n    const response = await axios.request({\n      url,\n      responseType: 'text',\n      proxy: false,\n    });\n    if (/packager-status:running/.test(response.data)) {\n      return true;\n    } else if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. Server response: ${response.data}`\n      );\n    }\n  } catch (e) {\n    if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. ${e.message}`\n      );\n    }\n  }\n\n  if (retries <= 0) {\n    throw new Error('Connecting to Metro bundler failed.');\n  } else {\n    await delayAsync(100);\n    return _waitForRunningAsync(projectRoot, url, retries - 1);\n  }\n}\n"],"file":"startLegacyReactNativeServerAsync.js"}