{"version":3,"sources":["../../src/start/ExpoUpdatesManifestHandler.ts"],"names":["getPlatformFromRequest","req","url","platform","query","headers","Error","stringifiedPlatform","String","includes","shouldUseAnonymousManifestAsync","easProjectId","ConnectionStatus","isOffline","currentSession","UserManager","getSessionAsync","getScopeKeyForProjectIdAsync","projectId","user","ensureLoggedInAsync","project","ApiV2","clientForUser","getAsync","encodeURIComponent","scopeKey","signManifestAsync","manifest","signature","postAsync","getManifestResponseAsync","projectRoot","host","acceptSignature","Map","set","hostname","projectSettings","bundleUrlPackagerOpts","projectConfig","entryPoint","mainModuleName","UrlUtils","stripJSExtension","expoConfig","exp","expoGoConfig","hostUri","constructHostUriAsync","runtimeVersion","Updates","getRuntimeVersion","policy","bundleUrl","ProjectAssets","resolveManifestAssets","resolver","path","match","extra","eas","shouldUseAnonymousManifest","userAnonymousIdentifier","UserSettings","getAnonymousIdentifierAsync","ANONYMOUS_USERNAME","slug","expoUpdatesManifest","id","createdAt","Date","toISOString","launchAsset","key","contentType","assets","metadata","undefined","expoClient","expoGo","manifestSignature","body","getManifestHandler","res","next","pathname","headerName","headerValue","setHeader","end","JSON","stringify","Analytics","logEvent","developerTool","Config","e","ProjectUtils","logError","stack","statusCode","error","toString"],"mappings":"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","sourcesContent":["import { ExpoUpdatesManifest, getConfig } from '@expo/config';\nimport { Updates } from '@expo/config-plugins';\nimport { JSONObject } from '@expo/json-file';\nimport express from 'express';\nimport http from 'http';\nimport nullthrows from 'nullthrows';\nimport { parse } from 'url';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  Analytics,\n  ANONYMOUS_USERNAME,\n  ApiV2,\n  Config,\n  ConnectionStatus,\n  ProjectAssets,\n  ProjectUtils,\n  resolveEntryPoint,\n  UrlUtils,\n  UserManager,\n  UserSettings,\n} from '../internal';\nimport {\n  getBundleUrlAsync,\n  getExpoGoConfig,\n  getPackagerOptionsAsync,\n  stripPort,\n} from './ManifestHandler';\n\nfunction getPlatformFromRequest(req: express.Request | http.IncomingMessage): 'android' | 'ios' {\n  const url = req.url ? parse(req.url, /* parseQueryString */ true) : null;\n  const platform = url?.query.platform || req.headers['expo-platform'];\n  if (!platform) {\n    throw new Error('Must specify expo-platform header or query parameter');\n  }\n\n  const stringifiedPlatform = String(platform);\n  if (!['android', 'ios'].includes(stringifiedPlatform)) {\n    throw new Error(`platform must be \"android\" or \"ios\". Recieved: \"${platform}\"`);\n  }\n  return stringifiedPlatform as 'android' | 'ios';\n}\n\n/**\n * Whether an anonymous scope key should be used. It should be used when:\n * 1. Offline\n * 2. Not logged-in\n * 3. No EAS project ID in config\n */\nasync function shouldUseAnonymousManifestAsync(\n  easProjectId: string | undefined | null\n): Promise<boolean> {\n  if (!easProjectId || ConnectionStatus.isOffline()) {\n    return true;\n  }\n\n  const currentSession = await UserManager.getSessionAsync();\n  if (!currentSession) {\n    return true;\n  }\n\n  return false;\n}\n\nasync function getScopeKeyForProjectIdAsync(projectId: string): Promise<string> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const project = await ApiV2.clientForUser(user).getAsync(\n    `projects/${encodeURIComponent(projectId)}`\n  );\n  return project.scopeKey;\n}\n\nasync function signManifestAsync(manifest: ExpoUpdatesManifest): Promise<string> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const { signature } = await ApiV2.clientForUser(user).postAsync('manifest/eas/sign', {\n    manifest: (manifest as any) as JSONObject,\n  });\n  return signature;\n}\n\nexport async function getManifestResponseAsync({\n  projectRoot,\n  platform,\n  host,\n  acceptSignature,\n}: {\n  projectRoot: string;\n  platform: 'android' | 'ios';\n  host?: string;\n  acceptSignature: boolean;\n}): Promise<{\n  body: ExpoUpdatesManifest;\n  headers: Map<string, number | string | readonly string[]>;\n}> {\n  const headers = new Map<string, any>();\n  // set required headers for Expo Updates manifest specification\n  headers.set('expo-protocol-version', 0);\n  headers.set('expo-sfv-version', 0);\n  headers.set('cache-control', 'private, max-age=0');\n  headers.set('content-type', 'application/json');\n\n  const hostname = stripPort(host);\n  const [projectSettings, bundleUrlPackagerOpts] = await getPackagerOptionsAsync(projectRoot);\n  const projectConfig = getConfig(projectRoot);\n  const entryPoint = resolveEntryPoint(projectRoot, platform, projectConfig);\n  const mainModuleName = UrlUtils.stripJSExtension(entryPoint);\n  const expoConfig = projectConfig.exp;\n  const expoGoConfig = await getExpoGoConfig({\n    projectRoot,\n    projectSettings,\n    mainModuleName,\n    hostname,\n  });\n\n  const hostUri = await UrlUtils.constructHostUriAsync(projectRoot, hostname);\n\n  const runtimeVersion = Updates.getRuntimeVersion(\n    { ...expoConfig, runtimeVersion: expoConfig.runtimeVersion ?? { policy: 'sdkVersion' } },\n    platform\n  );\n\n  if (!runtimeVersion) {\n    throw new Error(`Unable to determine runtime version for ${platform}`);\n  }\n\n  const bundleUrl = await getBundleUrlAsync({\n    projectRoot,\n    platform,\n    projectSettings,\n    bundleUrlPackagerOpts,\n    mainModuleName,\n    hostname,\n  });\n\n  await ProjectAssets.resolveManifestAssets({\n    projectRoot,\n    manifest: expoConfig,\n    async resolver(path) {\n      return bundleUrl!.match(/^https?:\\/\\/.*?\\//)![0] + 'assets/' + path;\n    },\n  });\n\n  const easProjectId = expoConfig.extra?.eas?.projectId;\n  const shouldUseAnonymousManifest = await shouldUseAnonymousManifestAsync(easProjectId);\n  const userAnonymousIdentifier = await UserSettings.getAnonymousIdentifierAsync();\n  const scopeKey = shouldUseAnonymousManifest\n    ? `@${ANONYMOUS_USERNAME}/${expoConfig.slug}-${userAnonymousIdentifier}`\n    : await getScopeKeyForProjectIdAsync(nullthrows(easProjectId));\n\n  const expoUpdatesManifest = {\n    id: uuidv4(),\n    createdAt: new Date().toISOString(),\n    runtimeVersion,\n    launchAsset: {\n      key: 'bundle',\n      contentType: 'application/javascript',\n      url: bundleUrl,\n    },\n    assets: [], // assets are not used in development\n    metadata: {}, // required for the client to detect that this is an expo-updates manifest\n    extra: {\n      eas: {\n        projectId: easProjectId ?? undefined,\n      },\n      expoClient: {\n        ...expoConfig,\n        hostUri,\n      },\n      expoGo: expoGoConfig,\n      scopeKey,\n    },\n  };\n\n  if (acceptSignature && !shouldUseAnonymousManifest) {\n    const manifestSignature = await signManifestAsync(expoUpdatesManifest);\n    headers.set('expo-manifest-signature', manifestSignature);\n  }\n\n  return {\n    body: expoUpdatesManifest,\n    headers,\n  };\n}\n\nexport function getManifestHandler(projectRoot: string) {\n  return async (\n    req: express.Request | http.IncomingMessage,\n    res: express.Response | http.ServerResponse,\n    next: (err?: Error) => void\n  ) => {\n    // Only support `/`, `/manifest`, `/index.exp` for the manifest middleware.\n    if (\n      !req.url ||\n      !['/', '/manifest', '/index.exp'].includes(\n        // Strip the query params\n        parse(req.url).pathname || req.url\n      )\n    ) {\n      next();\n      return;\n    }\n\n    try {\n      const { body, headers } = await getManifestResponseAsync({\n        projectRoot,\n        host: req.headers.host,\n        platform: getPlatformFromRequest(req),\n        acceptSignature: !!req.headers['expo-accept-signature'],\n      });\n      for (const [headerName, headerValue] of headers) {\n        res.setHeader(headerName, headerValue);\n      }\n      res.end(JSON.stringify(body));\n\n      Analytics.logEvent('Serve Expo Updates Manifest', {\n        developerTool: Config.developerTool,\n        runtimeVersion: (body as any).runtimeVersion,\n      });\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', e.stack);\n      res.statusCode = 520;\n      res.end(\n        JSON.stringify({\n          error: e.toString(),\n        })\n      );\n    }\n  };\n}\n"],"file":"ExpoUpdatesManifestHandler.js"}