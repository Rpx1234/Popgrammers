{"version":3,"sources":["../../src/utils/profileMethod.ts"],"names":["isProfiling","consoleTime","console","time","consoleTimeEnd","timeEnd","profileMethod","fn","functionName","name","chalk","dim","args","results","Promise","resolve","reject","then","catch","error"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,MAAMA,WAAW,GAAG,uBAAQ,cAAR,EAAwB,KAAxB,CAApB,C,CAEA;;AACA,MAAMC,WAAqC,GAAGD,WAAW,GAAGE,OAAO,CAACC,IAAX,GAAkB,MAAM,CAAE,CAAnF,C,CACA;;AACA,MAAMC,cAAwC,GAAGJ,WAAW,GAAGE,OAAO,CAACG,OAAX,GAAqB,MAAM,CAAE,CAAzF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,MAAMC,aAAa,GAAG,CAAqBC,EAArB,EAA4CC,YAA5C,KAAsE;AACjG,QAAMC,IAAI,GAAGC,iBAAMC,GAAN,CAAW,gBAAeH,YAAhB,aAAgBA,YAAhB,cAAgBA,YAAhB,GAAiCD,EAAE,CAACE,IAAH,IAAW,SAAW,EAAjE,CAAb;;AACA,SAAO,CAAC,GAAGG,IAAJ,KAAmB;AACxBX,IAAAA,WAAW,CAACQ,IAAD,CAAX;AACA,UAAMI,OAAO,GAAGN,EAAE,CAAC,GAAGK,IAAJ,CAAlB;;AACA,QAAIC,OAAO,YAAYC,OAAvB,EAAgC;AAC9B;AACA,aAAO,IAAIA,OAAJ,CAAe,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACzCH,QAAAA,OAAO,CACJI,IADH,CACQJ,OAAO,IAAI;AACfE,UAAAA,OAAO,CAACF,OAAD,CAAP;AACAT,UAAAA,cAAc,CAACK,IAAD,CAAd;AACD,SAJH,EAKGS,KALH,CAKSC,KAAK,IAAI;AACdH,UAAAA,MAAM,CAACG,KAAD,CAAN;AACAf,UAAAA,cAAc,CAACK,IAAD,CAAd;AACD,SARH;AASD,OAVM,CAAP;AAWD,KAbD,MAaO;AACLL,MAAAA,cAAc,CAACK,IAAD,CAAd;AACD;;AACD,WAAOI,OAAP;AACD,GApBD;AAqBD,CAvBM","sourcesContent":["import chalk from 'chalk';\nimport { boolish } from 'getenv';\n\nconst isProfiling = boolish('EXPO_PROFILE', false);\n\n// eslint-disable-next-line no-console\nconst consoleTime: (label?: string) => void = isProfiling ? console.time : () => {};\n// eslint-disable-next-line no-console\nconst consoleTimeEnd: (label?: string) => void = isProfiling ? console.timeEnd : () => {};\n\n/**\n * Wrap a method and profile the time it takes to execute the method using `EXPO_PROFILE`.\n * Works best with named functions (i.e. not arrow functions).\n *\n * @param fn\n * @param functionName\n */\nexport const profileMethod = <T extends any[], U>(fn: (...args: T) => U, functionName?: string) => {\n  const name = chalk.dim(`⏱  [profile] ${functionName ?? (fn.name || 'unknown')}`);\n  return (...args: T): U => {\n    consoleTime(name);\n    const results = fn(...args);\n    if (results instanceof Promise) {\n      // @ts-ignore\n      return new Promise<U>((resolve, reject) => {\n        results\n          .then(results => {\n            resolve(results);\n            consoleTimeEnd(name);\n          })\n          .catch(error => {\n            reject(error);\n            consoleTimeEnd(name);\n          });\n      });\n    } else {\n      consoleTimeEnd(name);\n    }\n    return results;\n  };\n};\n"],"file":"profileMethod.js"}