{"version":3,"sources":["../../src/utils/getRunningProcess.ts"],"names":["defaultOptions","encoding","stdio","getPID","port","split","trim","getPackageName","packageRoot","packageJson","path","join","require","name","getProcessCommand","pid","procDirectory","results","replace","getDirectoryOfProcessById","processId","getRunningProcess","directory","command"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEA,MAAMA,cAAiD,GAAG;AACxDC,EAAAA,QAAQ,EAAE,MAD8C;AAExDC,EAAAA,KAAK,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,QAAjB;AAFiD,CAA1D;;AAKA,SAASC,MAAT,CAAgBC,IAAhB,EAA8B;AAC5B,SAAO,mCAAa,MAAb,EAAqB,CAAE,MAAKA,IAAK,EAAZ,EAAe,IAAf,EAAqB,IAArB,EAA2B,cAA3B,CAArB,EAAiEJ,cAAjE,EACJK,KADI,CACE,IADF,EACQ,CADR,EAEJC,IAFI,EAAP;AAGD;;AAED,SAASC,cAAT,CAAwBC,WAAxB,EAA4D;AAC1D,QAAMC,WAAW,GAAGC,IAAI,GAACC,IAAL,CAAUH,WAAW,CAACF,IAAZ,EAAV,EAA8B,cAA9B,CAApB;;AACA,MAAI;AACF,WAAOM,OAAO,CAACH,WAAD,CAAP,CAAqBI,IAArB,IAA6B,IAApC;AACD,GAFD,CAEE,MAAM;AACN,WAAO,IAAP;AACD;AACF;;AAED,SAASC,iBAAT,CAA2BC,GAA3B,EAAwCC,aAAxC,EAAuE;AACrE,QAAMC,OAAO,GAAG,+BAAU,oBAAmBF,GAAI,cAAjC,EAAgDf,cAAhD,EACbkB,OADa,CACL,KADK,EACE,EADF,EAEbZ,IAFa,EAAhB;AAIA,QAAMO,IAAI,GAAGN,cAAc,CAACS,aAAD,CAA3B;AACA,SAAOH,IAAI,GAAGA,IAAH,GAAUI,OAArB;AACD;;AAED,SAASE,yBAAT,CAAmCC,SAAnC,EAA8D;AAC5D,SAAO,+BACL,aAAaA,SAAb,GAAyB,+DADpB,EAELpB,cAFK,EAGLM,IAHK,EAAP;AAID;;AAEM,SAASe,iBAAT,CACLjB,IADK,EAEuD;AAC5D,MAAI;AACF;AACA,UAAMW,GAAG,GAAGZ,MAAM,CAACC,IAAD,CAAlB,CAFE,CAGF;;AACA,UAAMkB,SAAS,GAAGH,yBAAyB,CAACJ,GAAD,CAA3C,CAJE,CAKF;;AACA,UAAMQ,OAAO,GAAGT,iBAAiB,CAACC,GAAD,EAAMO,SAAN,CAAjC,CANE,CAOF;;AACA,WAAO;AAAEP,MAAAA,GAAF;AAAOO,MAAAA,SAAP;AAAkBC,MAAAA;AAAlB,KAAP;AACD,GATD,CASE,MAAM;AACN,WAAO,IAAP;AACD;AACF","sourcesContent":["import { execFileSync, execSync, ExecSyncOptionsWithStringEncoding } from 'child_process';\nimport * as path from 'path';\n\nconst defaultOptions: ExecSyncOptionsWithStringEncoding = {\n  encoding: 'utf8',\n  stdio: ['pipe', 'pipe', 'ignore'],\n};\n\nfunction getPID(port: number) {\n  return execFileSync('lsof', [`-i:${port}`, '-P', '-t', '-sTCP:LISTEN'], defaultOptions)\n    .split('\\n')[0]\n    .trim();\n}\n\nfunction getPackageName(packageRoot: string): string | null {\n  const packageJson = path.join(packageRoot.trim(), 'package.json');\n  try {\n    return require(packageJson).name || null;\n  } catch {\n    return null;\n  }\n}\n\nfunction getProcessCommand(pid: string, procDirectory: string): string {\n  const results = execSync(`ps -o command -p ${pid} | sed -n 2p`, defaultOptions)\n    .replace(/\\n$/, '')\n    .trim();\n\n  const name = getPackageName(procDirectory);\n  return name ? name : results;\n}\n\nfunction getDirectoryOfProcessById(processId: string): string {\n  return execSync(\n    'lsof -p ' + processId + ' | awk \\'$4==\"cwd\" {for (i=9; i<=NF; i++) printf \"%s \", $i}\\'',\n    defaultOptions\n  ).trim();\n}\n\nexport function getRunningProcess(\n  port: number\n): { pid: string; directory: string; command: string } | null {\n  try {\n    // 63828\n    const pid = getPID(port);\n    // /Users/evanbacon/Documents/GitHub/lab/myapp\n    const directory = getDirectoryOfProcessById(pid);\n    // /Users/evanbacon/Documents/GitHub/lab/myapp/package.json\n    const command = getProcessCommand(pid, directory);\n    // TODO: Have a better message for reusing another process.\n    return { pid, directory, command };\n  } catch {\n    return null;\n  }\n}\n"],"file":"getRunningProcess.js"}