{"version":3,"sources":["../../src/utils/downloadAppAsync.ts"],"names":["TIMER_DURATION","TIMEOUT","_downloadAsync","url","outputPath","progressFunction","retryFunction","promptShown","currentProgress","cancel","token","axios","CancelToken","source","warningTimer","setTimeout","tmpPath","config","timeout","responseType","cancelToken","response","Promise","resolve","totalDownloadSize","data","headers","downloadProgress","on","chunk","length","roundedProgress","Math","floor","clearTimeout","pipe","fs","createWriteStream","rename","downloadAppAsync","extract","dotExpoHomeDirectory","UserSettings","path","join","Extract","extractAsync","removeSync"],"mappings":"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","sourcesContent":["import axios, { AxiosRequestConfig, Canceler } from 'axios';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { Extract, UserSettings } from '../internal';\n\nconst TIMER_DURATION = 30000;\nconst TIMEOUT = 3600000;\n\ntype ProgressCallback = (progressPercentage: number) => void;\ntype RetryCallback = (cancel: Canceler) => void;\n\nasync function _downloadAsync(\n  url: string,\n  outputPath: string,\n  progressFunction?: ProgressCallback,\n  retryFunction?: RetryCallback\n) {\n  let promptShown = false;\n  let currentProgress = 0;\n\n  const { cancel, token } = axios.CancelToken.source();\n\n  let warningTimer = setTimeout(() => {\n    if (retryFunction) {\n      retryFunction(cancel);\n    }\n    promptShown = true;\n  }, TIMER_DURATION);\n\n  const tmpPath = `${outputPath}.download`;\n  const config: AxiosRequestConfig = {\n    timeout: TIMEOUT,\n    responseType: 'stream',\n    cancelToken: token,\n  };\n  const response = await axios(url, config);\n  await new Promise<void>(resolve => {\n    const totalDownloadSize = response.data.headers['content-length'];\n    let downloadProgress = 0;\n    response.data\n      .on('data', (chunk: Buffer) => {\n        downloadProgress += chunk.length;\n        const roundedProgress = Math.floor((downloadProgress / totalDownloadSize) * 100);\n        if (currentProgress !== roundedProgress) {\n          currentProgress = roundedProgress;\n          clearTimeout(warningTimer);\n          if (!promptShown) {\n            warningTimer = setTimeout(() => {\n              if (retryFunction) {\n                retryFunction(cancel);\n              }\n              promptShown = true;\n            }, TIMER_DURATION);\n          }\n          if (progressFunction) {\n            progressFunction(roundedProgress);\n          }\n        }\n      })\n      .on('end', () => {\n        clearTimeout(warningTimer);\n        if (progressFunction && currentProgress !== 100) {\n          progressFunction(100);\n        }\n        resolve();\n      })\n      .pipe(fs.createWriteStream(tmpPath));\n  });\n  await fs.rename(tmpPath, outputPath);\n}\n\nexport async function downloadAppAsync(\n  url: string,\n  outputPath: string,\n  { extract = false } = {},\n  progressFunction?: ProgressCallback,\n  retryFunction?: RetryCallback\n): Promise<void> {\n  if (extract) {\n    const dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n    const tmpPath = path.join(dotExpoHomeDirectory, 'tmp-download-file');\n    await _downloadAsync(url, tmpPath, progressFunction);\n    await Extract.extractAsync(tmpPath, outputPath);\n    fs.removeSync(tmpPath);\n  } else {\n    await _downloadAsync(url, outputPath, progressFunction, retryFunction);\n  }\n}\n"],"file":"downloadAppAsync.js"}