{"version":3,"sources":["../../../../src/apple/native-run/utils/process.ts"],"names":["debug","once","fn","called","r","wrapper","args","exec","util","promisify","cp","execFile","wait","setTimeout","exitQueue","onBeforeExit","push","BEFORE_EXIT_SIGNALS","beforeExitHandlerWrapper","signal","length","i","entries","e","process","exitCode","exit","on"],"mappings":";;;;;;;;;;AAQA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAVA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA,MAAMA,KAAK,GAAG,sBAAM,wBAAN,CAAd;;AAEO,SAASC,IAAT,CAAiDC,EAAjD,EAA2D;AAChE,MAAIC,MAAM,GAAG,KAAb;AACA,MAAIC,CAAJ;;AAEA,QAAMC,OAAY,GAAG,CAAC,GAAGC,IAAJ,KAAyB;AAC5C,QAAI,CAACH,MAAL,EAAa;AACXA,MAAAA,MAAM,GAAG,IAAT;AACAC,MAAAA,CAAC,GAAGF,EAAE,CAAC,GAAGI,IAAJ,CAAN;AACD;;AAED,WAAOF,CAAP;AACD,GAPD;;AASA,SAAOC,OAAP;AACD;;AACM,MAAME,IAAI,GAAGC,IAAI,GAACC,SAAL,CAAeC,EAAE,GAACH,IAAlB,CAAb;;AACA,MAAMI,QAAQ,GAAGH,IAAI,GAACC,SAAL,CAAeC,EAAE,GAACC,QAAlB,CAAjB;;AACA,MAAMC,IAAI,GAAGJ,IAAI,GAACC,SAAL,CAAeI,UAAf,CAAb;;AAIP,MAAMC,SAAwB,GAAG,EAAjC;;AAEO,SAASC,YAAT,CAAsBb,EAAtB,EAA6C;AAClDY,EAAAA,SAAS,CAACE,IAAV,CAAed,EAAf;AACD;;AAED,MAAMe,mBAAqC,GAAG,CAAC,QAAD,EAAW,SAAX,EAAsB,QAAtB,EAAgC,UAAhC,CAA9C;;AAEA,MAAMC,wBAAwB,GAAIC,MAAD,IAC/BlB,IAAI,CAAC,YAAY;AACfD,EAAAA,KAAK,CAAC,mCAAD,EAAsCmB,MAAtC,CAAL;AACAnB,EAAAA,KAAK,CAAC,mDAAD,EAAsDc,SAAS,CAACM,MAAhE,CAAL;;AAEA,OAAK,MAAM,CAACC,CAAD,EAAInB,EAAJ,CAAX,IAAsBY,SAAS,CAACQ,OAAV,EAAtB,EAA2C;AACzC,QAAI;AACF,YAAMpB,EAAE,EAAR;AACD,KAFD,CAEE,OAAOqB,CAAP,EAAU;AACVvB,MAAAA,KAAK,CAAC,0CAAD,EAA6CqB,CAA7C,EAAgDE,CAAhD,CAAL;AACD;AACF;;AAEDvB,EAAAA,KAAK,CAAC,8CAAD,EAAiDwB,OAAO,CAACC,QAAR,GAAmBD,OAAO,CAACC,QAA3B,GAAsC,CAAvF,CAAL;AAEAD,EAAAA,OAAO,CAACE,IAAR;AACD,CAfG,CADN;;AAkBA,KAAK,MAAMP,MAAX,IAAqBF,mBAArB,EAA0C;AACxCO,EAAAA,OAAO,CAACG,EAAR,CAAWR,MAAX,EAAmBD,wBAAwB,CAACC,MAAD,CAA3C;AACD","sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as cp from 'child_process';\nimport Debug from 'debug';\nimport * as util from 'util';\n\nconst debug = Debug('expo:xdl:utils:process');\n\nexport function once<T extends (...args: any[]) => any>(fn: T): T {\n  let called = false;\n  let r: any;\n\n  const wrapper: any = (...args: any[]): any => {\n    if (!called) {\n      called = true;\n      r = fn(...args);\n    }\n\n    return r;\n  };\n\n  return wrapper;\n}\nexport const exec = util.promisify(cp.exec);\nexport const execFile = util.promisify(cp.execFile);\nexport const wait = util.promisify(setTimeout);\n\nexport type ExitQueueFn = () => Promise<void>;\n\nconst exitQueue: ExitQueueFn[] = [];\n\nexport function onBeforeExit(fn: ExitQueueFn): void {\n  exitQueue.push(fn);\n}\n\nconst BEFORE_EXIT_SIGNALS: NodeJS.Signals[] = ['SIGINT', 'SIGTERM', 'SIGHUP', 'SIGBREAK'];\n\nconst beforeExitHandlerWrapper = (signal: NodeJS.Signals) =>\n  once(async () => {\n    debug('onBeforeExit handler: %s received', signal);\n    debug('onBeforeExit handler: running %s queued functions', exitQueue.length);\n\n    for (const [i, fn] of exitQueue.entries()) {\n      try {\n        await fn();\n      } catch (e) {\n        debug('Error from function %d in exit queue: %O', i, e);\n      }\n    }\n\n    debug('onBeforeExit handler: exiting (exit code %s)', process.exitCode ? process.exitCode : 0);\n\n    process.exit();\n  });\n\nfor (const signal of BEFORE_EXIT_SIGNALS) {\n  process.on(signal, beforeExitHandlerWrapper(signal));\n}\n"],"file":"process.js"}