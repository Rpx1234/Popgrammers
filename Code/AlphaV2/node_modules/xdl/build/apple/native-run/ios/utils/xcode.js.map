{"version":3,"sources":["../../../../../src/apple/native-run/ios/utils/xcode.ts"],"names":["getXCodePath","stdout","encoding","trim","Error","getDeveloperDiskImagePath","version","xCodePath","versionDirs","fs","promises","readdir","versionPrefix","match","dir","includes"],"mappings":";;;;;;;;AAOA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AAKO,eAAeA,YAAf,GAA8B;AACnC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAa,MAAM,yBAAS,cAAT,EAAyB,CAAC,IAAD,CAAzB,EAAiC;AACxDC,MAAAA,QAAQ,EAAE;AAD8C,KAAjC,CAAzB;;AAGA,QAAID,MAAJ,EAAY;AACV,aAAOA,MAAM,CAACE,IAAP,EAAP;AACD;AACF,GAPD,CAOE,MAAM,CACN;AACD;;AACD,QAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AAEM,eAAeC,yBAAf,CAAyCC,OAAzC,EAA0D;AAC/D,QAAMC,SAAS,GAAG,MAAMP,YAAY,EAApC;AACA,QAAMQ,WAAW,GAAG,MAAMC,cAAGC,QAAH,CAAYC,OAAZ,CACvB,GAAEJ,SAAU,6CADW,CAA1B;AAGA,QAAMK,aAAa,GAAGN,OAAO,CAACO,KAAR,CAAc,UAAd,CAAtB;;AACA,MAAID,aAAa,KAAK,IAAtB,EAA4B;AAC1B,UAAM,IAAIR,KAAJ,CAAW,wBAAuBE,OAAQ,EAA1C,CAAN;AACD,GAR8D,CAS/D;;;AACA,OAAK,MAAMQ,GAAX,IAAkBN,WAAlB,EAA+B;AAC7B,QAAIM,GAAG,CAACC,QAAJ,CAAaH,aAAa,CAAC,CAAD,CAA1B,CAAJ,EAAoC;AAClC,aAAQ,GAAEL,SAAU,8CAA6CO,GAAI,yBAArE;AACD;AACF;;AACD,QAAM,IAAIV,KAAJ,CACH,oDAAmDE,OAAQ,2CADxD,CAAN;AAGD","sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport fs from 'fs';\n\nimport { execFile } from '../../utils/process';\n\nexport async function getXCodePath() {\n  try {\n    const { stdout } = await execFile('xcode-select', ['-p'], {\n      encoding: 'utf8',\n    });\n    if (stdout) {\n      return stdout.trim();\n    }\n  } catch {\n    // ignore\n  }\n  throw new Error('Unable to get Xcode location. Is Xcode installed?');\n}\n\nexport async function getDeveloperDiskImagePath(version: string) {\n  const xCodePath = await getXCodePath();\n  const versionDirs = await fs.promises.readdir(\n    `${xCodePath}/Platforms/iPhoneOS.platform/DeviceSupport/`\n  );\n  const versionPrefix = version.match(/\\d+\\.\\d+/);\n  if (versionPrefix === null) {\n    throw new Error(`Invalid iOS version: ${version}`);\n  }\n  // Can look like \"11.2 (15C107)\"\n  for (const dir of versionDirs) {\n    if (dir.includes(versionPrefix[0])) {\n      return `${xCodePath}/Platforms/iPhoneOS.platform/DeviceSupport/${dir}/DeveloperDiskImage.dmg`;\n    }\n  }\n  throw new Error(\n    `Unable to find Developer Disk Image path for SDK ${version}. Do you have the right version of Xcode?`\n  );\n}\n"],"file":"xcode.js"}