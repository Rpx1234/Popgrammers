{"version":3,"sources":["../../../../../../src/apple/native-run/ios/lib/client/afc.ts"],"names":["debug","MAX_OPEN_FILES","AFCClient","ServiceClient","constructor","socket","AFCProtocolClient","getFileInfo","path","resp","protocolClient","sendMessage","operation","AFC_OPS","GET_FILE_INFO","data","toCString","strings","currentString","tokens","forEach","token","push","String","fromCharCode","writeFile","fd","Array","prototype","toString","call","FILE_WRITE","payload","openFile","Buffer","alloc","length","writeUInt32LE","AFC_FILE_OPEN_FLAGS","WRONLY","copy","FILE_OPEN","FILE_OPEN_RES","Error","closeFile","FILE_CLOSE","uploadFile","srcPath","destPath","srcFile","destFile","Promise","all","fs","readFile","err","makeDirectory","MAKE_DIR","uploadDirectory","numOpenFiles","pendingFileUploads","_this","uploadDir","dirPath","promises","file","readdirSync","filePath","join","remotePath","relative","lstatSync","isDirectory","then","resolve","reject","promise","res","rej","tries","fn","pop","catch","status","AFC_STATUS","NO_RESOURCES","s","buf","len","write","writeUInt8"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Debug from 'debug';\nimport * as fs from 'fs';\nimport type * as net from 'net';\nimport * as path from 'path';\nimport { promisify } from 'util';\n\nimport { AFC_FILE_OPEN_FLAGS, AFC_OPS, AFC_STATUS, AFCProtocolClient } from '../protocol/afc';\nimport type { AFCError, AFCResponse } from '../protocol/afc';\nimport { ServiceClient } from './client';\n\nconst debug = Debug('expo:xdl:ios:lib:client:afc');\nconst MAX_OPEN_FILES = 240;\n\nexport class AFCClient extends ServiceClient<AFCProtocolClient> {\n  constructor(public socket: net.Socket) {\n    super(socket, new AFCProtocolClient(socket));\n  }\n\n  async getFileInfo(path: string): Promise<string[]> {\n    debug(`getFileInfo: ${path}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      operation: AFC_OPS.GET_FILE_INFO,\n      data: toCString(path),\n    });\n\n    const strings: string[] = [];\n    let currentString = '';\n    const tokens = resp.data;\n    tokens.forEach(token => {\n      if (token === 0) {\n        strings.push(currentString);\n        currentString = '';\n      } else {\n        currentString += String.fromCharCode(token);\n      }\n    });\n    return strings;\n  }\n\n  async writeFile(fd: Buffer, data: Buffer): Promise<AFCResponse> {\n    debug(`writeFile: ${Array.prototype.toString.call(fd)}`);\n\n    return this.protocolClient.sendMessage({\n      operation: AFC_OPS.FILE_WRITE,\n      data: fd,\n      payload: data,\n    });\n  }\n\n  async openFile(path: string): Promise<Buffer> {\n    debug(`openFile: ${path}`);\n    // mode + path + null terminator\n    const data = Buffer.alloc(8 + path.length + 1);\n    // write mode\n    data.writeUInt32LE(AFC_FILE_OPEN_FLAGS.WRONLY, 0);\n    // then path to file\n    toCString(path).copy(data, 8);\n\n    const resp = await this.protocolClient.sendMessage({\n      operation: AFC_OPS.FILE_OPEN,\n      data,\n    });\n\n    if (resp.operation === AFC_OPS.FILE_OPEN_RES) {\n      return resp.data;\n    }\n\n    throw new Error(\n      `There was an unknown error opening file ${path}, response: ${Array.prototype.toString.call(\n        resp.data\n      )}`\n    );\n  }\n\n  async closeFile(fd: Buffer): Promise<AFCResponse> {\n    debug(`closeFile fd: ${Array.prototype.toString.call(fd)}`);\n    return this.protocolClient.sendMessage({\n      operation: AFC_OPS.FILE_CLOSE,\n      data: fd,\n    });\n  }\n\n  async uploadFile(srcPath: string, destPath: string): Promise<void> {\n    debug(`uploadFile: ${srcPath}`);\n\n    // read local file and get fd of destination\n    const [srcFile, destFile] = await Promise.all([\n      await promisify(fs.readFile)(srcPath),\n      await this.openFile(destPath),\n    ]);\n\n    try {\n      await this.writeFile(destFile, srcFile);\n      await this.closeFile(destFile);\n    } catch (err) {\n      await this.closeFile(destFile);\n      throw err;\n    }\n  }\n\n  async makeDirectory(path: string): Promise<AFCResponse> {\n    debug(`makeDirectory: ${path}`);\n\n    return this.protocolClient.sendMessage({\n      operation: AFC_OPS.MAKE_DIR,\n      data: toCString(path),\n    });\n  }\n\n  async uploadDirectory(srcPath: string, destPath: string): Promise<void> {\n    debug(`uploadDirectory: ${srcPath}`);\n    await this.makeDirectory(destPath);\n\n    // AFC doesn't seem to give out more than 240 file handles,\n    // so we delay any requests that would push us over until more open up\n    let numOpenFiles = 0;\n    const pendingFileUploads: (() => void)[] = [];\n    const _this = this;\n    return uploadDir(srcPath);\n\n    async function uploadDir(dirPath: string): Promise<void> {\n      const promises: Promise<void>[] = [];\n      for (const file of fs.readdirSync(dirPath)) {\n        const filePath = path.join(dirPath, file);\n        const remotePath = path.join(destPath, path.relative(srcPath, filePath));\n        if (fs.lstatSync(filePath).isDirectory()) {\n          promises.push(_this.makeDirectory(remotePath).then(() => uploadDir(filePath)));\n        } else {\n          // Create promise to add to promises array\n          // this way it can be resolved once a pending upload has finished\n          let resolve: (val?: any) => void;\n          let reject: (err: AFCError) => void;\n          const promise = new Promise<void>((res, rej) => {\n            resolve = res;\n            reject = rej;\n          });\n          promises.push(promise);\n\n          // wrap upload in a function in case we need to save it for later\n          const uploadFile = (tries = 0) => {\n            numOpenFiles++;\n            _this\n              .uploadFile(filePath, remotePath)\n              .then(() => {\n                resolve();\n                numOpenFiles--;\n                const fn = pendingFileUploads.pop();\n                if (fn) {\n                  fn();\n                }\n              })\n              .catch((err: AFCError) => {\n                // Couldn't get fd for whatever reason, try again\n                // # of retries is arbitrary and can be adjusted\n                if (err.status === AFC_STATUS.NO_RESOURCES && tries < 10) {\n                  debug(`Received NO_RESOURCES from AFC, retrying ${filePath} upload. ${tries}`);\n                  uploadFile(tries++);\n                } else {\n                  numOpenFiles--;\n                  reject(err);\n                }\n              });\n          };\n\n          if (numOpenFiles < MAX_OPEN_FILES) {\n            uploadFile();\n          } else {\n            debug(\n              `numOpenFiles >= ${MAX_OPEN_FILES}, adding to pending queue. Length: ${pendingFileUploads.length}`\n            );\n            pendingFileUploads.push(uploadFile);\n          }\n        }\n      }\n      await Promise.all(promises);\n    }\n  }\n}\n\nfunction toCString(s: string) {\n  const buf = Buffer.alloc(s.length + 1);\n  const len = buf.write(s);\n  buf.writeUInt8(0, len);\n  return buf;\n}\n"],"file":"afc.js"}