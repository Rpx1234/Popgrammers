{"version":3,"sources":["../../../../../../src/apple/native-run/ios/lib/client/installation_proxy.ts"],"names":["debug","isIPLookupResponse","resp","length","LookupResult","undefined","isIPInstallPercentCompleteResponse","PercentComplete","isIPInstallCFBundleIdentifierResponse","CFBundleIdentifier","isIPInstallCompleteResponse","Status","InstallationProxyClient","ServiceClient","constructor","socket","LockdownProtocolClient","lookupApp","bundleIds","options","ReturnAttributes","ApplicationsType","JSON","stringify","protocolClient","sendMessage","Command","ClientOptions","BundleIDs","Array","isArray","ResponseError","installApp","packagePath","bundleId","PackageType","onProgress","PackagePath","resolve","reject","isComplete","progress","status","require","inspect"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Debug from 'debug';\nimport type * as net from 'net';\n\nimport type { LockdownCommand, LockdownResponse } from '../protocol/lockdown';\nimport { LockdownProtocolClient } from '../protocol/lockdown';\nimport { ResponseError, ServiceClient } from './client';\n\nconst debug = Debug('expo:xdl:ios:lib:client:installation_proxy');\n\nexport type OnInstallProgressCallback = (props: {\n  status: string;\n  isComplete: boolean;\n  // copiedFiles: number;\n  progress: number;\n}) => void;\n\ninterface IPOptions {\n  ApplicationsType?: 'Any';\n  PackageType?: 'Developer';\n  CFBundleIdentifier?: string;\n  ReturnAttributes?: ('CFBundleIdentifier' | 'CFBundleExecutable' | 'Container' | 'Path')[];\n  BundleIDs?: string[];\n  [key: string]: undefined | string | string[];\n}\n\ninterface IPInstallPercentCompleteResponseItem extends LockdownResponse {\n  PercentComplete: number;\n}\n\ninterface IPInstallCFBundleIdentifierResponseItem {\n  CFBundleIdentifier: string;\n}\n\ninterface IPInstallCompleteResponseItem extends LockdownResponse {\n  Status: 'Complete';\n}\n/*\n *  [{ \"PercentComplete\": 5, \"Status\": \"CreatingStagingDirectory\" }]\n *  ...\n *  [{ \"PercentComplete\": 90, \"Status\": \"GeneratingApplicationMap\" }]\n *  [{ \"CFBundleIdentifier\": \"my.company.app\" }]\n *  [{ \"Status\": \"Complete\" }]\n */\ntype IPInstallPercentCompleteResponse = IPInstallPercentCompleteResponseItem[];\ntype IPInstallCFBundleIdentifierResponse = IPInstallCFBundleIdentifierResponseItem[];\ntype IPInstallCompleteResponse = IPInstallCompleteResponseItem[];\n\ninterface IPMessage extends LockdownCommand {\n  Command: string;\n  ClientOptions: IPOptions;\n}\n\ninterface IPLookupResponseItem extends LockdownResponse {\n  LookupResult: IPLookupResult;\n}\n/*\n * [{\n *    LookupResult: IPLookupResult,\n *    Status: \"Complete\"\n *  }]\n */\ntype IPLookupResponse = IPLookupResponseItem[];\n\nexport interface IPLookupResult {\n  // BundleId\n  [key: string]: {\n    Container: string;\n    CFBundleIdentifier: string;\n    CFBundleExecutable: string;\n    Path: string;\n  };\n}\n\nfunction isIPLookupResponse(resp: any): resp is IPLookupResponse {\n  return resp.length && resp[0].LookupResult !== undefined;\n}\n\nfunction isIPInstallPercentCompleteResponse(resp: any): resp is IPInstallPercentCompleteResponse {\n  return resp.length && resp[0].PercentComplete !== undefined;\n}\n\nfunction isIPInstallCFBundleIdentifierResponse(\n  resp: any\n): resp is IPInstallCFBundleIdentifierResponse {\n  return resp.length && resp[0].CFBundleIdentifier !== undefined;\n}\n\nfunction isIPInstallCompleteResponse(resp: any): resp is IPInstallCompleteResponse {\n  return resp.length && resp[0].Status === 'Complete';\n}\n\nexport class InstallationProxyClient extends ServiceClient<LockdownProtocolClient<IPMessage>> {\n  constructor(public socket: net.Socket) {\n    super(socket, new LockdownProtocolClient(socket));\n  }\n\n  async lookupApp(\n    bundleIds: string[],\n    options: IPOptions = {\n      ReturnAttributes: ['Path', 'Container', 'CFBundleExecutable', 'CFBundleIdentifier'],\n      ApplicationsType: 'Any',\n    }\n  ) {\n    debug(`lookupApp, options: ${JSON.stringify(options)}`);\n\n    let resp = await this.protocolClient.sendMessage({\n      Command: 'Lookup',\n      ClientOptions: {\n        BundleIDs: bundleIds,\n        ...options,\n      },\n    });\n    if (resp && !Array.isArray(resp)) resp = [resp];\n    if (isIPLookupResponse(resp)) {\n      return resp[0].LookupResult;\n    } else {\n      throw new ResponseError(`There was an error looking up app`, resp);\n    }\n  }\n\n  async installApp(\n    packagePath: string,\n    bundleId: string,\n    options: IPOptions = {\n      ApplicationsType: 'Any',\n      PackageType: 'Developer',\n    },\n    onProgress: OnInstallProgressCallback\n  ) {\n    debug(`installApp, packagePath: ${packagePath}, bundleId: ${bundleId}`);\n\n    return this.protocolClient.sendMessage(\n      {\n        Command: 'Install',\n        PackagePath: packagePath,\n        ClientOptions: {\n          CFBundleIdentifier: bundleId,\n          ...options,\n        },\n      },\n      (resp, resolve, reject) => {\n        if (resp && !Array.isArray(resp)) resp = [resp];\n\n        if (isIPInstallCompleteResponse(resp)) {\n          onProgress({\n            isComplete: true,\n            progress: 100,\n            status: resp[0].Status,\n          });\n          resolve();\n        } else if (isIPInstallPercentCompleteResponse(resp)) {\n          onProgress({\n            isComplete: false,\n            progress: resp[0].PercentComplete,\n            status: resp[0].Status,\n          });\n          debug(`Installation status: ${resp[0].Status}, %${resp[0].PercentComplete}`);\n        } else if (isIPInstallCFBundleIdentifierResponse(resp)) {\n          debug(`Installed app: ${resp[0].CFBundleIdentifier}`);\n        } else {\n          reject(\n            new ResponseError(\n              'There was an error installing app: ' + require('util').inspect(resp),\n              resp\n            )\n          );\n        }\n      }\n    );\n  }\n}\n"],"file":"installation_proxy.js"}