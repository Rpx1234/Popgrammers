{"version":3,"sources":["../../../../../../src/apple/native-run/ios/lib/protocol/lockdown.ts"],"names":["debug","LOCKDOWN_HEADER_SIZE","isDefined","val","isLockdownResponse","resp","Status","isLockdownErrorResponse","Error","LockdownProtocolClient","ProtocolClient","constructor","socket","ProtocolReaderFactory","LockdownProtocolReader","LockdownProtocolWriter","PlistProtocolReader","callback","parseHeader","data","readUInt32BE","parseBody","JSON","stringify","IOSLibError","errorMessage","Service","Request","write","plistData","plistMessage","plist","build","header","Buffer","alloc","writeUInt32BE","length"],"mappings":";;;;;;;;;AAQA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAdA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA,MAAMA,KAAK,GAAG,sBAAM,oCAAN,CAAd;AACO,MAAMC,oBAAoB,GAAG,CAA7B;;;AAuBP,SAASC,SAAT,CAAmBC,GAAnB,EAA6B;AAC3B,SAAO,OAAOA,GAAP,KAAe,WAAtB;AACD;;AAEM,SAASC,kBAAT,CAA4BC,IAA5B,EAAiE;AACtE,SAAOH,SAAS,CAACG,IAAI,CAACC,MAAN,CAAhB;AACD;;AAEM,SAASC,uBAAT,CAAiCF,IAAjC,EAA2E;AAChF,SAAOH,SAAS,CAACG,IAAI,CAACG,KAAN,CAAhB;AACD;;AAEM,MAAMC,sBAAN,SAEGC,0BAFH,CAE+B;AACpCC,EAAAA,WAAW,CAACC,MAAD,EAAqB;AAC9B,UAAMA,MAAN,EAAc,KAAIC,iCAAJ,EAA0BC,sBAA1B,CAAd,EAAiE,IAAIC,sBAAJ,EAAjE;AACD;;AAHmC;;;;AAM/B,MAAMD,sBAAN,SAAqCE,+BAArC,CAAyD;AAC9DL,EAAAA,WAAW,CAACM,QAAD,EAA+B;AACxC,UAAMhB,oBAAN,EAA4BgB,QAA5B;AACD;;AAEDC,EAAAA,WAAW,CAACC,IAAD,EAAe;AACxB,WAAOA,IAAI,CAACC,YAAL,CAAkB,CAAlB,CAAP;AACD;;AAEDC,EAAAA,SAAS,CAACF,IAAD,EAAe;AACtB,UAAMd,IAAI,GAAG,MAAMgB,SAAN,CAAgBF,IAAhB,CAAb;AACAnB,IAAAA,KAAK,CAAE,aAAYsB,IAAI,CAACC,SAAL,CAAelB,IAAf,CAAqB,EAAnC,CAAL;;AACA,QAAIE,uBAAuB,CAACF,IAAD,CAA3B,EAAmC;AACjC,UAAIA,IAAI,CAACG,KAAL,KAAe,cAAnB,EAAmC;AACjC,cAAM,KAAIgB,wBAAJ,EAAgB,6BAAhB,EAA+C,cAA/C,CAAN;AACD;;AAED,UAAInB,IAAI,CAACG,KAAL,KAAe,gBAAnB,EAAqC;AACnC,YAAIiB,YAAY,GAAI,GAAEpB,IAAI,CAACG,KAAM,KAAIH,IAAI,CAACqB,OAAQ,cAAarB,IAAI,CAACsB,OAAQ,GAA5E;;AACA,YAAItB,IAAI,CAACqB,OAAL,KAAiB,uBAArB,EAA8C;AAC5CD,UAAAA,YAAY,IACV,oGADF;AAED;;AACD,cAAM,IAAIjB,KAAJ,CAAUiB,YAAV,CAAN;AACD;;AAED,YAAM,IAAIjB,KAAJ,CAAUH,IAAI,CAACG,KAAf,CAAN;AACD;;AACD,WAAOH,IAAP;AACD;;AA7B6D;;;;AAgCzD,MAAMU,sBAAN,CAAuD;AAC5Da,EAAAA,KAAK,CAAChB,MAAD,EAAqBiB,SAArB,EAAqC;AACxC7B,IAAAA,KAAK,CAAE,iBAAgBsB,IAAI,CAACC,SAAL,CAAeM,SAAf,CAA0B,EAA5C,CAAL;;AACA,UAAMC,YAAY,GAAGC,iBAAMC,KAAN,CAAYH,SAAZ,CAArB;;AACA,UAAMI,MAAM,GAAGC,MAAM,CAACC,KAAP,CAAalC,oBAAb,CAAf;AACAgC,IAAAA,MAAM,CAACG,aAAP,CAAqBN,YAAY,CAACO,MAAlC,EAA0C,CAA1C;AACAzB,IAAAA,MAAM,CAACgB,KAAP,CAAaK,MAAb;AACArB,IAAAA,MAAM,CAACgB,KAAP,CAAaE,YAAb;AACD;;AAR2D","sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport plist from '@expo/plist';\nimport Debug from 'debug';\nimport type * as net from 'net';\n\nimport { IOSLibError } from '../lib-errors';\nimport type { ProtocolWriter } from './protocol';\nimport { PlistProtocolReader, ProtocolClient, ProtocolReaderFactory } from './protocol';\n\nconst debug = Debug('expo:xdl:ios:lib:protocol:lockdown');\nexport const LOCKDOWN_HEADER_SIZE = 4;\n\nexport interface LockdownCommand {\n  Command: string;\n  [key: string]: any;\n}\n\nexport interface LockdownResponse {\n  Status: string;\n  [key: string]: any;\n}\n\nexport interface LockdownErrorResponse {\n  Error: string;\n  Request?: string;\n  Service?: string;\n}\n\nexport interface LockdownRequest {\n  Request: string;\n  [key: string]: any;\n}\n\nfunction isDefined(val: any) {\n  return typeof val !== 'undefined';\n}\n\nexport function isLockdownResponse(resp: any): resp is LockdownResponse {\n  return isDefined(resp.Status);\n}\n\nexport function isLockdownErrorResponse(resp: any): resp is LockdownErrorResponse {\n  return isDefined(resp.Error);\n}\n\nexport class LockdownProtocolClient<\n  MessageType extends LockdownRequest | LockdownCommand = LockdownRequest\n> extends ProtocolClient<MessageType> {\n  constructor(socket: net.Socket) {\n    super(socket, new ProtocolReaderFactory(LockdownProtocolReader), new LockdownProtocolWriter());\n  }\n}\n\nexport class LockdownProtocolReader extends PlistProtocolReader {\n  constructor(callback: (data: any) => any) {\n    super(LOCKDOWN_HEADER_SIZE, callback);\n  }\n\n  parseHeader(data: Buffer) {\n    return data.readUInt32BE(0);\n  }\n\n  parseBody(data: Buffer) {\n    const resp = super.parseBody(data);\n    debug(`Response: ${JSON.stringify(resp)}`);\n    if (isLockdownErrorResponse(resp)) {\n      if (resp.Error === 'DeviceLocked') {\n        throw new IOSLibError('Device is currently locked.', 'DeviceLocked');\n      }\n\n      if (resp.Error === 'InvalidService') {\n        let errorMessage = `${resp.Error}: ${resp.Service} (request: ${resp.Request})`;\n        if (resp.Service === 'com.apple.debugserver') {\n          errorMessage +=\n            '\\nTry reconnecting your device. You can also debug service logs with `export DEBUG=expo:xdl:ios:*`';\n        }\n        throw new Error(errorMessage);\n      }\n\n      throw new Error(resp.Error);\n    }\n    return resp;\n  }\n}\n\nexport class LockdownProtocolWriter implements ProtocolWriter {\n  write(socket: net.Socket, plistData: any) {\n    debug(`socket write: ${JSON.stringify(plistData)}`);\n    const plistMessage = plist.build(plistData);\n    const header = Buffer.alloc(LOCKDOWN_HEADER_SIZE);\n    header.writeUInt32BE(plistMessage.length, 0);\n    socket.write(header);\n    socket.write(plistMessage);\n  }\n}\n"],"file":"lockdown.js"}