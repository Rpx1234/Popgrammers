{"version":3,"sources":["../../../../../../src/apple/native-run/ios/lib/client/lockdownd.ts"],"names":["debug","isLockdowndServiceResponse","resp","Request","Service","undefined","Port","isLockdowndSessionResponse","isLockdowndAllValuesResponse","Value","isLockdowndValueResponse","Key","isLockdowndQueryTypeResponse","Type","LockdowndClient","ServiceClient","constructor","socket","LockdownProtocolClient","startService","name","protocolClient","sendMessage","port","enableServiceSSL","EnableServiceSSL","ResponseError","startSession","pairRecord","HostID","SystemBUID","EnableSessionSSL","tls","TLSSocket","secureContext","createSecureContext","secureProtocol","cert","RootCertificate","key","RootPrivateKey","getAllValues","getValue","val","queryType","doHandshake"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Debug from 'debug';\nimport type * as net from 'net';\nimport * as tls from 'tls';\n\nimport { LockdownProtocolClient } from '../protocol/lockdown';\nimport { ResponseError, ServiceClient } from './client';\nimport type { UsbmuxdPairRecord } from './usbmuxd';\n\nconst debug = Debug('expo:xdl:ios:lib:client:lockdownd');\n\nexport interface DeviceValues {\n  BasebandCertId: number;\n  BasebandKeyHashInformation: {\n    AKeyStatus: number;\n    SKeyHash: Buffer;\n    SKeyStatus: number;\n  };\n  BasebandSerialNumber: Buffer;\n  BasebandVersion: string;\n  BoardId: number;\n  BuildVersion: string;\n  ChipID: number;\n  DeviceClass: string;\n  DeviceColor: string;\n  DeviceName: string;\n  DieID: number;\n  HardwareModel: string;\n  HasSiDP: boolean;\n  PartitionType: string;\n  ProductName: string;\n  ProductType: string;\n  ProductVersion: string;\n  ProductionSOC: boolean;\n  ProtocolVersion: string;\n  TelephonyCapability: boolean;\n  UniqueChipID: number;\n  UniqueDeviceID: string;\n  WiFiAddress: string;\n  [key: string]: any;\n}\n\ninterface LockdowndServiceResponse {\n  Request: 'StartService';\n  Service: string;\n  Port: number;\n  EnableServiceSSL?: boolean; // Only on iOS 13+\n}\n\ninterface LockdowndSessionResponse {\n  Request: 'StartSession';\n  EnableSessionSSL: boolean;\n}\n\ninterface LockdowndAllValuesResponse {\n  Request: 'GetValue';\n  Value: DeviceValues;\n}\n\ninterface LockdowndValueResponse {\n  Request: 'GetValue';\n  Key: string;\n  Value: string;\n}\n\ninterface LockdowndQueryTypeResponse {\n  Request: 'QueryType';\n  Type: string;\n}\n\nfunction isLockdowndServiceResponse(resp: any): resp is LockdowndServiceResponse {\n  return resp.Request === 'StartService' && resp.Service !== undefined && resp.Port !== undefined;\n}\n\nfunction isLockdowndSessionResponse(resp: any): resp is LockdowndSessionResponse {\n  return resp.Request === 'StartSession';\n}\n\nfunction isLockdowndAllValuesResponse(resp: any): resp is LockdowndAllValuesResponse {\n  return resp.Request === 'GetValue' && resp.Value !== undefined;\n}\n\nfunction isLockdowndValueResponse(resp: any): resp is LockdowndValueResponse {\n  return resp.Request === 'GetValue' && resp.Key !== undefined && typeof resp.Value === 'string';\n}\n\nfunction isLockdowndQueryTypeResponse(resp: any): resp is LockdowndQueryTypeResponse {\n  return resp.Request === 'QueryType' && resp.Type !== undefined;\n}\n\nexport class LockdowndClient extends ServiceClient<LockdownProtocolClient> {\n  constructor(public socket: net.Socket) {\n    super(socket, new LockdownProtocolClient(socket));\n  }\n\n  async startService(name: string) {\n    debug(`startService: ${name}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'StartService',\n      Service: name,\n    });\n\n    if (isLockdowndServiceResponse(resp)) {\n      return { port: resp.Port, enableServiceSSL: !!resp.EnableServiceSSL };\n    } else {\n      throw new ResponseError(`Error starting service ${name}`, resp);\n    }\n  }\n\n  async startSession(pairRecord: UsbmuxdPairRecord) {\n    debug(`startSession: ${pairRecord}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'StartSession',\n      HostID: pairRecord.HostID,\n      SystemBUID: pairRecord.SystemBUID,\n    });\n\n    if (isLockdowndSessionResponse(resp)) {\n      if (resp.EnableSessionSSL) {\n        this.protocolClient.socket = new tls.TLSSocket(this.protocolClient.socket, {\n          secureContext: tls.createSecureContext({\n            secureProtocol: 'TLSv1_method',\n            cert: pairRecord.RootCertificate,\n            key: pairRecord.RootPrivateKey,\n          }),\n        });\n        debug(`Socket upgraded to TLS connection`);\n      }\n      // TODO: save sessionID for StopSession?\n    } else {\n      throw new ResponseError('Error starting session', resp);\n    }\n  }\n\n  async getAllValues() {\n    debug(`getAllValues`);\n\n    const resp = await this.protocolClient.sendMessage({ Request: 'GetValue' });\n\n    if (isLockdowndAllValuesResponse(resp)) {\n      return resp.Value;\n    } else {\n      throw new ResponseError('Error getting lockdown value', resp);\n    }\n  }\n\n  async getValue(val: string) {\n    debug(`getValue: ${val}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'GetValue',\n      Key: val,\n    });\n\n    if (isLockdowndValueResponse(resp)) {\n      return resp.Value;\n    } else {\n      throw new ResponseError('Error getting lockdown value', resp);\n    }\n  }\n\n  async queryType() {\n    debug('queryType');\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'QueryType',\n    });\n\n    if (isLockdowndQueryTypeResponse(resp)) {\n      return resp.Type;\n    } else {\n      throw new ResponseError('Error getting lockdown query type', resp);\n    }\n  }\n\n  async doHandshake(pairRecord: UsbmuxdPairRecord) {\n    debug('doHandshake');\n\n    // if (await this.lockdownQueryType() !== 'com.apple.mobile.lockdown') {\n    //   throw new Error('Invalid type received from lockdown handshake');\n    // }\n    // await this.getLockdownValue('ProductVersion');\n    // TODO: validate pair and pair\n    await this.startSession(pairRecord);\n  }\n}\n"],"file":"lockdownd.js"}