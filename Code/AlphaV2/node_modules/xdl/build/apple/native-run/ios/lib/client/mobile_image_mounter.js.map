{"version":3,"sources":["../../../../../../src/apple/native-run/ios/lib/client/mobile_image_mounter.ts"],"names":["debug","isMIMUploadCompleteResponse","resp","Status","isMIMUploadReceiveBytesResponse","MobileImageMounterClient","ServiceClient","constructor","socket","LockdownProtocolClient","mountImage","imagePath","imageSig","protocolClient","sendMessage","Command","ImagePath","ImageSignature","ImageType","ResponseError","uploadImage","imageSize","fs","statSync","size","ImageSize","resolve","reject","imageStream","createReadStream","pipe","end","on","err","lookupImage"],"mappings":";;;;;;;AAOA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AASA,MAAMA,KAAK,GAAG,sBAAM,8CAAN,CAAd;;AAoBA,SAASC,2BAAT,CAAqCC,IAArC,EAAmF;AACjF,SAAOA,IAAI,CAACC,MAAL,KAAgB,UAAvB;AACD;;AAED,SAASC,+BAAT,CAAyCF,IAAzC,EAA2F;AACzF,SAAOA,IAAI,CAACC,MAAL,KAAgB,iBAAvB;AACD;;AAEM,MAAME,wBAAN,SAAuCC,uBAAvC,CAAyF;AAC9FC,EAAAA,WAAW,CAACC,MAAD,EAAqB;AAC9B,UAAMA,MAAN,EAAc,KAAIC,kCAAJ,EAA2BD,MAA3B,CAAd;AACD;;AAEe,QAAVE,UAAU,CAACC,SAAD,EAAoBC,QAApB,EAAsC;AACpDZ,IAAAA,KAAK,CAAE,eAAcW,SAAU,EAA1B,CAAL;AAEA,UAAMT,IAAI,GAAG,MAAM,KAAKW,cAAL,CAAoBC,WAApB,CAAgC;AACjDC,MAAAA,OAAO,EAAE,YADwC;AAEjDC,MAAAA,SAAS,EAAEL,SAFsC;AAGjDM,MAAAA,cAAc,EAAEL,QAHiC;AAIjDM,MAAAA,SAAS,EAAE;AAJsC,KAAhC,CAAnB;;AAOA,QAAI,CAAC,oCAAmBhB,IAAnB,CAAD,IAA6BA,IAAI,CAACC,MAAL,KAAgB,UAAjD,EAA6D;AAC3D,YAAM,KAAIgB,uBAAJ,EAAmB,+BAA8BR,SAAU,YAA3D,EAAwET,IAAxE,CAAN;AACD;AACF;;AAEgB,QAAXkB,WAAW,CAACT,SAAD,EAAoBC,QAApB,EAAsC;AACrDZ,IAAAA,KAAK,CAAE,gBAAeW,SAAU,EAA3B,CAAL;AAEA,UAAMU,SAAS,GAAGC,EAAE,GAACC,QAAH,CAAYZ,SAAZ,EAAuBa,IAAzC;AACA,WAAO,KAAKX,cAAL,CAAoBC,WAApB,CACL;AACEC,MAAAA,OAAO,EAAE,cADX;AAEEU,MAAAA,SAAS,EAAEJ,SAFb;AAGEJ,MAAAA,cAAc,EAAEL,QAHlB;AAIEM,MAAAA,SAAS,EAAE;AAJb,KADK,EAOL,CAAChB,IAAD,EAAYwB,OAAZ,EAAqBC,MAArB,KAAgC;AAC9B,UAAIvB,+BAA+B,CAACF,IAAD,CAAnC,EAA2C;AACzC,cAAM0B,WAAW,GAAGN,EAAE,GAACO,gBAAH,CAAoBlB,SAApB,CAApB;AACAiB,QAAAA,WAAW,CAACE,IAAZ,CAAiB,KAAKjB,cAAL,CAAoBL,MAArC,EAA6C;AAAEuB,UAAAA,GAAG,EAAE;AAAP,SAA7C;AACAH,QAAAA,WAAW,CAACI,EAAZ,CAAe,OAAf,EAAwBC,GAAG,IAAIN,MAAM,CAACM,GAAD,CAArC;AACD,OAJD,MAIO,IAAIhC,2BAA2B,CAACC,IAAD,CAA/B,EAAuC;AAC5CwB,QAAAA,OAAO;AACR,OAFM,MAEA;AACLC,QAAAA,MAAM,CACJ,KAAIR,uBAAJ,EAAmB,sCAAqCR,SAAU,gBAAlE,EAAmFT,IAAnF,CADI,CAAN;AAGD;AACF,KAnBI,CAAP;AAqBD;;AAEgB,QAAXgC,WAAW,GAAG;AAClBlC,IAAAA,KAAK,CAAC,aAAD,CAAL;AAEA,WAAO,KAAKa,cAAL,CAAoBC,WAApB,CAAmD;AACxDC,MAAAA,OAAO,EAAE,aAD+C;AAExDG,MAAAA,SAAS,EAAE;AAF6C,KAAnD,CAAP;AAID;;AAtD6F","sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Debug from 'debug';\nimport * as fs from 'fs';\nimport type * as net from 'net';\n\nimport type { LockdownCommand, LockdownResponse } from '../protocol/lockdown';\nimport { isLockdownResponse, LockdownProtocolClient } from '../protocol/lockdown';\nimport { ResponseError, ServiceClient } from './client';\n\nconst debug = Debug('expo:xdl:ios:lib:client:mobile_image_mounter');\n\nexport type MIMMountResponse = LockdownResponse;\n\nexport interface MIMMessage extends LockdownCommand {\n  ImageType: string;\n}\n\nexport interface MIMLookupResponse extends LockdownResponse {\n  ImageSignature?: string;\n}\n\nexport interface MIMUploadCompleteResponse extends LockdownResponse {\n  Status: 'Complete';\n}\n\nexport interface MIMUploadReceiveBytesResponse extends LockdownResponse {\n  Status: 'ReceiveBytesAck';\n}\n\nfunction isMIMUploadCompleteResponse(resp: any): resp is MIMUploadCompleteResponse {\n  return resp.Status === 'Complete';\n}\n\nfunction isMIMUploadReceiveBytesResponse(resp: any): resp is MIMUploadReceiveBytesResponse {\n  return resp.Status === 'ReceiveBytesAck';\n}\n\nexport class MobileImageMounterClient extends ServiceClient<LockdownProtocolClient<MIMMessage>> {\n  constructor(socket: net.Socket) {\n    super(socket, new LockdownProtocolClient(socket));\n  }\n\n  async mountImage(imagePath: string, imageSig: Buffer) {\n    debug(`mountImage: ${imagePath}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      Command: 'MountImage',\n      ImagePath: imagePath,\n      ImageSignature: imageSig,\n      ImageType: 'Developer',\n    });\n\n    if (!isLockdownResponse(resp) || resp.Status !== 'Complete') {\n      throw new ResponseError(`There was an error mounting ${imagePath} on device`, resp);\n    }\n  }\n\n  async uploadImage(imagePath: string, imageSig: Buffer) {\n    debug(`uploadImage: ${imagePath}`);\n\n    const imageSize = fs.statSync(imagePath).size;\n    return this.protocolClient.sendMessage(\n      {\n        Command: 'ReceiveBytes',\n        ImageSize: imageSize,\n        ImageSignature: imageSig,\n        ImageType: 'Developer',\n      },\n      (resp: any, resolve, reject) => {\n        if (isMIMUploadReceiveBytesResponse(resp)) {\n          const imageStream = fs.createReadStream(imagePath);\n          imageStream.pipe(this.protocolClient.socket, { end: false });\n          imageStream.on('error', err => reject(err));\n        } else if (isMIMUploadCompleteResponse(resp)) {\n          resolve();\n        } else {\n          reject(\n            new ResponseError(`There was an error uploading image ${imagePath} to the device`, resp)\n          );\n        }\n      }\n    );\n  }\n\n  async lookupImage() {\n    debug('lookupImage');\n\n    return this.protocolClient.sendMessage<MIMLookupResponse>({\n      Command: 'LookupImage',\n      ImageType: 'Developer',\n    });\n  }\n}\n"],"file":"mobile_image_mounter.js"}