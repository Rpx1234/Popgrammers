{"version":3,"sources":["../../../src/apple/utils/ensureSimulatorAppRunningAsync.ts"],"names":["execAsync","exec","waitForSimulatorAppToStart","interval","action","isSimulatorAppRunningAsync","zeroMeansNo","osascript","trim","error","message","includes","ensureSimulatorAppRunningAsync","udid","Logger","global","info","openSimulatorAppAsync","TimeoutError","args","push","join","killAllAsync"],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEA,MAAMA,SAAS,GAAG,uBAAUC,qBAAV,CAAlB;;AAEO,eAAeC,0BAAf,GAA8D;AACnE,SAAO,8CAA4B;AACjCC,IAAAA,QAAQ,EAAE,EADuB;AAEjCC,IAAAA,MAAM,EAAEC;AAFyB,GAA5B,CAAP;AAID;AAED;AACA;AACA;;;AACO,eAAeA,0BAAf,GAA8D;AACnE,MAAI;AACF,UAAMC,WAAW,GAAG,CAClB,MAAMC,SAAS,GAACP,SAAV,CACJ,uEADI,CADY,EAIlBQ,IAJkB,EAApB;;AAKA,QAAIF,WAAW,KAAK,GAApB,EAAyB;AACvB,aAAO,KAAP;AACD;AACF,GATD,CASE,OAAOG,KAAP,EAAc;AACd,QAAIA,KAAK,CAACC,OAAN,CAAcC,QAAd,CAAuB,2BAAvB,CAAJ,EAAyD;AACvD,aAAO,KAAP;AACD;;AACD,UAAMF,KAAN;AACD;;AAED,SAAO,IAAP;AACD;;AAEM,eAAeG,8BAAf,CAA8C;AAAEC,EAAAA;AAAF,CAA9C,EAA2E;AAChF;AACA,MAAI,EAAE,MAAMR,0BAA0B,EAAlC,CAAJ,EAA2C;AACzCS,uBAAOC,MAAP,CAAcC,IAAd,CAAoB,6DAApB,EADyC,CAGzC;AACA;;;AACA,UAAMC,qBAAqB,CAAC;AAAEJ,MAAAA;AAAF,KAAD,CAA3B;;AACA,QAAI,EAAE,MAAMX,0BAA0B,EAAlC,CAAJ,EAA2C;AACzC,YAAM,KAAIgB,kCAAJ,EACH,6FADG,CAAN;AAGD;AACF;AACF;;AAEM,eAAeD,qBAAf,CAAqC;AAAEJ,EAAAA;AAAF,CAArC,EAAkE;AACvE,QAAMM,IAAI,GAAG,CAAC,MAAD,EAAS,IAAT,EAAe,WAAf,CAAb;;AACA,MAAIN,IAAJ,EAAU;AACR;AACAM,IAAAA,IAAI,CAACC,IAAL,CAAU,QAAV,EAAoB,oBAApB,EAA0CP,IAA1C;AACD;;AACD,QAAMb,SAAS,CAACmB,IAAI,CAACE,IAAL,CAAU,GAAV,CAAD,CAAf;AACD;;AAEM,eAAeC,YAAf,GAA8B;AACnC,SAAO,MAAM,2BAAW,SAAX,EAAsB,CAAC,WAAD,CAAtB,CAAb;AACD","sourcesContent":["import * as osascript from '@expo/osascript';\nimport spawnAsync from '@expo/spawn-async';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nimport { Logger } from '../../internal';\nimport { TimeoutError, waitForActionAsync } from './waitForActionAsync';\n\nconst execAsync = promisify(exec);\n\nexport async function waitForSimulatorAppToStart(): Promise<boolean> {\n  return waitForActionAsync<boolean>({\n    interval: 50,\n    action: isSimulatorAppRunningAsync,\n  });\n}\n\n/**\n * I think the app can be open while no simulators are booted.\n */\nexport async function isSimulatorAppRunningAsync(): Promise<boolean> {\n  try {\n    const zeroMeansNo = (\n      await osascript.execAsync(\n        'tell app \"System Events\" to count processes whose name is \"Simulator\"'\n      )\n    ).trim();\n    if (zeroMeansNo === '0') {\n      return false;\n    }\n  } catch (error) {\n    if (error.message.includes('Application isnâ€™t running')) {\n      return false;\n    }\n    throw error;\n  }\n\n  return true;\n}\n\nexport async function ensureSimulatorAppRunningAsync({ udid }: { udid?: string }) {\n  // Yes, simulators can be booted even if the app isn't running, obviously we'd never want this.\n  if (!(await isSimulatorAppRunningAsync())) {\n    Logger.global.info(`\\u203A Opening the iOS simulator, this might take a moment.`);\n\n    // In theory this would ensure the correct simulator is booted as well.\n    // This isn't theory though, this is Xcode.\n    await openSimulatorAppAsync({ udid });\n    if (!(await waitForSimulatorAppToStart())) {\n      throw new TimeoutError(\n        `Simulator app did not open fast enough. Try opening Simulator first, then running your app.`\n      );\n    }\n  }\n}\n\nexport async function openSimulatorAppAsync({ udid }: { udid?: string }) {\n  const args = ['open', '-a', 'Simulator'];\n  if (udid) {\n    // This has no effect if the app is already running.\n    args.push('--args', '-CurrentDeviceUDID', udid);\n  }\n  await execAsync(args.join(' '));\n}\n\nexport async function killAllAsync() {\n  return await spawnAsync('killAll', ['Simulator']);\n}\n"],"file":"ensureSimulatorAppRunningAsync.js"}