{"version":3,"sources":["../../../src/apple/utils/waitForActionAsync.ts"],"names":["TimeoutError","Error","waitForActionAsync","action","interval","maxWaitTime","complete","start","Date","now"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,YAAN,SAA2BC,KAA3B,CAAiC;;;;AAEjC,eAAeC,kBAAf,CAAqC;AAC1CC,EAAAA,MAD0C;AAE1CC,EAAAA,QAAQ,GAAG,GAF+B;AAG1CC,EAAAA,WAAW,GAAG;AAH4B,CAArC,EAQQ;AACb,MAAIC,QAAJ;AACA,QAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;;AACA,KAAG;AACDH,IAAAA,QAAQ,GAAG,MAAMH,MAAM,EAAvB;AAEA,UAAM,8BAAWC,QAAX,CAAN;;AACA,QAAII,IAAI,CAACC,GAAL,KAAaF,KAAb,GAAqBF,WAAzB,EAAsC;AACpC;AACD;AACF,GAPD,QAOS,CAACC,QAPV;;AASA,SAAOA,QAAP;AACD","sourcesContent":["import { delayAsync } from '../../utils/delayAsync';\n\nexport class TimeoutError extends Error {}\n\nexport async function waitForActionAsync<T>({\n  action,\n  interval = 100,\n  maxWaitTime = 20000,\n}: {\n  action: () => T | Promise<T>;\n  interval?: number;\n  maxWaitTime?: number;\n}): Promise<T> {\n  let complete: T;\n  const start = Date.now();\n  do {\n    complete = await action();\n\n    await delayAsync(interval);\n    if (Date.now() - start > maxWaitTime) {\n      break;\n    }\n  } while (!complete);\n\n  return complete;\n}\n"],"file":"waitForActionAsync.js"}