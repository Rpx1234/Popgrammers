{"version":3,"sources":["../../src/apple/AppleDevice.ts"],"names":["EXPO_USE_APPLE_DEVICE","debug","isEnabled","getConnectedDevices","usbmuxClient","UsbmuxdClient","connectUsbmuxdSocket","usbmuxDevices","getDevices","socket","end","Promise","all","map","d","connect","device","LockdowndClient","getAllValues","runOnDevice","udid","appPath","bundleId","waitForApp","deltaPath","onProgress","clientManager","ClientManager","create","mountDeveloperDiskImage","packageName","path","basename","destPackagePath","join","uploadApp","installer","getInstallationProxyClient","installApp","ApplicationsType","CFBundleIdentifier","CloseOnInvalidate","InvalidateOnDetach","IsUserInitiated","PreferWifi","PackageType","ShadowParentKey","appInfo","lookupApp","debugServerClient","launchApp","detach","halt","result","continue","kill","imageMounter","getMobileImageMounterClient","lookupImage","ImageSignature","version","getLockdowndClient","getValue","developerDiskImagePath","developerDiskImageSig","uploadImage","mountImage","srcPath","destinationPath","afcClient","getAFCClient","getFileInfo","err","AFCError","status","AFC_STATUS","OBJECT_NOT_FOUND","makeDirectory","uploadDirectory","tries","getDebugserverClient","setMaxPacketSize","setWorkingDir","Container","Path","CFBundleExecutable","checkLaunchSuccess","res","sendCommand","console","warn","Error"],"mappings":"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","sourcesContent":["import Debug from 'debug';\nimport { readFileSync } from 'fs';\nimport { boolish } from 'getenv';\nimport * as path from 'path';\n\nimport {\n  AFC_STATUS,\n  AFCError,\n  ClientManager,\n  LockdowndClient,\n  OnInstallProgressCallback,\n  UsbmuxdClient,\n} from './native-run/ios/lib';\nimport type { DeviceValues, IPLookupResult } from './native-run/ios/lib';\nimport { getDeveloperDiskImagePath } from './native-run/ios/utils/xcode';\nimport { onBeforeExit, wait } from './native-run/utils/process';\n\nconst EXPO_USE_APPLE_DEVICE = boolish('EXPO_USE_APPLE_DEVICE', false);\n\nconst debug = Debug('expo:xdl:ios:utils:device');\n\nexport function isEnabled() {\n  return EXPO_USE_APPLE_DEVICE;\n}\n\nexport async function getConnectedDevices(): Promise<DeviceValues[]> {\n  const usbmuxClient = new UsbmuxdClient(UsbmuxdClient.connectUsbmuxdSocket());\n  const usbmuxDevices = await usbmuxClient.getDevices();\n  usbmuxClient.socket.end();\n\n  return Promise.all(\n    usbmuxDevices.map(\n      async (d: any): Promise<DeviceValues> => {\n        const socket = await new UsbmuxdClient(UsbmuxdClient.connectUsbmuxdSocket()).connect(\n          d,\n          62078\n        );\n        const device = await new LockdowndClient(socket).getAllValues();\n        socket.end();\n        return device;\n      }\n    )\n  );\n}\n\nexport async function runOnDevice({\n  udid,\n  appPath,\n  bundleId,\n  waitForApp,\n  deltaPath,\n  onProgress,\n}: {\n  udid: string;\n  appPath: string;\n  bundleId: string;\n  waitForApp: boolean;\n  deltaPath: string;\n  onProgress: OnInstallProgressCallback;\n}) {\n  const clientManager = await ClientManager.create(udid);\n\n  try {\n    await mountDeveloperDiskImage(clientManager);\n\n    const packageName = path.basename(appPath);\n    const destPackagePath = path.join('PublicStaging', packageName);\n\n    await uploadApp(clientManager, appPath, destPackagePath);\n\n    const installer = await clientManager.getInstallationProxyClient();\n    await installer.installApp(\n      destPackagePath,\n      bundleId,\n      {\n        // https://github.com/ios-control/ios-deploy/blob/0f2ffb1e564aa67a2dfca7cdf13de47ce489d835/src/ios-deploy/ios-deploy.m#L2491-L2508\n        ApplicationsType: 'Any',\n\n        CFBundleIdentifier: bundleId,\n        CloseOnInvalidate: '1',\n        InvalidateOnDetach: '1',\n        IsUserInitiated: '1',\n        // Disable checking for wifi devices, this is nominally faster.\n        PreferWifi: '0',\n        // Only info I could find on these:\n        // https://github.com/wwxxyx/Quectel_BG96/blob/310876f90fc1093a59e45e381160eddcc31697d0/Apple_Homekit/homekit_certification_tools/ATS%206/ATS%206/ATS.app/Contents/Frameworks/CaptureKit.framework/Versions/A/Resources/MobileDevice/MobileInstallation.h#L112-L121\n        PackageType: 'Developer',\n        ShadowParentKey: deltaPath,\n        // SkipUninstall: '1'\n      },\n      onProgress\n    );\n\n    const { [bundleId]: appInfo } = await installer.lookupApp([bundleId]);\n    // launch fails with EBusy or ENotFound if you try to launch immediately after install\n    await wait(200);\n    const debugServerClient = await launchApp(clientManager, { appInfo, detach: !waitForApp });\n    if (waitForApp) {\n      onBeforeExit(async () => {\n        // causes continue() to return\n        debugServerClient.halt();\n        // give continue() time to return response\n        await wait(64);\n      });\n\n      debug(`Waiting for app to close...\\n`);\n      const result = await debugServerClient.continue();\n      // TODO: I have no idea what this packet means yet (successful close?)\n      // if not a close (ie, most likely due to halt from onBeforeExit), then kill the app\n      if (result !== 'W00') {\n        await debugServerClient.kill();\n      }\n    }\n  } finally {\n    clientManager.end();\n  }\n}\n\nasync function mountDeveloperDiskImage(clientManager: ClientManager) {\n  const imageMounter = await clientManager.getMobileImageMounterClient();\n  // Check if already mounted. If not, mount.\n  if (!(await imageMounter.lookupImage()).ImageSignature) {\n    // verify DeveloperDiskImage exists (TODO: how does this work on Windows/Linux?)\n    // TODO: if windows/linux, download?\n    const version = await (await clientManager.getLockdowndClient()).getValue('ProductVersion');\n    const developerDiskImagePath = await getDeveloperDiskImagePath(version);\n    const developerDiskImageSig = readFileSync(`${developerDiskImagePath}.signature`);\n    await imageMounter.uploadImage(developerDiskImagePath, developerDiskImageSig);\n    await imageMounter.mountImage(developerDiskImagePath, developerDiskImageSig);\n  }\n}\n\nasync function uploadApp(clientManager: ClientManager, srcPath: string, destinationPath: string) {\n  const afcClient = await clientManager.getAFCClient();\n  try {\n    await afcClient.getFileInfo('PublicStaging');\n  } catch (err: any) {\n    if (err instanceof AFCError && err.status === AFC_STATUS.OBJECT_NOT_FOUND) {\n      await afcClient.makeDirectory('PublicStaging');\n    } else {\n      throw err;\n    }\n  }\n  await afcClient.uploadDirectory(srcPath, destinationPath);\n}\n\nasync function launchApp(\n  clientManager: ClientManager,\n  { appInfo, detach }: { appInfo: IPLookupResult[string]; detach?: boolean }\n) {\n  let tries = 0;\n  while (tries < 3) {\n    const debugServerClient = await clientManager.getDebugserverClient();\n    await debugServerClient.setMaxPacketSize(1024);\n    await debugServerClient.setWorkingDir(appInfo.Container);\n    await debugServerClient.launchApp(appInfo.Path, appInfo.CFBundleExecutable);\n\n    const result = await debugServerClient.checkLaunchSuccess();\n    if (result === 'OK') {\n      if (detach) {\n        // https://github.com/libimobiledevice/libimobiledevice/blob/25059d4c7d75e03aab516af2929d7c6e6d4c17de/tools/idevicedebug.c#L455-L464\n        const res = await debugServerClient.sendCommand('D', []);\n        debug('Disconnect from debug server request:', res);\n        if (res !== 'OK') {\n          console.warn(\n            'Something went wrong while attempting to disconnect from iOS debug server, you may need to reopen the app manually.'\n          );\n        }\n      }\n\n      return debugServerClient;\n    } else if (result === 'EBusy' || result === 'ENotFound') {\n      debug('Device busy or app not found, trying to launch again in .5s...');\n      tries++;\n      debugServerClient.socket.end();\n      await wait(500);\n    } else {\n      throw new Error(`There was an error launching app: ${result}`);\n    }\n  }\n  throw new Error('Unable to launch app, number of tries exceeded');\n}\n"],"file":"AppleDevice.js"}