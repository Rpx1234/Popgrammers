{"version":3,"sources":["../../src/apple/CoreSimulator.ts"],"names":["EXPO_USE_CORE_SIM","isEnabled","DeviceState","CoreSimulatorError","Error","constructor","message","code","getDevicesDirectory","path","join","os","homedir","getDirectoryForDeviceAsync","udid","deviceFolder","fs","existsSync","possibleUdids","getDirectoriesAsync","errorMessage","length","resolveUdidAsync","bootedDevice","getBootedDeviceAsync","UDID","Logger","global","debug","listDevicesAsync","devicesDirectory","devices","Promise","all","map","device","plistPath","data","devicePlistToSimulatorDevice","filter","Boolean","getDeviceInfoAsync","deviceDirectory","runtimeSuffix","runtime","split","pop","osType","osVersionComponents","osVersion","dataPath","logPath","isAvailable","isDeleted","deviceTypeIdentifier","deviceType","state","BOOTED","name","windowName","isBooted","resolve","reject","complete","error","getContainerPathAsync","bundleIdentifier","appsFolder","apps","app","appFolder","MCMMetadataIdentifier","binaryPath","findBinaryFileInDirectory","folder","absolute","cwd","directory","promises","readdir","withFileTypes","catch","isDirectory"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport { boolish } from 'getenv';\nimport { sync as globSync } from 'glob';\nimport os from 'os';\nimport path from 'path';\n\nimport { SimulatorDevice } from '../SimControl';\nimport { Logger } from '../internal';\nimport { parseBinaryPlistAsync } from '../utils/parseBinaryPlistAsync';\n\n// Enable this to test the JS version of simctl\nconst EXPO_USE_CORE_SIM = boolish('EXPO_USE_CORE_SIM', false);\n\nexport function isEnabled() {\n  return EXPO_USE_CORE_SIM;\n}\n\nenum DeviceState {\n  BOOTED = 3,\n  SHUTDOWN = 1,\n}\n\nexport class CoreSimulatorError extends Error {\n  constructor(public message: string, public code?: 'MALFORMED_BINARY' | 'INVALID_UDID') {\n    super(message);\n  }\n}\n\n/**\n * CoreSimulator devices folder.\n *\n * @returns /Users/evanbacon/Library/Developer/CoreSimulator/Devices\n */\nfunction getDevicesDirectory(): string {\n  return path.join(os.homedir(), '/Library/Developer/CoreSimulator/Devices/');\n}\n\n/**\n * CoreSimulator device folder, asserts when the device is invalid.\n *\n * @param props.udid device udid. Cannot be `booted`.\n * @returns /Users/evanbacon/Library/Developer/CoreSimulator/Devices/EFEEA6EF-E3F5-4EDE-9B72-29EAFA7514AE/\n */\nasync function getDirectoryForDeviceAsync(udid: string): Promise<string> {\n  const deviceFolder = path.join(getDevicesDirectory(), udid);\n\n  // Invalid udid (no matching device)\n  if (!fs.existsSync(deviceFolder)) {\n    const possibleUdids = await getDirectoriesAsync(getDevicesDirectory());\n    let errorMessage = `Invalid iOS Simulator device UDID: ${udid}.`;\n    if (possibleUdids.length) {\n      errorMessage += ` Expected one of: ${possibleUdids.join(', ')}`;\n    }\n    throw new CoreSimulatorError(errorMessage, 'INVALID_UDID');\n  }\n  return deviceFolder;\n}\n\nasync function resolveUdidAsync(udid: string): Promise<string> {\n  if (udid === 'booted') {\n    const bootedDevice = await getBootedDeviceAsync();\n    if (!bootedDevice) {\n      throw new CoreSimulatorError('No devices are booted.', 'INVALID_UDID');\n    }\n    udid = bootedDevice.UDID;\n    Logger.global.debug('Resolved booted device: ' + udid);\n  }\n  return udid;\n}\n\nexport async function listDevicesAsync(): Promise<SimulatorDevice[]> {\n  const devicesDirectory = getDevicesDirectory();\n  const devices = await getDirectoriesAsync(devicesDirectory);\n\n  return (\n    await Promise.all(\n      devices.map(\n        async (device): Promise<SimulatorDevice | null> => {\n          const plistPath = path.join(devicesDirectory, device, 'device.plist');\n          if (!fs.existsSync(plistPath)) return null;\n          // The plist is stored in binary format\n          const data = await parseBinaryPlistAsync(plistPath);\n          return devicePlistToSimulatorDevice(devicesDirectory, data);\n        }\n      )\n    )\n  ).filter(Boolean) as SimulatorDevice[];\n}\n\nexport async function getDeviceInfoAsync({\n  udid,\n}: { udid?: string } = {}): Promise<SimulatorDevice> {\n  if (!udid || udid === 'booted') {\n    const bootedDevice = await getBootedDeviceAsync();\n    if (!bootedDevice) {\n      throw new CoreSimulatorError('No devices are booted.', 'INVALID_UDID');\n    }\n    const deviceDirectory = await getDirectoryForDeviceAsync(bootedDevice.UDID);\n    return devicePlistToSimulatorDevice(deviceDirectory, bootedDevice);\n  }\n\n  const deviceDirectory = await getDirectoryForDeviceAsync(udid);\n  const plistPath = path.join(deviceDirectory, 'device.plist');\n  // The plist is stored in binary format\n  const data = await parseBinaryPlistAsync(plistPath);\n  return devicePlistToSimulatorDevice(deviceDirectory, data);\n}\n\nexport function devicePlistToSimulatorDevice(deviceDirectory: string, data: any): SimulatorDevice {\n  const runtimeSuffix = data.runtime.split('com.apple.CoreSimulator.SimRuntime.').pop()!;\n  // Create an array [tvOS, 13, 4]\n  const [osType, ...osVersionComponents] = runtimeSuffix.split('-');\n  // Join the end components [13, 4] -> '13.4'\n  const osVersion = osVersionComponents.join('.');\n  return {\n    ...data,\n    /**\n     * '/Users/name/Library/Developer/CoreSimulator/Devices/00E55DC0-0364-49DF-9EC6-77BE587137D4/data'\n     */\n    dataPath: path.join(deviceDirectory, 'data'),\n    /**\n     * '/Users/name/Library/Logs/CoreSimulator/00E55DC0-0364-49DF-9EC6-77BE587137D4'\n     */\n    logPath: path.join(os.homedir(), 'Library/Logs/CoreSimulator', data.UDID),\n    /**\n     * '00E55DC0-0364-49DF-9EC6-77BE587137D4'\n     */\n    udid: data.UDID,\n    /**\n     * com.apple.CoreSimulator.SimRuntime.tvOS-13-4\n     */\n    runtime: data.runtime,\n    isAvailable: !data.isDeleted,\n    /**\n     * 'com.apple.CoreSimulator.SimDeviceType.Apple-TV-1080p'\n     */\n    deviceTypeIdentifier: data.deviceType,\n    state: data.state === DeviceState.BOOTED ? 'Booted' : 'Shutdown',\n    /**\n     * 'Apple TV'\n     */\n    name: data.name,\n\n    /**\n     * 'iOS'\n     */\n    osType: osType as SimulatorDevice['osType'],\n    /**\n     * '13.4'\n     */\n    osVersion,\n    /**\n     * 'iPhone 11 (13.6)'\n     */\n    windowName: `${data.name} (${osVersion})`,\n\n    // Compare state stored under `state` to 3 (booted)\n    isBooted: data.state === DeviceState.BOOTED,\n  };\n}\n\n/**\n * Get UDID for the first booted simulator. It's unclear if this is the exact method used by  `xcrun simctl` to determine which device is \"booted\".\n *\n * @returns EFEEA6EF-E3F5-4EDE-9B72-29EAFA7514AE\n */\nexport async function getBootedDeviceAsync(): Promise<{ UDID: string } | null> {\n  const devicesDirectory = getDevicesDirectory();\n  const devices = await getDirectoriesAsync(devicesDirectory);\n\n  // parallelize searching for the matching app\n  return new Promise<{ UDID: string } | null>(async (resolve, reject) => {\n    let complete: boolean = false;\n    try {\n      await Promise.all(\n        devices.map(async device => {\n          if (complete) return;\n          const plistPath = path.join(devicesDirectory, device, 'device.plist');\n          // The plist is stored in binary format\n          const data = await parseBinaryPlistAsync(plistPath);\n          // Compare state stored under `state` to 3 (booted)\n          if (data.state === DeviceState.BOOTED) {\n            complete = true;\n            resolve(data);\n          }\n        })\n      );\n      if (!complete) {\n        resolve(null);\n      }\n    } catch (error) {\n      if (!complete) {\n        reject(error);\n      }\n    }\n  });\n}\n\n/**\n * Returns the local path for the installed binary.app on a given Apple simulator. Returns null when the app isn't installed.\n *\n * This can be used as a replacement for `xcrun simctl get_app_container <udid> <bundleIdentifier>` but it's over 200x faster.\n *\n * @param props.udid device udid.\n * @param props.bundleIdentifier bundle identifier for app\n * @returns local file path to installed app binary, e.g. '/Users/evanbacon/Library/Developer/CoreSimulator/Devices/EFEEA6EF-E3F5-4EDE-9B72-29EAFA7514AE/data/Containers/Bundle/Application/FA43A0C6-C2AD-442D-B8B1-EAF3E88CF3BF/Exponent-2.21.3.tar.app'\n */\nexport async function getContainerPathAsync({\n  udid,\n  bundleIdentifier,\n}: {\n  udid: string;\n  bundleIdentifier: string;\n}): Promise<string | null> {\n  udid = await resolveUdidAsync(udid);\n  // Like: `/Users/evanbacon/Library/Developer/CoreSimulator/Devices/EFEEA6EF-E3F5-4EDE-9B72-29EAFA7514AE/data/Containers/Bundle/Application/`\n  // TODO: Maybe shallow glob for `.com.apple.mobile_container_manager.metadata.plist` to find apps faster\n  const appsFolder = path.join(\n    await getDirectoryForDeviceAsync(udid),\n    'data/Containers/Bundle/Application'\n  );\n\n  // Get all apps for a device\n  // Like: `['FA43A0C6-C2AD-442D-B8B1-EAF3E88CF3BF']`\n  const apps = await getDirectoriesAsync(appsFolder);\n\n  // parallelize searching for the matching app\n  return new Promise<string | null>(async (resolve, reject) => {\n    let complete: boolean = false;\n    try {\n      await Promise.all(\n        apps.map(async app => {\n          if (complete) return;\n          const appFolder = path.join(appsFolder, app);\n          const plistPath = path.join(\n            appFolder,\n            '.com.apple.mobile_container_manager.metadata.plist'\n          );\n          // The plist is stored in binary format\n          const data = await parseBinaryPlistAsync(plistPath);\n          // Compare bundle identifier stored under `MCMMetadataIdentifier`\n          if (data.MCMMetadataIdentifier === bundleIdentifier) {\n            // Find .app file in the app folder\n            const binaryPath = findBinaryFileInDirectory(appFolder);\n            if (!binaryPath) {\n              throw new CoreSimulatorError(\n                `Found matching app container at \"${appFolder}\" but binary (*.app file) is missing.`,\n                'MALFORMED_BINARY'\n              );\n            }\n            complete = true;\n            resolve(binaryPath);\n          }\n        })\n      );\n      if (!complete) {\n        resolve(null);\n      }\n    } catch (error) {\n      if (!complete) {\n        reject(error);\n      }\n    }\n  });\n}\n\nfunction findBinaryFileInDirectory(folder: string) {\n  // Find .app file in the app folder\n  const binaryPath = globSync('*.app', {\n    absolute: true,\n    cwd: folder,\n  })[0];\n\n  return binaryPath || null;\n}\n\nasync function getDirectoriesAsync(directory: string) {\n  return (await fs.promises.readdir(directory, { withFileTypes: true }).catch(() => []))\n    .filter(device => device.isDirectory())\n    .map(device => device.name);\n}\n"],"file":"CoreSimulator.js"}