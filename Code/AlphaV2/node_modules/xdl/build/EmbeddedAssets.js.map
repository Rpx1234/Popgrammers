{"version":3,"sources":["../src/EmbeddedAssets.ts"],"names":["PLACEHOLDER_URL","FYI_URL","configureAsync","config","_maybeWriteArtifactsToDiskAsync","_maybeConfigureExpoKitEmbeddedAssetsAsync","_maybeRunModifiedExpoUpdatesPluginAsync","getEmbeddedManifestPath","platform","projectRoot","exp","ios","publishManifestPath","_getDefaultEmbeddedManifestPath","android","path","join","_getDefaultEmbeddedAssetDir","_getDefaultEmbeddedBundlePath","iosSupportingDirectory","getIOSPaths","Error","shouldEmbedAssetsForExpoUpdates","pkg","target","dependencies","expoUpdatesVersion","semver","coerce","satisfies","fs","existsSync","iosManifest","iosBundle","androidManifest","androidBundle","androidBundlePath","androidManifestPath","iosBundlePath","iosManifestPath","defaultAndroidDir","defaultIosDir","ensureDir","logger","global","warn","publishBundlePath","JSON","stringify","releaseChannel","androidManifestUrl","context","StandaloneContext","createUserContext","supportingDirectory","IosWorkspace","getPaths","IosPlist","modifyAsync","shellPlist","constantsPath","ExponentTools","deleteLinesInFileAsync","regexFileAsync","bundleUrl","iosManifestUrl","isLikelyFirstIOSPublish","expoPlistPath","expoPlistForProject","plist","parse","readFileSync","currentlyConfiguredExpoPlist","IOSConfig","Updates","setUpdatesConfig","Config","UPDATE_URL","RELEASE_CHANNEL","configuredIOSUpdatesURL","writeFileSync","build","SDK_VERSION","RUNTIME_VERSION","key","currentlyConfiguredValue","inferredValue","message","WarningAggregator","addWarningIOS","isLikelyFirstAndroidPublish","androidManifestXmlPath","AndroidManifestKeyForUpdateURL","AndroidConfig","currentlyConfiguredAndroidManifest","Manifest","readAndroidManifestAsync","currentConfiguredManifestApplication","getMainApplicationOrThrow","currentlyConfiguredMetaDataAttributes","map","md","inferredAndroidManifest","inferredMainApplication","addMetaDataItemToMainApplication","currentlyConfiguredAndroidUpdateURL","find","x","writeAndroidManifestAsync","inferredMetaDataAttributes","addWarningAndroid","platformSpecificMessage","skipSDKVersionRequirement","projectName","name","iosProjectDirectory","XcodeUtils","sanitizedName","iconPath"],"mappings":"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","sourcesContent":["import { ExpoAppManifest, getConfig, PackageJSONConfig, ProjectTarget } from '@expo/config';\nimport { AndroidConfig, IOSConfig, WarningAggregator } from '@expo/config-plugins';\nimport plist from '@expo/plist';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport semver from 'semver';\n\nimport {\n  ExponentTools,\n  IosPlist,\n  IosWorkspace,\n  Logger as logger,\n  StandaloneContext,\n  writeArtifactSafelyAsync,\n} from './internal';\n\nconst PLACEHOLDER_URL = 'YOUR-APP-URL-HERE';\nconst FYI_URL = 'https://expo.fyi/expo-updates-config';\n\nexport type EmbeddedAssetsConfiguration = {\n  projectRoot: string;\n  pkg: PackageJSONConfig;\n  exp: ExpoAppManifest;\n  releaseChannel?: string;\n  iosManifestUrl: string;\n  iosManifest: any;\n  iosBundle: string | Uint8Array;\n  androidManifestUrl: string;\n  androidManifest: any;\n  androidBundle: string | Uint8Array;\n  target: ProjectTarget;\n};\n\nexport async function configureAsync(config: EmbeddedAssetsConfiguration) {\n  await _maybeWriteArtifactsToDiskAsync(config);\n  await _maybeConfigureExpoKitEmbeddedAssetsAsync(config);\n  await _maybeRunModifiedExpoUpdatesPluginAsync(config);\n}\n\nexport function getEmbeddedManifestPath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  if (platform === 'ios') {\n    return exp.ios && exp.ios.publishManifestPath\n      ? exp.ios.publishManifestPath\n      : _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n  } else if (platform === 'android') {\n    return exp.android && exp.android.publishManifestPath\n      ? exp.android.publishManifestPath\n      : _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n  }\n  return _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n}\n\nfunction _getDefaultEmbeddedManifestPath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  return path.join(_getDefaultEmbeddedAssetDir(platform, projectRoot, exp), 'app.manifest');\n}\n\nfunction _getDefaultEmbeddedBundlePath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  return path.join(_getDefaultEmbeddedAssetDir(platform, projectRoot, exp), 'app.bundle');\n}\n\nfunction _getDefaultEmbeddedAssetDir(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  if (platform === 'ios') {\n    const { iosSupportingDirectory } = getIOSPaths(projectRoot);\n    return iosSupportingDirectory;\n  } else if (platform === 'android') {\n    return path.join(projectRoot, 'android', 'app', 'src', 'main', 'assets');\n  } else {\n    throw new Error('Embedding assets is not supported for platform ' + platform);\n  }\n}\n\nexport function shouldEmbedAssetsForExpoUpdates(\n  projectRoot: string,\n  exp: ExpoAppManifest,\n  pkg: PackageJSONConfig,\n  target: ProjectTarget\n): boolean {\n  if (!pkg.dependencies?.['expo-updates'] || target !== 'bare') {\n    return false;\n  }\n\n  // semver.coerce can return null\n  const expoUpdatesVersion = semver.coerce(pkg.dependencies['expo-updates']);\n\n  // expo-updates 0.1.x relies on expo-cli automatically embedding the manifest and bundle\n  if (expoUpdatesVersion && semver.satisfies(expoUpdatesVersion, '~0.1.0')) {\n    return true;\n  }\n\n  // We also want to support developers who had expo-updates 0.1.x and upgraded but still rely on\n  // expo-cli's automatic embedding. If the files already exist we can assume we need to update them\n  if (\n    fs.existsSync(_getDefaultEmbeddedBundlePath('android', projectRoot, exp)) ||\n    fs.existsSync(_getDefaultEmbeddedManifestPath('android', projectRoot, exp)) ||\n    fs.existsSync(_getDefaultEmbeddedBundlePath('ios', projectRoot, exp)) ||\n    fs.existsSync(_getDefaultEmbeddedManifestPath('ios', projectRoot, exp))\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nasync function _maybeWriteArtifactsToDiskAsync(config: EmbeddedAssetsConfiguration) {\n  const {\n    projectRoot,\n    pkg,\n    exp,\n    iosManifest,\n    iosBundle,\n    androidManifest,\n    androidBundle,\n    target,\n  } = config;\n\n  let androidBundlePath;\n  let androidManifestPath;\n  let iosBundlePath;\n  let iosManifestPath;\n\n  if (shouldEmbedAssetsForExpoUpdates(projectRoot, exp, pkg, target)) {\n    const defaultAndroidDir = _getDefaultEmbeddedAssetDir('android', projectRoot, exp);\n    const defaultIosDir = _getDefaultEmbeddedAssetDir('ios', projectRoot, exp);\n\n    await fs.ensureDir(defaultIosDir);\n    await fs.ensureDir(defaultAndroidDir);\n\n    androidBundlePath = _getDefaultEmbeddedBundlePath('android', projectRoot, exp);\n    androidManifestPath = _getDefaultEmbeddedManifestPath('android', projectRoot, exp);\n    iosBundlePath = _getDefaultEmbeddedBundlePath('ios', projectRoot, exp);\n    iosManifestPath = _getDefaultEmbeddedManifestPath('ios', projectRoot, exp);\n\n    if (!fs.existsSync(iosBundlePath) || !fs.existsSync(iosManifestPath)) {\n      logger.global.warn(\n        'Creating app.manifest and app.bundle inside of your ios/<project>/Supporting directory.\\nBe sure to add these files to your Xcode project. More info at https://expo.fyi/embedded-assets'\n      );\n    }\n  }\n\n  // allow custom overrides\n  if (exp.android?.publishBundlePath) {\n    androidBundlePath = exp.android.publishBundlePath;\n  }\n  if (exp.android?.publishManifestPath) {\n    androidManifestPath = exp.android.publishManifestPath;\n  }\n  if (exp.ios?.publishBundlePath) {\n    iosBundlePath = exp.ios.publishBundlePath;\n  }\n  if (exp.ios?.publishManifestPath) {\n    iosManifestPath = exp.ios.publishManifestPath;\n  }\n\n  if (androidBundlePath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishBundlePath',\n      androidBundlePath,\n      androidBundle\n    );\n  }\n\n  if (androidManifestPath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishManifestPath',\n      androidManifestPath,\n      JSON.stringify(androidManifest)\n    );\n  }\n\n  if (iosBundlePath) {\n    await writeArtifactSafelyAsync(projectRoot, 'ios.publishBundlePath', iosBundlePath, iosBundle);\n  }\n\n  if (iosManifestPath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishManifestPath',\n      iosManifestPath,\n      JSON.stringify(iosManifest)\n    );\n  }\n}\n\nasync function _maybeConfigureExpoKitEmbeddedAssetsAsync(config: EmbeddedAssetsConfiguration) {\n  const { projectRoot, exp, releaseChannel, androidManifestUrl, androidManifest } = config;\n\n  const context = StandaloneContext.createUserContext(projectRoot, exp);\n  const { supportingDirectory } = IosWorkspace.getPaths(context);\n\n  // iOS ExpoKit\n  if (releaseChannel && fs.existsSync(path.join(supportingDirectory, 'EXShell.plist'))) {\n    // This is an ExpoKit app, set properties in EXShell.plist\n    await IosPlist.modifyAsync(supportingDirectory, 'EXShell', (shellPlist: any) => {\n      shellPlist.releaseChannel = releaseChannel;\n      return shellPlist;\n    });\n  }\n\n  // Android ExpoKit\n  const constantsPath = path.join(\n    projectRoot,\n    'android',\n    'app',\n    'src',\n    'main',\n    'java',\n    'host',\n    'exp',\n    'exponent',\n    'generated',\n    'AppConstants.java'\n  );\n  if (fs.existsSync(constantsPath)) {\n    // This is an ExpoKit app\n    // We need to add EmbeddedResponse instances on Android to tell the runtime\n    // that the shell app manifest and bundle is packaged.\n    await ExponentTools.deleteLinesInFileAsync(\n      `START EMBEDDED RESPONSES`,\n      `END EMBEDDED RESPONSES`,\n      constantsPath\n    );\n    await ExponentTools.regexFileAsync(\n      '// ADD EMBEDDED RESPONSES HERE',\n      `\n      // ADD EMBEDDED RESPONSES HERE\n      // START EMBEDDED RESPONSES\n      embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifestUrl}\", \"assets://shell-app-manifest.json\", \"application/json\"));\n      embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifest.bundleUrl}\", \"assets://shell-app.bundle\", \"application/javascript\"));\n      // END EMBEDDED RESPONSES`,\n      constantsPath\n    );\n    if (releaseChannel) {\n      await ExponentTools.regexFileAsync(\n        /RELEASE_CHANNEL = \"[^\"]*\"/,\n        `RELEASE_CHANNEL = \"${releaseChannel}\"`,\n        constantsPath\n      );\n    }\n  }\n}\n\n/**\n * Guess if this is a user's first publish and run a slightly modified expo-updates plugin.\n * If it is not their first publish and a config mismatch is noticed, log warnings.\n */\nasync function _maybeRunModifiedExpoUpdatesPluginAsync(config: EmbeddedAssetsConfiguration) {\n  if (!config.pkg.dependencies?.['expo-updates'] || config.target === 'managed') {\n    return;\n  }\n\n  const { projectRoot, exp, releaseChannel, iosManifestUrl, androidManifestUrl } = config;\n\n  const { iosSupportingDirectory: supportingDirectory } = getIOSPaths(projectRoot);\n\n  // iOS expo-updates\n  let isLikelyFirstIOSPublish = false;\n  const expoPlistPath = path.join(supportingDirectory, 'Expo.plist');\n  if (fs.existsSync(expoPlistPath)) {\n    let expoPlistForProject = plist.parse(await fs.readFileSync(expoPlistPath, 'utf8'));\n    const currentlyConfiguredExpoPlist = { ...expoPlistForProject };\n\n    // The username is only used for defining a default updates URL.\n    // Since we overwrite the URL below the username is superfluous.\n    expoPlistForProject = IOSConfig.Updates.setUpdatesConfig(\n      projectRoot,\n      exp,\n      expoPlistForProject,\n      /*expoUsername*/ null\n    );\n\n    // overwrite the URL defined in IOSConfig.Updates.setUpdatesConfig\n    expoPlistForProject[IOSConfig.Updates.Config.UPDATE_URL] = iosManifestUrl;\n    // set a release channel (not done in updates plugin)\n    if (releaseChannel) {\n      expoPlistForProject[IOSConfig.Updates.Config.RELEASE_CHANNEL] = releaseChannel;\n    }\n\n    // If we guess that this is a users first publish, modify the native code to match\n    // what is configured.\n    const configuredIOSUpdatesURL =\n      currentlyConfiguredExpoPlist[IOSConfig.Updates.Config.UPDATE_URL];\n    if (configuredIOSUpdatesURL === PLACEHOLDER_URL) {\n      isLikelyFirstIOSPublish = true;\n      fs.writeFileSync(expoPlistPath, plist.build(expoPlistForProject));\n    } else {\n      // Log warnings if this is not the first publish and critical properties seem misconfigured\n      const {\n        UPDATE_URL,\n        SDK_VERSION,\n        RUNTIME_VERSION,\n        RELEASE_CHANNEL,\n      } = IOSConfig.Updates.Config;\n      for (const key of [UPDATE_URL, SDK_VERSION, RUNTIME_VERSION, RELEASE_CHANNEL]) {\n        let currentlyConfiguredValue = currentlyConfiguredExpoPlist[key];\n        const inferredValue = expoPlistForProject[key];\n        if (key === RELEASE_CHANNEL && inferredValue) {\n          // A client with an undefined release channel is mapped to\n          // 'default' in the server, so avoid logging an unneccessary warning.\n          currentlyConfiguredValue = currentlyConfiguredValue ?? 'default';\n        }\n        if (currentlyConfiguredValue !== inferredValue) {\n          let message: string;\n          switch (key) {\n            case RELEASE_CHANNEL: {\n              message = `The value passed to the --release-channel flag is to \"${inferredValue}\", but it is set to \"${currentlyConfiguredValue}\".`;\n              break;\n            }\n            case UPDATE_URL:\n            case SDK_VERSION:\n            case RUNTIME_VERSION:\n            default:\n              message = `${key} is inferred to be \"${inferredValue}\", but it is set to \"${currentlyConfiguredValue}\".`;\n          }\n          WarningAggregator.addWarningIOS(`Expo.plist key: \"${key}\"`, message, FYI_URL);\n        }\n      }\n    }\n  }\n\n  // Android expo-updates\n  let isLikelyFirstAndroidPublish = false;\n  const androidManifestXmlPath = path.join(\n    projectRoot,\n    'android',\n    'app',\n    'src',\n    'main',\n    'AndroidManifest.xml'\n  );\n  const AndroidManifestKeyForUpdateURL = AndroidConfig.Updates.Config.UPDATE_URL;\n  if (fs.existsSync(androidManifestXmlPath)) {\n    const currentlyConfiguredAndroidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(\n      androidManifestXmlPath\n    );\n    const currentConfiguredManifestApplication = AndroidConfig.Manifest.getMainApplicationOrThrow(\n      currentlyConfiguredAndroidManifest\n    );\n    const currentlyConfiguredMetaDataAttributes =\n      currentConfiguredManifestApplication['meta-data']?.map(md => md['$']) ?? [];\n\n    // The username is only used for defining a default updates URL.\n    // Since we overwrite the URL below the username is superfluous.\n    const inferredAndroidManifest = AndroidConfig.Updates.setUpdatesConfig(\n      projectRoot,\n      exp,\n      currentlyConfiguredAndroidManifest,\n      /*username*/ null\n    );\n    const inferredMainApplication = AndroidConfig.Manifest.getMainApplicationOrThrow(\n      inferredAndroidManifest\n    );\n    // overwrite the URL defined in AndroidConfig.Updates.setUpdatesConfig\n    AndroidConfig.Manifest.addMetaDataItemToMainApplication(\n      inferredMainApplication,\n      AndroidManifestKeyForUpdateURL,\n      androidManifestUrl\n    );\n    // set a release channel (not done in updates plugin)\n    if (releaseChannel) {\n      AndroidConfig.Manifest.addMetaDataItemToMainApplication(\n        inferredMainApplication,\n        AndroidConfig.Updates.Config.RELEASE_CHANNEL,\n        releaseChannel\n      );\n    }\n\n    // If we guess that this is a users first publish, modify the native code to match\n    // what is configured.\n    const currentlyConfiguredAndroidUpdateURL = currentlyConfiguredMetaDataAttributes.find(\n      x => x['android:name'] === AndroidConfig.Updates.Config.UPDATE_URL\n    )?.['android:value'];\n    if (currentlyConfiguredAndroidUpdateURL === PLACEHOLDER_URL) {\n      isLikelyFirstAndroidPublish = true;\n      await AndroidConfig.Manifest.writeAndroidManifestAsync(\n        androidManifestXmlPath,\n        inferredAndroidManifest\n      );\n    } else {\n      // Log warnings if this is not the first publish and critical properties seem misconfigured\n      const inferredMainApplication = AndroidConfig.Manifest.getMainApplicationOrThrow(\n        inferredAndroidManifest\n      );\n      const inferredMetaDataAttributes = inferredMainApplication['meta-data']?.map(md => md['$'])!;\n\n      const {\n        UPDATE_URL,\n        SDK_VERSION,\n        RUNTIME_VERSION,\n        RELEASE_CHANNEL,\n      } = AndroidConfig.Updates.Config;\n      for (const key of [UPDATE_URL, SDK_VERSION, RUNTIME_VERSION, RELEASE_CHANNEL]) {\n        const inferredValue = inferredMetaDataAttributes.find(x => x['android:name'] === key)?.[\n          'android:value'\n        ];\n        let currentlyConfiguredValue = currentlyConfiguredMetaDataAttributes.find(\n          x => x['android:name'] === key\n        )?.['android:value'];\n        if (key === RELEASE_CHANNEL && inferredValue) {\n          // A client with an undefined release channel is mapped to\n          // 'default' in the server, so avoid logging an unneccessary warning.\n          currentlyConfiguredValue = currentlyConfiguredValue ?? 'default';\n        }\n        if (inferredValue !== currentlyConfiguredValue) {\n          let message: string;\n          switch (key) {\n            case RELEASE_CHANNEL: {\n              message = `The value passed to the --release-channel flag is \"${inferredValue}\", but it is set to \"${currentlyConfiguredValue}\".`;\n              break;\n            }\n            case UPDATE_URL:\n            case SDK_VERSION:\n            case RUNTIME_VERSION:\n            default:\n              message = `The inferred value is \"${inferredValue}\", but it is set to \"${currentlyConfiguredValue}\".`;\n          }\n          WarningAggregator.addWarningAndroid(`AndroidManifest.xml key \"${key}\"`, message, FYI_URL);\n        }\n      }\n    }\n  }\n\n  if (isLikelyFirstIOSPublish || isLikelyFirstAndroidPublish) {\n    let platformSpecificMessage: string;\n\n    if (isLikelyFirstIOSPublish && !isLikelyFirstAndroidPublish) {\n      platformSpecificMessage =\n        '🚀 It looks like this your first iOS publish for this project! ' +\n        `We've automatically set some configuration values in Expo.plist. `;\n    } else if (!isLikelyFirstIOSPublish && isLikelyFirstAndroidPublish) {\n      platformSpecificMessage =\n        '🚀 It looks like this your first Android publish for this project! ' +\n        `We've automatically set some configuration values in AndroidManifest.xml. `;\n    } else {\n      platformSpecificMessage =\n        '🚀 It looks like this your first publish for this project! ' +\n        `We've automatically set some configuration values in Expo.plist and AndroidManifest.xml. `;\n    }\n\n    logger.global.warn(\n      platformSpecificMessage +\n        `You'll need to make and release a new build before your users can download the update ` +\n        'you just published.'\n    );\n  }\n}\n\n/** The code below here is duplicated from expo-cli currently **/\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nexport function getIOSPaths(projectRoot: string) {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  const projectName = exp.name;\n  if (!projectName) {\n    throw new Error('Your project needs a name in app.json/app.config.js.');\n  }\n\n  const iosProjectDirectory = path.join(\n    projectRoot,\n    'ios',\n    IOSConfig.XcodeUtils.sanitizedName(projectName)\n  );\n  const iosSupportingDirectory = path.join(\n    projectRoot,\n    'ios',\n    IOSConfig.XcodeUtils.sanitizedName(projectName),\n    'Supporting'\n  );\n  const iconPath = path.join(iosProjectDirectory, 'Assets.xcassets', 'AppIcon.appiconset');\n\n  return {\n    projectName,\n    iosProjectDirectory,\n    iosSupportingDirectory,\n    iconPath,\n  };\n}\n"],"file":"EmbeddedAssets.js"}