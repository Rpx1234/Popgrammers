{"version":3,"sources":["../src/ProjectSettings.ts"],"names":["projectSettingsFile","projectSettingsDefaults","scheme","hostType","lanType","devClient","dev","minify","urlRandomness","https","strict","undefined","packagerInfoFile","devicesFile","MILLISECONDS_IN_30_DAYS","projectSettingsJsonFile","projectRoot","JsonFile","path","join","dotExpoProjectDirectory","packagerInfoJsonFile","devicesJsonFile","readAsync","projectSettings","e","writeAsync","migrateDeprecatedSettings","urlType","setAsync","json","mergeAsync","cantReadFileDefault","readPackagerInfoAsync","getCurrentStatusAsync","packagerPort","expoServerPort","setPackagerInfoAsync","devicesInfo","getDevicesInfoAsync","readDevicesInfoAsync","devices","filteredDevices","filterOldDevices","length","setDevicesInfoAsync","saveDevicesAsync","deviceIds","currentTime","Date","getTime","newDeviceIds","newDevicesJson","filter","device","includes","installationId","concat","map","deviceId","lastUsed","sort","a","b","slice","dirPath","oldDirPath","fs","statSync","isDirectory","renameSync","mkdirpSync","readmeFilePath","resolve","existsSync","writeFileSync","dotExpoProjectDirectoryExists"],"mappings":"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","sourcesContent":["import { ProjectTarget } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport fs from 'fs-extra';\nimport path from 'path';\n\ntype ProjectStatus = 'running' | 'ill' | 'exited';\n\nexport type ProjectSettings = {\n  scheme: string | null;\n  hostType: 'localhost' | 'lan' | 'tunnel';\n  lanType: 'ip' | 'hostname';\n  dev: boolean;\n  devClient: boolean;\n  minify: boolean;\n  urlRandomness: string | null;\n  https: boolean;\n  strict?: boolean;\n};\nexport type Settings = ProjectSettings;\n\nconst projectSettingsFile = 'settings.json';\nconst projectSettingsDefaults: ProjectSettings = {\n  scheme: null,\n  hostType: 'lan',\n  lanType: 'ip',\n  devClient: false,\n  dev: true,\n  minify: false,\n  urlRandomness: null,\n  https: false,\n  strict: undefined,\n};\n\ntype PackagerInfo = {\n  expoServerPort?: number | null;\n  packagerPort?: number | null;\n  packagerPid?: number | null;\n  expoServerNgrokUrl?: string | null;\n  packagerNgrokUrl?: string | null;\n  ngrokPid?: number | null;\n  devToolsPort?: number | null;\n  webpackServerPort?: number | null;\n  target?: ProjectTarget;\n};\nconst packagerInfoFile = 'packager-info.json';\n\nexport type DeviceInfo = {\n  installationId: string;\n  lastUsed: number;\n};\nexport type DevicesInfo = {\n  devices: DeviceInfo[];\n};\nconst devicesFile = 'devices.json';\n\nconst MILLISECONDS_IN_30_DAYS = 30 * 24 * 60 * 60 * 1000;\n\nfunction projectSettingsJsonFile(projectRoot: string): JsonFile<ProjectSettings> {\n  return new JsonFile<ProjectSettings>(\n    path.join(dotExpoProjectDirectory(projectRoot), projectSettingsFile)\n  );\n}\n\nfunction packagerInfoJsonFile(projectRoot: string): JsonFile<PackagerInfo> {\n  return new JsonFile<PackagerInfo>(\n    path.join(dotExpoProjectDirectory(projectRoot), packagerInfoFile)\n  );\n}\n\nfunction devicesJsonFile(projectRoot: string): JsonFile<DevicesInfo> {\n  return new JsonFile<DevicesInfo>(path.join(dotExpoProjectDirectory(projectRoot), devicesFile));\n}\n\nexport async function readAsync(projectRoot: string): Promise<ProjectSettings> {\n  let projectSettings;\n  try {\n    projectSettings = await projectSettingsJsonFile(projectRoot).readAsync();\n  } catch (e) {\n    projectSettings = await projectSettingsJsonFile(projectRoot).writeAsync(\n      projectSettingsDefaults\n    );\n  }\n  migrateDeprecatedSettings(projectSettings);\n  // Set defaults for any missing fields\n  return { ...projectSettingsDefaults, ...projectSettings };\n}\n\nfunction migrateDeprecatedSettings(projectSettings: any): void {\n  if (projectSettings.hostType === 'ngrok') {\n    // 'ngrok' is deprecated\n    projectSettings.hostType = 'tunnel';\n  }\n\n  if (projectSettings.urlType) {\n    // urlType is deprecated as a project setting\n    delete projectSettings.urlType;\n  }\n\n  if ('strict' in projectSettings) {\n    // strict mode is not supported at the moment\n    delete projectSettings.strict;\n  }\n}\n\nexport async function setAsync(\n  projectRoot: string,\n  json: Partial<ProjectSettings>\n): Promise<ProjectSettings> {\n  try {\n    return await projectSettingsJsonFile(projectRoot).mergeAsync(json, {\n      cantReadFileDefault: projectSettingsDefaults,\n    });\n  } catch (e) {\n    return await projectSettingsJsonFile(projectRoot).writeAsync({\n      ...projectSettingsDefaults,\n      ...json,\n    });\n  }\n}\n\nexport async function readPackagerInfoAsync(projectRoot: string): Promise<PackagerInfo> {\n  try {\n    return await packagerInfoJsonFile(projectRoot).readAsync({\n      cantReadFileDefault: {},\n    });\n  } catch (e) {\n    return await packagerInfoJsonFile(projectRoot).writeAsync({});\n  }\n}\n\nexport async function getCurrentStatusAsync(projectRoot: string): Promise<ProjectStatus> {\n  const { packagerPort, expoServerPort } = await readPackagerInfoAsync(projectRoot);\n  if (packagerPort && expoServerPort) {\n    return 'running';\n  } else if (packagerPort || expoServerPort) {\n    return 'ill';\n  } else {\n    return 'exited';\n  }\n}\n\nexport async function setPackagerInfoAsync(\n  projectRoot: string,\n  json: Partial<PackagerInfo>\n): Promise<PackagerInfo> {\n  try {\n    return await packagerInfoJsonFile(projectRoot).mergeAsync(json, {\n      cantReadFileDefault: {},\n    });\n  } catch (e) {\n    return await packagerInfoJsonFile(projectRoot).writeAsync(json);\n  }\n}\n\nlet devicesInfo: DevicesInfo | null = null;\n\nexport async function getDevicesInfoAsync(projectRoot: string): Promise<DevicesInfo> {\n  if (devicesInfo) {\n    return devicesInfo;\n  }\n  return readDevicesInfoAsync(projectRoot);\n}\n\nexport async function readDevicesInfoAsync(projectRoot: string): Promise<DevicesInfo> {\n  try {\n    devicesInfo = await devicesJsonFile(projectRoot).readAsync({\n      cantReadFileDefault: { devices: [] },\n    });\n\n    // if the file on disk has old devices, filter them out here before we use them\n    const filteredDevices = filterOldDevices(devicesInfo.devices);\n    if (filteredDevices.length < devicesInfo.devices.length) {\n      devicesInfo = {\n        ...devicesInfo,\n        devices: filteredDevices,\n      };\n      // save the newly filtered list for consistency\n      try {\n        await setDevicesInfoAsync(projectRoot, devicesInfo);\n      } catch {\n        // do nothing here, we'll just keep using the filtered list in memory for now\n      }\n    }\n\n    return devicesInfo;\n  } catch {\n    return await devicesJsonFile(projectRoot).writeAsync({ devices: [] });\n  }\n}\n\nexport async function setDevicesInfoAsync(\n  projectRoot: string,\n  json: DevicesInfo\n): Promise<DevicesInfo> {\n  devicesInfo = json;\n\n  try {\n    return await devicesJsonFile(projectRoot).mergeAsync(json, {\n      cantReadFileDefault: { devices: [] },\n    });\n  } catch {\n    return await devicesJsonFile(projectRoot).writeAsync(json);\n  }\n}\n\nexport async function saveDevicesAsync(\n  projectRoot: string,\n  deviceIds: string | string[]\n): Promise<void> {\n  const currentTime = new Date().getTime();\n  const newDeviceIds = typeof deviceIds === 'string' ? [deviceIds] : deviceIds;\n\n  const { devices } = await getDevicesInfoAsync(projectRoot);\n  const newDevicesJson = devices\n    .filter(device => {\n      if (newDeviceIds.includes(device.installationId)) {\n        return false;\n      }\n      return true;\n    })\n    .concat(newDeviceIds.map(deviceId => ({ installationId: deviceId, lastUsed: currentTime })));\n  await setDevicesInfoAsync(projectRoot, { devices: filterOldDevices(newDevicesJson) });\n}\n\nfunction filterOldDevices(devices: DeviceInfo[]) {\n  const currentTime = new Date().getTime();\n  return (\n    devices\n      .filter(device => {\n        // filter out any devices that haven't been used to open this project in 30 days\n        if (currentTime - device.lastUsed > MILLISECONDS_IN_30_DAYS) {\n          return false;\n        }\n        return true;\n      })\n      // keep only the 10 most recently used devices\n      .sort((a, b) => b.lastUsed - a.lastUsed)\n      .slice(0, 10)\n  );\n}\n\nexport function dotExpoProjectDirectory(projectRoot: string): string {\n  const dirPath = path.join(projectRoot, '.expo');\n  try {\n    // move .exponent to .expo\n    const oldDirPath = path.join(projectRoot, '.exponent');\n    if (fs.statSync(oldDirPath).isDirectory()) {\n      fs.renameSync(oldDirPath, dirPath);\n    }\n  } catch (e) {\n    // no old directory, continue\n  }\n\n  fs.mkdirpSync(dirPath);\n\n  const readmeFilePath = path.resolve(dirPath, 'README.md');\n  if (!fs.existsSync(readmeFilePath)) {\n    fs.writeFileSync(\n      readmeFilePath,\n      `> Why do I have a folder named \".expo\" in my project?\n\nThe \".expo\" folder is created when an Expo project is started using \"expo start\" command.\n\n> What do the files contain?\n\n- \"devices.json\": contains information about devices that have recently opened this project. This is used to populate the \"Development sessions\" list in your development builds.\n- \"packager-info.json\": contains port numbers and process PIDs that are used to serve the application to the mobile device/simulator.\n- \"settings.json\": contains the server configuration that is used to serve the application manifest.\n\n> Should I commit the \".expo\" folder?\n\nNo, you should not share the \".expo\" folder. It does not contain any information that is relevant for other developers working on the project, it is specific to your machine.\n\nUpon project creation, the \".expo\" folder is already added to your \".gitignore\" file.\n`\n    );\n  }\n  return dirPath;\n}\n\nexport function dotExpoProjectDirectoryExists(projectRoot: string): boolean {\n  const dirPath = path.join(projectRoot, '.expo');\n  try {\n    if (fs.statSync(dirPath).isDirectory()) {\n      return true;\n    }\n  } catch (e) {\n    // file doesn't exist\n  }\n\n  return false;\n}\n"],"file":"ProjectSettings.js"}