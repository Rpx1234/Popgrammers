{"version":3,"sources":["../src/Versions.ts"],"names":["versionsAsync","options","api","ApiV2Client","versionCache","FsCache","Cacher","getAsync","path","join","__dirname","getenv","boolish","skipCache","clearAsync","sdkVersionsAsync","sdkVersions","releasedSdkVersionsAsync","data","_sdkVersionString","releaseNoteUrl","beta","gteSdkVersion","expJson","sdkVersion","semver","gte","e","XDLError","lteSdkVersion","lte","parseSdkVersionFromTag","tag","startsWith","substring","newestReleasedSdkVersionAsync","betaOptInEnabled","result","highestMajorVersion","version","Object","entries","hasReleaseNotes","isBeta","major","oldestSupportedMajorVersionAsync","supportedVersions","v","isDeprecated","versionNumbers","keys","map","Math","min","canTurtleBuildSdkVersion","platform","valid","getSdkVersionsSupportedByTurtle","supportedVersionsForPlatform","indexOf"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport getenv from 'getenv';\nimport pickBy from 'lodash/pickBy';\nimport path from 'path';\nimport semver from 'semver';\n\nimport { ApiV2 as ApiV2Client, FsCache, XDLError } from './internal';\n\nexport type SDKVersion = {\n  androidExpoViewUrl?: string;\n  expoReactNativeTag: string;\n  /* deprecated */ exponentReactNativeTag?: string;\n  expokitNpmPackage?: string;\n  facebookReactNativeVersion: string;\n  facebookReactVersion?: string;\n  iosExpoViewUrl?: string;\n  /* deprecated */ iosExponentViewUrl?: string;\n  iosVersion?: string;\n  isDeprecated?: boolean;\n  packagesToInstallWhenEjecting?: { [name: string]: string };\n  releaseNoteUrl?: string;\n  iosClientUrl?: string;\n  iosClientVersion?: string;\n  androidClientUrl?: string;\n  androidClientVersion?: string;\n  relatedPackages?: { [name: string]: string };\n  beta?: boolean;\n};\n\nexport type SDKVersions = { [version: string]: SDKVersion };\ntype TurtleSDKVersions = { android: string[]; ios: string[] };\ntype TurtleSDKVersionsOld = { android: string; ios: string };\n\ntype Versions = {\n  androidUrl: string;\n  androidVersion: string;\n  iosUrl: string;\n  iosVersion: string;\n  sdkVersions: SDKVersions;\n  /* deprecated */ starterApps: unknown;\n  /* deprecated */ templates: unknown[];\n  /* deprecated */ templatesv2: unknown[];\n  turtleSdkVersions: TurtleSDKVersionsOld;\n};\n\nexport async function versionsAsync(options?: { skipCache?: boolean }): Promise<Versions> {\n  const api = new ApiV2Client();\n  const versionCache = new FsCache.Cacher(\n    () => api.getAsync('versions/latest'),\n    'versions.json',\n    0,\n    path.join(__dirname, '../caches/versions.json')\n  );\n\n  // Clear cache when opting in to beta because things can change quickly in beta\n  if (getenv.boolish('EXPO_BETA', false) || options?.skipCache) {\n    versionCache.clearAsync();\n  }\n\n  return await versionCache.getAsync();\n}\n\nexport async function sdkVersionsAsync(): Promise<SDKVersions> {\n  const { sdkVersions } = await versionsAsync();\n  return sdkVersions;\n}\n\n// NOTE(brentvatne): it is possible for an unreleased version to be published to\n// the versions endpoint, but in some cases we only want to list out released\n// versions\nexport async function releasedSdkVersionsAsync(): Promise<SDKVersions> {\n  const sdkVersions = await sdkVersionsAsync();\n  return pickBy(\n    sdkVersions,\n    (data, _sdkVersionString) =>\n      !!data.releaseNoteUrl || (getenv.boolish('EXPO_BETA', false) && data.beta)\n  );\n}\n\nexport function gteSdkVersion(\n  expJson: Pick<ExpoConfig, 'sdkVersion'>,\n  sdkVersion: string\n): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  try {\n    return semver.gte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n}\n\nexport function lteSdkVersion(\n  expJson: Pick<ExpoConfig, 'sdkVersion'>,\n  sdkVersion: string\n): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n}\n\nexport function parseSdkVersionFromTag(tag: string): string {\n  if (tag.startsWith('sdk-')) {\n    return tag.substring(4);\n  }\n\n  return tag;\n}\n\n// NOTE(brentvatne): it is possible for an unreleased version to be published to\n// the versions endpoint, but in some cases we need to get the latest *released*\n// version, not just the latest version.\nexport async function newestReleasedSdkVersionAsync(): Promise<{\n  version: string;\n  data: SDKVersion | null;\n}> {\n  const betaOptInEnabled = getenv.boolish('EXPO_BETA', false);\n  const sdkVersions = await sdkVersionsAsync();\n\n  let result = null;\n  let highestMajorVersion = '0.0.0';\n\n  for (const [version, data] of Object.entries(sdkVersions)) {\n    const hasReleaseNotes = !!data.releaseNoteUrl;\n    const isBeta = !!data.beta;\n\n    if (\n      semver.major(version) > semver.major(highestMajorVersion) &&\n      (hasReleaseNotes || (isBeta && betaOptInEnabled))\n    ) {\n      highestMajorVersion = version;\n      result = data;\n    }\n  }\n  return {\n    version: highestMajorVersion,\n    data: result,\n  };\n}\n\nexport async function oldestSupportedMajorVersionAsync(): Promise<number> {\n  const sdkVersions = await sdkVersionsAsync();\n  const supportedVersions = pickBy(sdkVersions, v => !v.isDeprecated);\n  const versionNumbers = Object.keys(supportedVersions).map(version => semver.major(version));\n  return Math.min(...versionNumbers);\n}\n\nexport async function canTurtleBuildSdkVersion(\n  sdkVersion: string,\n  platform: keyof TurtleSDKVersions\n): Promise<boolean> {\n  if (sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  if (semver.valid(sdkVersion) == null) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `\"${sdkVersion}\" is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n\n  const supportedVersions = await getSdkVersionsSupportedByTurtle();\n  const supportedVersionsForPlatform: string[] = supportedVersions[platform] ?? [];\n  return supportedVersionsForPlatform.indexOf(sdkVersion) !== -1;\n}\n\nasync function getSdkVersionsSupportedByTurtle(): Promise<TurtleSDKVersions> {\n  const api = new ApiV2Client();\n  return await api.getAsync('standalone-build/supportedSDKVersions');\n}\n"],"file":"Versions.js"}