{"version":3,"sources":["../../src/detach/IosWorkspace.ts"],"names":["getPaths","context","iosProjectDirectory","projectName","supportingDirectory","projectRootDirectory","build","isExpoClientBuild","isAnonymous","config","name","projectNameLabel","replace","toLowerCase","Error","type","data","projectPath","path","join","dirname","ios","workspaceSourcePath","archivePath","intermediatesDirectory"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAT,CAAkBC,OAAlB,EAAgC;AAC9B,MAAIC,mBAAJ;AACA,MAAIC,WAAJ;AACA,MAAIC,mBAAJ;AACA,MAAIC,oBAAJ;;AAEA,MAAIJ,OAAO,CAACK,KAAR,CAAcC,iBAAd,EAAJ,EAAuC;AACrCJ,IAAAA,WAAW,GAAG,UAAd;AACD,GAFD,MAEO,IAAIF,OAAO,CAACO,WAAR,EAAJ,EAA2B;AAChCL,IAAAA,WAAW,GAAG,YAAd;AACD,GAFM,MAEA,IAAIF,OAAO,CAACQ,MAAR,IAAkBR,OAAO,CAACQ,MAAR,CAAeC,IAArC,EAA2C;AAChD,UAAMC,gBAAgB,GAAGV,OAAO,CAACQ,MAAR,CAAeC,IAAxC;AACAP,IAAAA,WAAW,GAAGQ,gBAAgB,CAACC,OAAjB,CAAyB,eAAzB,EAA0C,GAA1C,EAA+CC,WAA/C,EAAd;AACD,GAHM,MAGA;AACL,UAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACD;;AACD,MAAIb,OAAO,CAACc,IAAR,KAAiB,MAArB,EAA6B;AAC3BV,IAAAA,oBAAoB,GAAGJ,OAAO,CAACe,IAAR,CAAaC,WAApC;AACAf,IAAAA,mBAAmB,GAAGgB,gBAAKC,IAAL,CAAUlB,OAAO,CAACe,IAAR,CAAaC,WAAvB,EAAoC,KAApC,CAAtB;AACAb,IAAAA,mBAAmB,GAAGc,gBAAKC,IAAL,CAAUjB,mBAAV,EAA+BC,WAA/B,EAA4C,YAA5C,CAAtB;AACD,GAJD,MAIO,IAAIF,OAAO,CAACc,IAAR,KAAiB,SAArB,EAAgC;AACrCV,IAAAA,oBAAoB,GAAGa,gBAAKE,OAAL,CAAanB,OAAO,CAACK,KAAR,CAAce,GAAd,CAAkBC,mBAA/B,CAAvB;AACApB,IAAAA,mBAAmB,GAAGD,OAAO,CAACK,KAAR,CAAce,GAAd,CAAkBC,mBAAxC;;AACA,QAAIrB,OAAO,CAACe,IAAR,CAAaO,WAAjB,EAA8B;AAC5B;AACAnB,MAAAA,mBAAmB,GAAGH,OAAO,CAACe,IAAR,CAAaO,WAAnC;AACD,KAHD,MAGO;AACLnB,MAAAA,mBAAmB,GAAGc,gBAAKC,IAAL,CAAUjB,mBAAV,EAA+BC,WAA/B,EAA4C,YAA5C,CAAtB;AACD;AACF,GATM,MASA;AACL,UAAM,IAAIW,KAAJ,CAAW,uCAAsCb,OAAO,CAACc,IAAK,EAA9D,CAAN;AACD,GA/B6B,CAgC9B;AACA;;;AACA,QAAMS,sBAAsB,GAAGN,gBAAKC,IAAL,CAC7BjB,mBAD6B,EAE7BD,OAAO,CAACK,KAAR,CAAcC,iBAAd,KAAoC,uBAApC,GAA8D,sBAFjC,CAA/B;;AAIA,SAAO;AACLF,IAAAA,oBADK;AAELmB,IAAAA,sBAFK;AAGLtB,IAAAA,mBAHK;AAILC,IAAAA,WAJK;AAKLC,IAAAA;AALK,GAAP;AAOD","sourcesContent":["import path from 'path';\n\n/**\n *  paths returned:\n *    iosProjectDirectory - root directory of an (uncompiled) xcworkspace and obj-c source tree\n *    projectName - xcworkspace project name normalized from context.config\n *    supportingDirectory - location of Info.plist, xib files, etc. during configuration.\n *      for an unbuilt app this is underneath iosProjectDirectory. for a compiled app it's just\n *      a path to the flat xcarchive.\n *    intermediatesDirectory - temporary spot to write whatever files are needed during the\n *      detach/build process but can be discarded afterward.\n */\nfunction getPaths(context: any) {\n  let iosProjectDirectory;\n  let projectName;\n  let supportingDirectory;\n  let projectRootDirectory;\n\n  if (context.build.isExpoClientBuild()) {\n    projectName = 'Exponent';\n  } else if (context.isAnonymous()) {\n    projectName = 'ExpoKitApp';\n  } else if (context.config && context.config.name) {\n    const projectNameLabel = context.config.name;\n    projectName = projectNameLabel.replace(/[^a-z0-9_-]/gi, '-').toLowerCase();\n  } else {\n    throw new Error('Cannot configure an Expo project with no name.');\n  }\n  if (context.type === 'user') {\n    projectRootDirectory = context.data.projectPath;\n    iosProjectDirectory = path.join(context.data.projectPath, 'ios');\n    supportingDirectory = path.join(iosProjectDirectory, projectName, 'Supporting');\n  } else if (context.type === 'service') {\n    projectRootDirectory = path.dirname(context.build.ios.workspaceSourcePath);\n    iosProjectDirectory = context.build.ios.workspaceSourcePath;\n    if (context.data.archivePath) {\n      // compiled archive has a flat NSBundle\n      supportingDirectory = context.data.archivePath;\n    } else {\n      supportingDirectory = path.join(iosProjectDirectory, projectName, 'Supporting');\n    }\n  } else {\n    throw new Error(`Unsupported StandaloneContext type: ${context.type}`);\n  }\n  // sandbox intermediates directory by workspace so that concurrently operating\n  // contexts do not interfere with one another.\n  const intermediatesDirectory = path.join(\n    iosProjectDirectory,\n    context.build.isExpoClientBuild() ? 'ExponentIntermediates' : 'ExpoKitIntermediates'\n  );\n  return {\n    projectRootDirectory,\n    intermediatesDirectory,\n    iosProjectDirectory,\n    projectName,\n    supportingDirectory,\n  };\n}\n\nexport { getPaths };\n"],"file":"IosWorkspace.js"}