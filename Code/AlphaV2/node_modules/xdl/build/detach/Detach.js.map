{"version":3,"sources":["../../src/detach/Detach.ts"],"names":["SERVICE_CONTEXT_PROJECT_NAME","ensureBuildConstantsExistsIOSAsync","configFilePath","doesBuildConstantsExist","fs","existsSync","path","join","IosPlist","createBlankAsync","logger","info","_getIosExpoKitVersionThrowErrorAsync","iosProjectDirectory","expoKitVersion","podfileLockPath","podfileLock","readFile","expoKitVersionRegex","match","exec","Error","e","readNullableConfigJsonAsync","projectDir","prepareDetachedBuildIosAsync","args","config","exp","name","prepareDetachedUserContextIosAsync","prepareDetachedServiceContextIosAsync","expoRootDir","workspaceSourcePath","buildFlags","StandaloneBuildFlags","createIos","context","StandaloneContext","createServiceContext","supportingDirectory","IosWorkspace","getPaths","prodApiKeys","_readDefaultApiKeysAsync","data","expoSourcePath","skipSDKVersionRequirement","modifyAsync","constantsConfig","contextType","STANDALONE_CONTEXT_TYPE","EXPO_RUNTIME_VERSION","API_SERVER_ENDPOINT","process","env","ENVIRONMENT","DEFAULT_API_KEYS","sdkVersion","TEMPORARY_SDK_VERSION","jsonFilePath","keys","allKeys","JsonFile","readAsync","validKeys","key","hasOwnProperty","includes","createUserContext","podsDirectory","ExponentTools","isDirectory","rnPodDirectory","rnFilesToDelete","absolute","cwd","i","length","unlink","skipXcodeConfig","devUrl","UrlUtils","constructManifestUrlAsync","defaultApiKeys","developmentUrl","prepareDetachedBuildAsync","platform","expoBuildConstantsMatches","expoBuildConstants","regexFileAsync","bundleAssetsAsync","options","bundledManifestPath","EmbeddedAssets","getEmbeddedManifestPath","warn","manifest","JSON","parse","ex","message","Object","AssetBundle","bundleAsync","bundledAssets","dest","getExportUrl","bundleUrl","DEFAULT_CDN_HOST","bundleUrlParts","split","slice"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport fs from 'fs-extra';\nimport { sync as globSync } from 'glob';\nimport path from 'path';\n\nimport {\n  AssetBundle,\n  EmbeddedAssets,\n  ExponentTools,\n  IosPlist,\n  IosWorkspace,\n  LoggerDetach as logger,\n  StandaloneBuildFlags,\n  StandaloneContext,\n  UrlUtils,\n} from '../internal';\n\nconst SERVICE_CONTEXT_PROJECT_NAME = 'exponent-view-template';\n\nasync function ensureBuildConstantsExistsIOSAsync(configFilePath: string) {\n  // EXBuildConstants is included in newer ExpoKit projects.\n  // create it if it doesn't exist.\n  const doesBuildConstantsExist = fs.existsSync(\n    path.join(configFilePath, 'EXBuildConstants.plist')\n  );\n  if (!doesBuildConstantsExist) {\n    await IosPlist.createBlankAsync(configFilePath, 'EXBuildConstants');\n    logger.info('Created `EXBuildConstants.plist` because it did not exist yet');\n  }\n}\n\nasync function _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory: string) {\n  let expoKitVersion = '';\n  const podfileLockPath = path.join(iosProjectDirectory, 'Podfile.lock');\n  try {\n    const podfileLock = await fs.readFile(podfileLockPath, 'utf8');\n    const expoKitVersionRegex = /ExpoKit\\/Core\\W?\\(([0-9.]+)\\)/gi;\n    const match = expoKitVersionRegex.exec(podfileLock);\n    if (!match) {\n      throw new Error('ExpoKit/Core not found');\n    }\n    expoKitVersion = match[1];\n  } catch (e) {\n    throw new Error(\n      `Unable to read ExpoKit version from Podfile.lock. Make sure your project depends on ExpoKit. (${e})`\n    );\n  }\n  return expoKitVersion;\n}\n\nasync function readNullableConfigJsonAsync(projectDir: string) {\n  try {\n    return getConfig(projectDir);\n  } catch {\n    return null;\n  }\n}\n\nasync function prepareDetachedBuildIosAsync(projectDir: string, args: any) {\n  const config = await readNullableConfigJsonAsync(projectDir);\n  if (config && config.exp.name !== SERVICE_CONTEXT_PROJECT_NAME) {\n    return prepareDetachedUserContextIosAsync(projectDir, config.exp, args);\n  } else {\n    return prepareDetachedServiceContextIosAsync(projectDir, args);\n  }\n}\n\nasync function prepareDetachedServiceContextIosAsync(projectDir: string, args: any) {\n  // service context\n  // TODO: very brittle hack: the paths here are hard coded to match the single workspace\n  // path generated inside IosShellApp. When we support more than one path, this needs to\n  // be smarter.\n  const expoRootDir = path.join(projectDir, '..', '..');\n  const workspaceSourcePath = path.join(projectDir, 'ios');\n  const buildFlags = StandaloneBuildFlags.createIos('Release', { workspaceSourcePath });\n  // @ts-ignore missing 9th argument\n  const context = StandaloneContext.createServiceContext(\n    expoRootDir,\n    null,\n    null,\n    null,\n    /* testEnvironment */ 'none',\n    buildFlags,\n    null,\n    null\n  );\n  const { iosProjectDirectory, supportingDirectory } = IosWorkspace.getPaths(context);\n  const expoKitVersion = await _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory);\n\n  // use prod api keys if available\n  const prodApiKeys = await _readDefaultApiKeysAsync(\n    path.join(context.data.expoSourcePath, '__internal__', 'keys.json')\n  );\n\n  const { exp } = getConfig(expoRootDir, { skipSDKVersionRequirement: true });\n\n  await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n    // verify that we are actually in a service context and not a misconfigured project\n    const contextType = constantsConfig.STANDALONE_CONTEXT_TYPE;\n    if (contextType !== 'service') {\n      throw new Error(\n        'Unable to configure a project which has no app.json and also no STANDALONE_CONTEXT_TYPE.'\n      );\n    }\n    constantsConfig.EXPO_RUNTIME_VERSION = expoKitVersion;\n    constantsConfig.API_SERVER_ENDPOINT =\n      process.env.ENVIRONMENT === 'staging'\n        ? 'https://staging.exp.host/--/api/v2/'\n        : 'https://exp.host/--/api/v2/';\n    if (prodApiKeys) {\n      constantsConfig.DEFAULT_API_KEYS = prodApiKeys;\n    }\n    if (exp && exp.sdkVersion) {\n      constantsConfig.TEMPORARY_SDK_VERSION = exp.sdkVersion;\n    }\n    return constantsConfig;\n  });\n}\n\nasync function _readDefaultApiKeysAsync(jsonFilePath: string) {\n  if (fs.existsSync(jsonFilePath)) {\n    const keys: any = {};\n    const allKeys = await new JsonFile(jsonFilePath).readAsync();\n    const validKeys = ['AMPLITUDE_KEY', 'GOOGLE_MAPS_IOS_API_KEY'];\n    for (const key in allKeys) {\n      if (allKeys.hasOwnProperty(key) && validKeys.includes(key)) {\n        keys[key] = allKeys[key];\n      }\n    }\n    return keys;\n  }\n  return null;\n}\n\nasync function prepareDetachedUserContextIosAsync(projectDir: string, exp: ExpoConfig, args: any) {\n  const context = StandaloneContext.createUserContext(projectDir, exp);\n  const { iosProjectDirectory, supportingDirectory } = IosWorkspace.getPaths(context);\n\n  logger.info(`Preparing iOS build at ${iosProjectDirectory}...`);\n  // These files cause @providesModule naming collisions\n  // but are not available until after `pod install` has run.\n  const podsDirectory = path.join(iosProjectDirectory, 'Pods');\n  if (!ExponentTools.isDirectory(podsDirectory)) {\n    throw new Error(`Can't find directory ${podsDirectory}, make sure you've run pod install.`);\n  }\n  const rnPodDirectory = path.join(podsDirectory, 'React');\n  if (ExponentTools.isDirectory(rnPodDirectory)) {\n    const rnFilesToDelete = globSync('**/*.@(js|json)', {\n      absolute: true,\n      cwd: rnPodDirectory,\n    });\n    if (rnFilesToDelete) {\n      for (let i = 0; i < rnFilesToDelete.length; i++) {\n        await fs.unlink(rnFilesToDelete[i]);\n      }\n    }\n  }\n\n  // insert expo development url into iOS config\n  if (!args.skipXcodeConfig) {\n    // populate EXPO_RUNTIME_VERSION from ExpoKit pod version\n    const expoKitVersion = await _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory);\n\n    // populate development url\n    const devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n\n    // populate default api keys\n    const defaultApiKeys = await _readDefaultApiKeysAsync(\n      path.join(podsDirectory, 'ExpoKit', 'template-files', 'keys.json')\n    );\n\n    await ensureBuildConstantsExistsIOSAsync(supportingDirectory);\n    await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n      constantsConfig.developmentUrl = devUrl;\n      constantsConfig.EXPO_RUNTIME_VERSION = expoKitVersion;\n      if (defaultApiKeys) {\n        constantsConfig.DEFAULT_API_KEYS = defaultApiKeys;\n      }\n      if (exp.sdkVersion) {\n        constantsConfig.TEMPORARY_SDK_VERSION = exp.sdkVersion;\n      }\n      return constantsConfig;\n    });\n  }\n}\n\nexport async function prepareDetachedBuildAsync(projectDir: string, args: any) {\n  if (args.platform === 'ios') {\n    await prepareDetachedBuildIosAsync(projectDir, args);\n  } else {\n    const expoBuildConstantsMatches = globSync('android/**/DetachBuildConstants.java', {\n      absolute: true,\n      cwd: projectDir,\n    });\n    if (expoBuildConstantsMatches && expoBuildConstantsMatches.length) {\n      const expoBuildConstants = expoBuildConstantsMatches[0];\n      const devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n      await ExponentTools.regexFileAsync(\n        /DEVELOPMENT_URL = \"[^\"]*\";/,\n        `DEVELOPMENT_URL = \"${devUrl}\";`,\n        expoBuildConstants\n      );\n    }\n  }\n}\n\n// args.dest: string,\n// This is the path where assets will be copied to. It should be\n// `$CONFIGURATION_BUILD_DIR/$UNLOCALIZED_RESOURCES_FOLDER_PATH` on iOS\n// (see `exponent-view-template.xcodeproj/project.pbxproj` for an example)\n// and `$buildDir/intermediates/assets/$targetPath` on Android (see\n// `android/app/expo.gradle` for an example).\nexport async function bundleAssetsAsync(projectDir: string, args: any) {\n  const options = await readNullableConfigJsonAsync(projectDir);\n  if (!options || options.exp.name === SERVICE_CONTEXT_PROJECT_NAME) {\n    // Don't run assets bundling for the service context.\n    return;\n  }\n  const { exp } = options;\n  const bundledManifestPath = EmbeddedAssets.getEmbeddedManifestPath(\n    args.platform,\n    projectDir,\n    exp as any\n  );\n  if (!bundledManifestPath) {\n    logger.warn(\n      `Skipped assets bundling because the '${args.platform}.publishManifestPath' key is not specified in the app manifest.`\n    );\n    return;\n  }\n\n  let manifest;\n  try {\n    manifest = JSON.parse(await fs.readFile(bundledManifestPath, 'utf8'));\n  } catch (ex) {\n    throw new Error(\n      `Error reading the manifest file. Make sure the path '${bundledManifestPath}' is correct.\\n\\nError: ${ex.message}`\n    );\n  }\n  if (!manifest || !Object.keys(manifest).length) {\n    throw new Error(`The manifest at '${bundledManifestPath}' was empty or invalid.`);\n  }\n\n  await AssetBundle.bundleAsync(null, manifest.bundledAssets, args.dest, getExportUrl(manifest));\n}\n\n/**\n * This function extracts the exported public URL that is set in the manifest\n * when the developer runs `expo export --public-url x`. We use this to ensure\n * that we fetch the resources from the appropriate place when doing builds\n * against self-hosted apps.\n */\nfunction getExportUrl(manifest: any) {\n  const { bundleUrl } = manifest;\n  if (bundleUrl.includes(AssetBundle.DEFAULT_CDN_HOST)) {\n    return null;\n  }\n\n  try {\n    const bundleUrlParts = bundleUrl.split('/');\n    return bundleUrlParts.slice(0, bundleUrlParts.length - 2).join('/');\n  } catch (e) {\n    throw Error(\n      `Expected bundleUrl to be of the format https://domain/bundles/bundle-hash-id, ${bundleUrl} does not follow this format.`\n    );\n  }\n}\n"],"file":"Detach.js"}