{"version":3,"sources":["../src/Session.ts"],"names":["_newIdentifier","type","bytes","Buffer","alloc","base64","toString","slug","replace","substring","clientIdAsync","clientId","UserSettings","getAsync","setClientIdAsync","token","setAsync"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA,SAASA,cAAT,CAAwBC,IAAI,GAAG,GAA/B,EAAoC;AAClC,QAAMC,KAAK,GAAG,gBAAO,IAAP,EAAaC,MAAM,CAACC,KAAP,CAAa,EAAb,CAAb,CAAd;AACA,QAAMC,MAAM,GAAGH,KAAK,CAACI,QAAN,CAAe,QAAf,CAAf;AACA,QAAMC,IAAI,GAAGF,MAAM,CACjB;AADiB,GAEhBG,OAFU,CAEF,KAFE,EAEK,GAFL,EAGX;AAHW,GAIVA,OAJU,CAIF,KAJE,EAIK,GAJL,EAKX;AALW,GAMVC,SANU,CAMA,CANA,EAMG,EANH,CAAb;AAOA,SAAOR,IAAI,GAAG,GAAP,GAAaM,IAApB;AACD;;AAEM,eAAeG,aAAf,GAAgD;AACrD,MAAIC,QAAQ,GAAG,MAAMC,yBAAaC,QAAb,CAAsB,aAAtB,EAAqC,IAArC,CAArB;;AACA,MAAIF,QAAQ,KAAK,IAAjB,EAAuB;AACrBA,IAAAA,QAAQ,GAAGX,cAAc,EAAzB;AACA,UAAMc,gBAAgB,CAACH,QAAD,CAAtB;AACD;;AACD,SAAOA,QAAP;AACD;;AAEM,eAAeG,gBAAf,CAAgCC,KAAhC,EAA+C;AACpD,QAAMH,yBAAaI,QAAb,CAAsB,aAAtB,EAAqCD,KAArC,CAAN;AACA,SAAOA,KAAP;AACD","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nimport { UserSettings } from './internal';\n\nfunction _newIdentifier(type = 'c') {\n  const bytes = uuidv4(null, Buffer.alloc(16));\n  const base64 = bytes.toString('base64');\n  const slug = base64\n    // Replace + with - (see RFC 4648, sec. 5)\n    .replace(/\\+/g, '-')\n    // Replace / with _ (see RFC 4648, sec. 5)\n    .replace(/\\//g, '_')\n    // Drop '==' padding\n    .substring(0, 22);\n  return type + '_' + slug;\n}\n\nexport async function clientIdAsync(): Promise<string> {\n  let clientId = await UserSettings.getAsync('accessToken', null);\n  if (clientId === null) {\n    clientId = _newIdentifier();\n    await setClientIdAsync(clientId);\n  }\n  return clientId;\n}\n\nexport async function setClientIdAsync(token: string) {\n  await UserSettings.setAsync('accessToken', token);\n  return token;\n}\n"],"file":"Session.js"}