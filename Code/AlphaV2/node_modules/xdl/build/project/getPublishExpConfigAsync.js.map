{"version":3,"sources":["../../src/project/getPublishExpConfigAsync.ts"],"names":["getPublishExpConfigAsync","projectRoot","options","releaseChannel","XDLError","exp","hooks","runtimeVersion","skipSDKVersionRequirement","pkg","isPublicConfig","sdkVersion","Env","maySkipManifestValidation","locales","ExponentTools","getResolvedLocalesAsync"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAQA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAUO,eAAeA,wBAAf,CACLC,WADK,EAELC,OAA+C,GAAG,EAF7C,EAOJ;AACD,MAAIA,OAAO,CAACC,cAAR,IAA0B,IAA1B,IAAkC,OAAOD,OAAO,CAACC,cAAf,KAAkC,QAAxE,EAAkF;AAChF,UAAM,KAAIC,oBAAJ,EAAa,iBAAb,EAAgC,iCAAhC,CAAN;AACD;;AACDF,EAAAA,OAAO,CAACC,cAAR,GAAyBD,OAAO,CAACC,cAAR,IAA0B,SAAnD,CAJC,CAMD;;AACA,QAAM;AACJE,IAAAA,GAAG,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT;AADD,MAEF,yBAAUN,WAAV,EAAuB;AAAEO,IAAAA,yBAAyB,EAAE;AAA7B,GAAvB,CAFJ;AAGA,QAAM;AAAEH,IAAAA,GAAF;AAAOI,IAAAA;AAAP,MAAe,yBAAUR,WAAV,EAAuB;AAC1CS,IAAAA,cAAc,EAAE,IAD0B;AAE1C;AACAF,IAAAA,yBAAyB,EAAE,CAAC,CAACD;AAHa,GAAvB,CAArB;AAKA,QAAM;AAAEI,IAAAA;AAAF,MAAiBN,GAAvB,CAfC,CAgBD;;AACA,MAAIM,UAAU,KAAK,aAAf,IAAgC,CAACC,gBAAIC,yBAAJ,EAArC,EAAsE;AACpE,UAAM,KAAIT,oBAAJ,EAAa,iBAAb,EAAgC,6CAAhC,CAAN;AACD;;AACDC,EAAAA,GAAG,CAACS,OAAJ,GAAc,MAAMC,0BAAcC,uBAAd,CAAsCf,WAAtC,EAAmDI,GAAnD,CAApB;AACA,SAAO;AACLA,IAAAA,GAAG,EAAE,EACH,GAAGA,GADA;AAEHM,MAAAA,UAAU,EAAEA;AAFT,KADA;AAKLF,IAAAA,GALK;AAMLH,IAAAA;AANK,GAAP;AAQD","sourcesContent":["import {\n  ExpoAppManifest,\n  ExpoConfig,\n  getConfig,\n  PackageJSONConfig,\n  ProjectTarget,\n} from '@expo/config';\n\nimport { Env, ExponentTools, XDLError } from '../internal';\n\nexport type PublishOptions = {\n  releaseChannel?: string;\n  target?: ProjectTarget;\n  resetCache?: boolean;\n  maxWorkers?: number;\n  quiet?: boolean;\n};\n\nexport async function getPublishExpConfigAsync(\n  projectRoot: string,\n  options: Pick<PublishOptions, 'releaseChannel'> = {}\n): Promise<{\n  exp: ExpoAppManifest;\n  pkg: PackageJSONConfig;\n  hooks: ExpoConfig['hooks'];\n}> {\n  if (options.releaseChannel != null && typeof options.releaseChannel !== 'string') {\n    throw new XDLError('INVALID_OPTIONS', 'releaseChannel must be a string');\n  }\n  options.releaseChannel = options.releaseChannel || 'default';\n\n  // Verify that exp/app.json and package.json exist\n  const {\n    exp: { hooks, runtimeVersion },\n  } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  const { exp, pkg } = getConfig(projectRoot, {\n    isPublicConfig: true,\n    // enforce sdk validation if user is not using runtimeVersion\n    skipSDKVersionRequirement: !!runtimeVersion,\n  });\n  const { sdkVersion } = exp;\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (sdkVersion === 'UNVERSIONED' && !Env.maySkipManifestValidation()) {\n    throw new XDLError('INVALID_OPTIONS', 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n  exp.locales = await ExponentTools.getResolvedLocalesAsync(projectRoot, exp);\n  return {\n    exp: {\n      ...exp,\n      sdkVersion: sdkVersion!,\n    },\n    pkg,\n    hooks,\n  };\n}\n"],"file":"getPublishExpConfigAsync.js"}