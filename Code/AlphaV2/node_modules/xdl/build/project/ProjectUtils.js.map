{"version":3,"sources":["../../src/project/ProjectUtils.ts"],"names":["MAX_MESSAGE_LENGTH","_projectRootToLogger","_getLogger","projectRoot","logger","Logger","child","type","project","path","resolve","getLogger","logWithLevel","level","fields","msg","id","issueId","debug","info","warn","error","logDebug","tag","message","toString","logInfo","logError","truncatedMessage","length","substring","logWarning","Analytics","logEvent","clearNotification","issueCleared","attachLoggerStream","stream","addStream"],"mappings":";;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,MAAMA,kBAAkB,GAAG,GAA3B;AACA,MAAMC,oBAAoD,GAAG,EAA7D;;AAEA,SAASC,UAAT,CAAoBC,WAApB,EAA8C;AAC5C,MAAIC,MAAM,GAAGH,oBAAoB,CAACE,WAAD,CAAjC;;AACA,MAAI,CAACC,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAGC,mBAAOC,KAAP,CAAa;AACpBC,MAAAA,IAAI,EAAE,SADc;AAEpBC,MAAAA,OAAO,EAAEC,gBAAKC,OAAL,CAAaP,WAAb;AAFW,KAAb,CAAT;AAIAF,IAAAA,oBAAoB,CAACE,WAAD,CAApB,GAAoCC,MAApC;AACD;;AAED,SAAOA,MAAP;AACD;;AAeM,SAASO,SAAT,CAAmBR,WAAnB,EAA6C;AAClD,SAAOD,UAAU,CAACC,WAAD,CAAjB;AACD;;AAEM,SAASS,YAAT,CACLT,WADK,EAELU,KAFK,EAGLC,MAHK,EAILC,GAJK,EAKLC,EALK,EAML;AACA,MAAIA,EAAJ,EAAQ;AACNF,IAAAA,MAAM,CAACG,OAAP,GAAiBD,EAAjB;AACD;;AAED,QAAMZ,MAAM,GAAGF,UAAU,CAACC,WAAD,CAAzB;;AACA,UAAQU,KAAR;AACE,SAAK,OAAL;AACET,MAAAA,MAAM,CAACc,KAAP,CAAaJ,MAAb,EAAqBC,GAArB;AACA;;AACF,SAAK,MAAL;AACEX,MAAAA,MAAM,CAACe,IAAP,CAAYL,MAAZ,EAAoBC,GAApB;AACA;;AACF,SAAK,MAAL;AACEX,MAAAA,MAAM,CAACgB,IAAP,CAAYN,MAAZ,EAAoBC,GAApB;AACA;;AACF,SAAK,OAAL;AACEX,MAAAA,MAAM,CAACiB,KAAP,CAAaP,MAAb,EAAqBC,GAArB;AACA;;AACF;AACEX,MAAAA,MAAM,CAACc,KAAP,CAAaJ,MAAb,EAAqBC,GAArB;AACA;AAfJ;AAiBD;;AAEM,SAASO,QAAT,CAAkBnB,WAAlB,EAAuCoB,GAAvC,EAAoDC,OAApD,EAAqER,EAArE,EAAkF;AACvFd,EAAAA,UAAU,CAACC,WAAD,CAAV,CAAwBe,KAAxB,CAA8B;AAAEK,IAAAA;AAAF,GAA9B,EAAuCC,OAAO,CAACC,QAAR,EAAvC;AACD;;AAEM,SAASC,OAAT,CAAiBvB,WAAjB,EAAsCoB,GAAtC,EAAmDC,OAAnD,EAAoER,EAApE,EAAiF;AACtF,QAAMF,MAAiB,GAAG;AAAES,IAAAA;AAAF,GAA1B;;AACA,MAAIP,EAAJ,EAAQ;AACNF,IAAAA,MAAM,CAACG,OAAP,GAAiBD,EAAjB;AACD;;AACDd,EAAAA,UAAU,CAACC,WAAD,CAAV,CAAwBgB,IAAxB,CAA6BL,MAA7B,EAAqCU,OAAO,CAACC,QAAR,EAArC;AACD;;AAEM,SAASE,QAAT,CAAkBxB,WAAlB,EAAuCoB,GAAvC,EAAoDC,OAApD,EAAqER,EAArE,EAAkF;AACvF,QAAMF,MAAiB,GAAG;AAAES,IAAAA;AAAF,GAA1B;;AACA,MAAIP,EAAJ,EAAQ;AACNF,IAAAA,MAAM,CAACG,OAAP,GAAiBD,EAAjB;AACD;;AACDd,EAAAA,UAAU,CAACC,WAAD,CAAV,CAAwBkB,KAAxB,CAA8BP,MAA9B,EAAsCU,OAAO,CAACC,QAAR,EAAtC;;AAEA,MAAIG,gBAAgB,GAAGJ,OAAO,CAACC,QAAR,EAAvB;;AACA,MAAIG,gBAAgB,CAACC,MAAjB,GAA0B7B,kBAA9B,EAAkD;AAChD4B,IAAAA,gBAAgB,GAAGA,gBAAgB,CAACE,SAAjB,CAA2B,CAA3B,EAA8B9B,kBAA9B,CAAnB;AACD;AACF;;AAEM,SAAS+B,UAAT,CAAoB5B,WAApB,EAAyCoB,GAAzC,EAAsDC,OAAtD,EAAuER,EAAvE,EAAoF;AACzF,QAAMF,MAAiB,GAAG;AAAES,IAAAA;AAAF,GAA1B;;AACA,MAAIP,EAAJ,EAAQ;AACNF,IAAAA,MAAM,CAACG,OAAP,GAAiBD,EAAjB;AACD;;AACDd,EAAAA,UAAU,CAACC,WAAD,CAAV,CAAwBiB,IAAxB,CAA6BN,MAA7B,EAAqCU,OAAO,CAACC,QAAR,EAArC;;AAEA,MAAIG,gBAAgB,GAAGJ,OAAO,CAACC,QAAR,EAAvB;;AACA,MAAIG,gBAAgB,CAACC,MAAjB,GAA0B7B,kBAA9B,EAAkD;AAChD4B,IAAAA,gBAAgB,GAAGA,gBAAgB,CAACE,SAAjB,CAA2B,CAA3B,EAA8B9B,kBAA9B,CAAnB;AACD;;AACDgC,wBAAUC,QAAV,CAAmB,iBAAnB,EAAsC;AACpCV,IAAAA,GADoC;AAEpCC,IAAAA,OAAO,EAAEI;AAF2B,GAAtC;AAID;;AAEM,SAASM,iBAAT,CAA2B/B,WAA3B,EAAgDa,EAAhD,EAA4D;AACjEd,EAAAA,UAAU,CAACC,WAAD,CAAV,CAAwBgB,IAAxB,CACE;AACEI,IAAAA,GAAG,EAAE,MADP;AAEEY,IAAAA,YAAY,EAAE,IAFhB;AAGElB,IAAAA,OAAO,EAAED;AAHX,GADF,EAMG,iBAAgBA,EAAG,EANtB;AAQD;;AAEM,SAASoB,kBAAT,CAA4BjC,WAA5B,EAAiDkC,MAAjD,EAAoE;AACzEnC,EAAAA,UAAU,CAACC,WAAD,CAAV,CAAwBmC,SAAxB,CAAkCD,MAAlC;AACD","sourcesContent":["import path from 'path';\n\nimport { Analytics, Log, Logger, LogStream } from '../internal';\n\nconst MAX_MESSAGE_LENGTH = 200;\nconst _projectRootToLogger: { [projectRoot: string]: Log } = {};\n\nfunction _getLogger(projectRoot: string): Log {\n  let logger = _projectRootToLogger[projectRoot];\n  if (!logger) {\n    logger = Logger.child({\n      type: 'project',\n      project: path.resolve(projectRoot),\n    });\n    _projectRootToLogger[projectRoot] = logger;\n  }\n\n  return logger;\n}\n\nexport type LogTag = 'expo' | 'metro' | 'device';\nexport type LogFields = {\n  tag: LogTag;\n  issueId?: string;\n  issueCleared?: boolean;\n  includesStack?: boolean;\n  deviceId?: string;\n  deviceName?: string;\n  groupDepth?: number;\n  shouldHide?: boolean;\n  _expoEventType?: 'TUNNEL_READY';\n};\n\nexport function getLogger(projectRoot: string): Log {\n  return _getLogger(projectRoot);\n}\n\nexport function logWithLevel(\n  projectRoot: string,\n  level: string,\n  fields: LogFields,\n  msg: string,\n  id?: string\n) {\n  if (id) {\n    fields.issueId = id;\n  }\n\n  const logger = _getLogger(projectRoot);\n  switch (level) {\n    case 'debug':\n      logger.debug(fields, msg);\n      break;\n    case 'info':\n      logger.info(fields, msg);\n      break;\n    case 'warn':\n      logger.warn(fields, msg);\n      break;\n    case 'error':\n      logger.error(fields, msg);\n      break;\n    default:\n      logger.debug(fields, msg);\n      break;\n  }\n}\n\nexport function logDebug(projectRoot: string, tag: LogTag, message: string, id?: string) {\n  _getLogger(projectRoot).debug({ tag }, message.toString());\n}\n\nexport function logInfo(projectRoot: string, tag: LogTag, message: string, id?: string) {\n  const fields: LogFields = { tag };\n  if (id) {\n    fields.issueId = id;\n  }\n  _getLogger(projectRoot).info(fields, message.toString());\n}\n\nexport function logError(projectRoot: string, tag: LogTag, message: string, id?: string) {\n  const fields: LogFields = { tag };\n  if (id) {\n    fields.issueId = id;\n  }\n  _getLogger(projectRoot).error(fields, message.toString());\n\n  let truncatedMessage = message.toString();\n  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {\n    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);\n  }\n}\n\nexport function logWarning(projectRoot: string, tag: LogTag, message: string, id?: string) {\n  const fields: LogFields = { tag };\n  if (id) {\n    fields.issueId = id;\n  }\n  _getLogger(projectRoot).warn(fields, message.toString());\n\n  let truncatedMessage = message.toString();\n  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {\n    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);\n  }\n  Analytics.logEvent('Project Warning', {\n    tag,\n    message: truncatedMessage,\n  });\n}\n\nexport function clearNotification(projectRoot: string, id: string) {\n  _getLogger(projectRoot).info(\n    {\n      tag: 'expo',\n      issueCleared: true,\n      issueId: id,\n    },\n    `No issue with ${id}`\n  );\n}\n\nexport function attachLoggerStream(projectRoot: string, stream: LogStream) {\n  _getLogger(projectRoot).addStream(stream);\n}\n"],"file":"ProjectUtils.js"}