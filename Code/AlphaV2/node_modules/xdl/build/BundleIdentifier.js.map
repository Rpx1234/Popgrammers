{"version":3,"sources":["../src/BundleIdentifier.ts"],"names":["logInfo","logWarning","ProjectUtils","BundleIdentiferSource","configureBundleIdentifierAsync","projectRoot","exp","configDescription","bundleIdentifierFromPbxproj","IOSConfig","BundleIdentifier","getBundleIdentifierFromPbxproj","bundleIdentifierFromConfig","getBundleIdentifier","hasBundleIdentifierInStaticConfig","hasBundleIdentifierInStaticConfigAsync","bundleIdentifierSource","type","name","message","choices","title","chalk","bold","value","XcodeProject","AppJson","setBundleIdentifierForPbxproj","updateAppJsonConfigAsync","Error","missingBundleIdentifierMessage","staticConfigPath","newBundleIdentifier","paths","rawStaticConfig","JsonFile","readAsync","expo","ios","bundleIdentifier","writeAsync","read"],"mappings":"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","sourcesContent":["/**\n * BundleIdentifier.ts\n *\n * NOTE:\n * The code in this module originates from eas-cli and the canonical version of\n * it is in\n * https://github.com/expo/eas-cli/blob/6a0a9bbaaad03b053b5930f7d14bde35b4d0a9f0/packages/eas-cli/src/build/ios/bundleIdentifer.ts#L36\n * Any changes to this code should be applied to eas-cli as well!\n *\n * TODO: move the code for configuring and validating the bundle identifier\n * to a shared package that can be used for both eas-cli and expo-cli.\n */\nimport { ExpoConfig, getConfigFilePaths, getProjectConfigDescription } from '@expo/config';\nimport { IOSConfig } from '@expo/config-plugins';\nimport JsonFile from '@expo/json-file';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport { prompt } from 'prompts';\n\nimport { ProjectUtils } from './internal';\n\nconst { logInfo, logWarning } = ProjectUtils;\n\nenum BundleIdentiferSource {\n  XcodeProject,\n  AppJson,\n}\n\nexport async function configureBundleIdentifierAsync(\n  projectRoot: string,\n  exp: ExpoConfig\n): Promise<string> {\n  const configDescription = getProjectConfigDescription(projectRoot);\n  const bundleIdentifierFromPbxproj = IOSConfig.BundleIdentifier.getBundleIdentifierFromPbxproj(\n    projectRoot\n  );\n  const bundleIdentifierFromConfig = IOSConfig.BundleIdentifier.getBundleIdentifier(exp);\n  if (bundleIdentifierFromPbxproj && bundleIdentifierFromConfig) {\n    if (bundleIdentifierFromPbxproj === bundleIdentifierFromConfig) {\n      return bundleIdentifierFromConfig;\n    } else {\n      logWarning(\n        projectRoot,\n        'expo',\n        `We detected that your Xcode project is configured with a different bundle identifier than the one defined in ${configDescription}.`\n      );\n      const hasBundleIdentifierInStaticConfig = await hasBundleIdentifierInStaticConfigAsync(\n        projectRoot,\n        exp\n      );\n      if (!hasBundleIdentifierInStaticConfig) {\n        logInfo(\n          projectRoot,\n          'expo',\n          `If you choose the one defined in ${configDescription} we'll automatically configure your Xcode project with it.\nHowever, if you choose the one defined in the Xcode project you'll have to update ${configDescription} on your own.`\n        );\n      }\n      const { bundleIdentifierSource } = await prompt({\n        type: 'select',\n        name: 'bundleIdentifierSource',\n        message: 'Which bundle identifier should we use?',\n        choices: [\n          {\n            title: `${chalk.bold(bundleIdentifierFromPbxproj)} - In Xcode project`,\n            value: BundleIdentiferSource.XcodeProject,\n          },\n          {\n            title: `${chalk.bold(bundleIdentifierFromConfig)} - In your ${configDescription}`,\n            value: BundleIdentiferSource.AppJson,\n          },\n        ],\n      });\n      if (bundleIdentifierSource === BundleIdentiferSource.AppJson) {\n        IOSConfig.BundleIdentifier.setBundleIdentifierForPbxproj(\n          projectRoot,\n          bundleIdentifierFromConfig\n        );\n        return bundleIdentifierFromConfig;\n      } else {\n        if (hasBundleIdentifierInStaticConfig) {\n          await updateAppJsonConfigAsync(projectRoot, exp, bundleIdentifierFromPbxproj);\n        } else {\n          throw new Error(missingBundleIdentifierMessage(configDescription));\n        }\n        return bundleIdentifierFromPbxproj;\n      }\n    }\n  } else if (bundleIdentifierFromPbxproj && !bundleIdentifierFromConfig) {\n    if (getConfigFilePaths(projectRoot).staticConfigPath) {\n      await updateAppJsonConfigAsync(projectRoot, exp, bundleIdentifierFromPbxproj);\n    }\n    return bundleIdentifierFromPbxproj;\n  } else if (!bundleIdentifierFromPbxproj && bundleIdentifierFromConfig) {\n    IOSConfig.BundleIdentifier.setBundleIdentifierForPbxproj(\n      projectRoot,\n      bundleIdentifierFromConfig\n    );\n    return bundleIdentifierFromConfig;\n  } else {\n    throw new Error(missingBundleIdentifierMessage(configDescription));\n  }\n}\n\nfunction missingBundleIdentifierMessage(configDescription: string): string {\n  return `Please define \"ios.bundleIdentifier\" in ${configDescription}.`;\n}\n\nasync function updateAppJsonConfigAsync(\n  projectRoot: string,\n  exp: ExpoConfig,\n  newBundleIdentifier: string\n): Promise<void> {\n  const paths = getConfigFilePaths(projectRoot);\n  assert(paths.staticConfigPath, \"Can't update dynamic configs\");\n\n  const rawStaticConfig = (await JsonFile.readAsync(paths.staticConfigPath)) as any;\n  rawStaticConfig.expo = {\n    ...rawStaticConfig.expo,\n    ios: { ...rawStaticConfig.expo?.ios, bundleIdentifier: newBundleIdentifier },\n  };\n  await JsonFile.writeAsync(paths.staticConfigPath, rawStaticConfig);\n\n  exp.ios = { ...exp.ios, bundleIdentifier: newBundleIdentifier };\n}\n\n/**\n * Check if static config exists and if ios.bundleIdentifier is defined there.\n * It will return false if the value in static config is different than \"ios.bundleIdentifier\" in ExpoConfig\n */\nasync function hasBundleIdentifierInStaticConfigAsync(\n  projectRoot: string,\n  exp: ExpoConfig\n): Promise<boolean> {\n  if (!exp.ios?.bundleIdentifier) {\n    return false;\n  }\n  const paths = getConfigFilePaths(projectRoot);\n  if (!paths.staticConfigPath) {\n    return false;\n  }\n  const rawStaticConfig = JsonFile.read(paths.staticConfigPath) as any;\n  return rawStaticConfig?.expo?.ios?.bundleIdentifier === exp.ios.bundleIdentifier;\n}\n"],"file":"BundleIdentifier.js"}