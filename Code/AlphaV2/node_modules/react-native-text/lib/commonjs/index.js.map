{"version":3,"sources":["index.tsx"],"names":["Dimensions","get","width","height","DEVICE_BASE_WIDTH","FONT_SIZE","REAL_WIDTH","scaleText","deviceBaseWidth","fontSize","lineHeight","Math","round","useScaleText","ScalableText","style","children","props","StyleSheet","flatten","scaledText"],"mappings":"+dAAA,qDACA,yC,iGAE0BA,wBAAWC,GAAX,CAAe,QAAf,C,CAAlBC,K,iBAAAA,K,CAAOC,M,iBAAAA,M,CAEf,GAAMC,CAAAA,iBAAiB,CAAG,GAA1B,CACA,GAAMC,CAAAA,SAAS,CAAG,EAAlB,CACA,GAAMC,CAAAA,UAAU,CAAGH,MAAM,CAAGD,KAAT,CAAiBA,KAAjB,CAAyBC,MAA5C,CASO,GAAMI,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAIR,+BAHfC,eAGe,CAHfA,eAGe,+BAHGJ,iBAGH,yCAFfK,QAEe,CAFfA,QAEe,wBAFJJ,SAEI,oCADfK,UACe,CADfA,UACe,0BADFD,QAAQ,CAAG,GACT,iBACf,MAAO,CACLA,QAAQ,CAAEE,IAAI,CAACC,KAAL,CAAYH,QAAQ,CAAGH,UAAZ,CAA0BE,eAArC,CADL,CAELE,UAAU,CAAEC,IAAI,CAACC,KAAL,CAAYF,UAAU,CAAGJ,UAAd,CAA4BE,eAAvC,CAFP,CAAP,CAID,CATM,C,4BAWA,GAAMK,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,OAIX,iCAHfL,eAGe,CAHfA,eAGe,gCAHGJ,iBAGH,4CAFfK,QAEe,CAFfA,QAEe,yBAFJJ,SAEI,uCADfK,UACe,CADfA,UACe,2BADFD,QAAQ,CAAG,GACT,kBACf,MAAO,mBAAQ,UAAM,CACnB,MAAO,CACLA,QAAQ,CAAEE,IAAI,CAACC,KAAL,CAAYH,QAAQ,CAAGH,UAAZ,CAA0BE,eAArC,CADL,CAELE,UAAU,CAAEC,IAAI,CAACC,KAAL,CAAYF,UAAU,CAAGJ,UAAd,CAA4BE,eAAvC,CAFP,CAAP,CAID,CALM,CAKJ,CAACA,eAAD,CAAkBC,QAAlB,CAA4BC,UAA5B,CALI,CAAP,CAMD,CAXM,C,kCAkBP,GAAMI,CAAAA,YAAsC,CAAG,QAAzCA,CAAAA,YAAyC,OAKzC,IAJJN,CAAAA,eAII,OAJJA,eAII,mBAHJO,KAGI,CAHJA,KAGI,sBAHI,EAGJ,aAFJC,QAEI,OAFJA,QAEI,CADDC,KACC,6GAC6BC,wBAAWC,OAAX,CAAmBJ,KAAnB,CAD7B,CACIN,QADJ,qBACIA,QADJ,CACcC,UADd,qBACcA,UADd,mBAEsBG,YAAY,CAAC,CAAEL,eAAe,CAAfA,eAAF,CAAmBC,QAAQ,CAARA,QAAnB,CAA6BC,UAAU,CAAVA,UAA7B,CAAD,CAFlC,CAEOU,UAFP,yCAIJ,MACE,8BAAC,iBAAD,wBAAM,KAAK,CAAEF,wBAAWC,OAAX,CAAmB,CAACJ,KAAD,CAAQK,UAAR,CAAnB,CAAb,EAA0DH,KAA1D,mDACGD,QADH,CADF,CAKD,CAdD,C,aAgBeF,Y","sourcesContent":["import React, { FunctionComponent, useMemo } from 'react';\nimport { Dimensions, Text, StyleSheet, TextStyle, TextProps } from 'react-native';\n\nconst { width, height } = Dimensions.get('window');\n\nconst DEVICE_BASE_WIDTH = 375; // iPhone 6 width\nconst FONT_SIZE = 14;\nconst REAL_WIDTH = height > width ? width : height;\n\ntype ScaleText = {\n  deviceBaseWidth?: number;\n  fontSize?: number;\n  lineHeight?: number;\n  realWidth?: number;\n};\n\nexport const scaleText = ({\n  deviceBaseWidth = DEVICE_BASE_WIDTH,\n  fontSize = FONT_SIZE,\n  lineHeight = fontSize * 1.2, // Default line height is 120% of the font size.\n}: ScaleText) => {\n  return {\n    fontSize: Math.round((fontSize * REAL_WIDTH) / deviceBaseWidth),\n    lineHeight: Math.round((lineHeight * REAL_WIDTH) / deviceBaseWidth),\n  };\n};\n\nexport const useScaleText = ({\n  deviceBaseWidth = DEVICE_BASE_WIDTH,\n  fontSize = FONT_SIZE,\n  lineHeight = fontSize * 1.2, // Default line height is 120% of the font size.\n}: ScaleText) => {\n  return useMemo(() => {\n    return {\n      fontSize: Math.round((fontSize * REAL_WIDTH) / deviceBaseWidth),\n      lineHeight: Math.round((lineHeight * REAL_WIDTH) / deviceBaseWidth),\n    };\n  }, [deviceBaseWidth, fontSize, lineHeight]);\n};\n\ninterface Props extends TextProps {\n  deviceBaseWidth?: number;\n  style?: TextStyle;\n}\n\nconst ScalableText: FunctionComponent<Props> = ({\n  deviceBaseWidth,\n  style = {},\n  children,\n  ...props\n}) => {\n  const { fontSize, lineHeight } = StyleSheet.flatten(style);\n  const { ...scaledText } = useScaleText({ deviceBaseWidth, fontSize, lineHeight });\n\n  return (\n    <Text style={StyleSheet.flatten([style, scaledText])} {...props}>\n      {children}\n    </Text>\n  );\n};\n\nexport default ScalableText;\n"]}