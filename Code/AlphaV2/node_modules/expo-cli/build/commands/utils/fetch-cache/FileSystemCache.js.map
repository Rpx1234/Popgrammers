{"version":3,"sources":["../../../../src/commands/utils/fetch-cache/FileSystemCache.ts"],"names":["getBodyAndMetaKeys","key","FileSystemCache","constructor","options","get","metaKey","metaInfo","cacache","info","cacheDirectory","undefined","metaBuffer","byDigest","integrity","metaData","JSON","parse","bodyStreamIntegrity","empty","expiration","Date","now","bodyStream","Readable","from","Buffer","alloc","stream","remove","bodyKey","Promise","all","rm","entry","set","metaCopy","ttl","fulfill","reject","pipe","put","on","i","e","err","code","stringify","cachedData"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,SAASA,kBAAT,CAA4BC,GAA5B,EAA2D;AACzD,SAAO,CAAE,GAAEA,GAAI,MAAR,EAAgB,GAAEA,GAAI,MAAtB,CAAP;AACD;;AAEM,MAAMC,eAAN,CAAsB;AAC3BC,EAAAA,WAAW,CAAQC,OAAR,EAA4D;AAAA,SAApDA,OAAoD,GAApDA,OAAoD;AAAE;;AAEhE,QAAHC,GAAG,CAACJ,GAAD,EAAc;AACrB,UAAM,GAAGK,OAAH,IAAcN,kBAAkB,CAACC,GAAD,CAAtC;AAEA,UAAMM,QAAQ,GAAG,MAAMC,mBAAQH,GAAR,CAAYI,IAAZ,CAAiB,KAAKL,OAAL,CAAaM,cAA9B,EAA8CJ,OAA9C,CAAvB;;AAEA,QAAI,CAACC,QAAL,EAAe;AACb,aAAOI,SAAP;AACD;;AAED,UAAMC,UAAU,GAAG,MAAMJ,mBAAQH,GAAR,CAAYQ,QAAZ,CAAqB,KAAKT,OAAL,CAAaM,cAAlC,EAAkDH,QAAQ,CAACO,SAA3D,CAAzB;AACA,UAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWL,UAAX,CAAjB;AACA,UAAM;AAAEM,MAAAA,mBAAF;AAAuBC,MAAAA,KAAvB;AAA8BC,MAAAA;AAA9B,QAA6CL,QAAnD;AAEA,WAAOA,QAAQ,CAACG,mBAAhB;AACA,WAAOH,QAAQ,CAACI,KAAhB;AACA,WAAOJ,QAAQ,CAACK,UAAhB;;AAEA,QAAIA,UAAU,IAAIA,UAAU,GAAGC,IAAI,CAACC,GAAL,EAA/B,EAA2C;AACzC,aAAOX,SAAP;AACD;;AAED,UAAMY,UAAU,GAAGJ,KAAK,GACpBK,mBAASC,IAAT,CAAcC,MAAM,CAACC,KAAP,CAAa,CAAb,CAAd,CADoB,GAEpBnB,mBAAQH,GAAR,CAAYuB,MAAZ,CAAmBf,QAAnB,CAA4B,KAAKT,OAAL,CAAaM,cAAzC,EAAyDQ,mBAAzD,CAFJ;AAIA,WAAO;AACLK,MAAAA,UADK;AAELR,MAAAA;AAFK,KAAP;AAID;;AAEDc,EAAAA,MAAM,CAAC5B,GAAD,EAAc;AAClB,UAAM,CAAC6B,OAAD,EAAUxB,OAAV,IAAqBN,kBAAkB,CAACC,GAAD,CAA7C;AAEA,WAAO8B,OAAO,CAACC,GAAR,CAAY,CACjBxB,mBAAQyB,EAAR,CAAWC,KAAX,CAAiB,KAAK9B,OAAL,CAAaM,cAA9B,EAA8CoB,OAA9C,CADiB,EAEjBtB,mBAAQyB,EAAR,CAAWC,KAAX,CAAiB,KAAK9B,OAAL,CAAaM,cAA9B,EAA8CJ,OAA9C,CAFiB,CAAZ,CAAP;AAID;;AAEQ,QAAH6B,GAAG,CAAClC,GAAD,EAAcsB,UAAd,EAA6CR,QAA7C,EAA4D;AACnE,UAAM,CAACe,OAAD,EAAUxB,OAAV,IAAqBN,kBAAkB,CAACC,GAAD,CAA7C;AACA,UAAMmC,QAAQ,GAAG,EAAE,GAAGrB;AAAL,KAAjB;;AAEA,QAAI,OAAO,KAAKX,OAAL,CAAaiC,GAApB,KAA4B,QAAhC,EAA0C;AACxCD,MAAAA,QAAQ,CAAChB,UAAT,GAAsBC,IAAI,CAACC,GAAL,KAAa,KAAKlB,OAAL,CAAaiC,GAAhD;AACD;;AAED,QAAI;AACFD,MAAAA,QAAQ,CAAClB,mBAAT,GAA+B,MAAM,IAAIa,OAAJ,CAAY,CAACO,OAAD,EAAUC,MAAV,KAAqB;AACpEhB,QAAAA,UAAU,CACPiB,IADH,CACQhC,mBAAQiC,GAAR,CAAYb,MAAZ,CAAmB,KAAKxB,OAAL,CAAaM,cAAhC,EAAgDoB,OAAhD,CADR,EAEGY,EAFH,CAEM,WAFN,EAEmBC,CAAC,IAAIL,OAAO,CAACK,CAAD,CAF/B,EAGGD,EAHH,CAGM,OAHN,EAGeE,CAAC,IAAI;AAChBL,UAAAA,MAAM,CAACK,CAAD,CAAN;AACD,SALH;AAMD,OAPoC,CAArC;AAQD,KATD,CASE,OAAOC,GAAP,EAAiB;AACjB,UAAIA,GAAG,CAACC,IAAJ,KAAa,SAAjB,EAA4B;AAC1B,cAAMD,GAAN;AACD;;AAEDT,MAAAA,QAAQ,CAACjB,KAAT,GAAiB,IAAjB;AACD;;AAED,UAAMP,UAAU,GAAGc,MAAM,CAACD,IAAP,CAAYT,IAAI,CAAC+B,SAAL,CAAeX,QAAf,CAAZ,CAAnB;AACA,UAAM5B,mBAAQiC,GAAR,CAAY,KAAKrC,OAAL,CAAaM,cAAzB,EAAyCJ,OAAzC,EAAkDM,UAAlD,CAAN;AACA,UAAMoC,UAAU,GAAG,MAAM,KAAK3C,GAAL,CAASJ,GAAT,CAAzB;AAEA,WAAO+C,UAAP;AACD;;AAzE0B","sourcesContent":["import cacache from 'cacache';\nimport { Readable } from 'stream';\n\nfunction getBodyAndMetaKeys(key: string): [string, string] {\n  return [`${key}body`, `${key}meta`];\n}\n\nexport class FileSystemCache {\n  constructor(public options: { ttl?: boolean; cacheDirectory: string }) {}\n\n  async get(key: string) {\n    const [, metaKey] = getBodyAndMetaKeys(key);\n\n    const metaInfo = await cacache.get.info(this.options.cacheDirectory, metaKey);\n\n    if (!metaInfo) {\n      return undefined;\n    }\n\n    const metaBuffer = await cacache.get.byDigest(this.options.cacheDirectory, metaInfo.integrity);\n    const metaData = JSON.parse(metaBuffer);\n    const { bodyStreamIntegrity, empty, expiration } = metaData;\n\n    delete metaData.bodyStreamIntegrity;\n    delete metaData.empty;\n    delete metaData.expiration;\n\n    if (expiration && expiration < Date.now()) {\n      return undefined;\n    }\n\n    const bodyStream = empty\n      ? Readable.from(Buffer.alloc(0))\n      : cacache.get.stream.byDigest(this.options.cacheDirectory, bodyStreamIntegrity);\n\n    return {\n      bodyStream,\n      metaData,\n    };\n  }\n\n  remove(key: string) {\n    const [bodyKey, metaKey] = getBodyAndMetaKeys(key);\n\n    return Promise.all([\n      cacache.rm.entry(this.options.cacheDirectory, bodyKey),\n      cacache.rm.entry(this.options.cacheDirectory, metaKey),\n    ]);\n  }\n\n  async set(key: string, bodyStream: NodeJS.ReadStream, metaData: any) {\n    const [bodyKey, metaKey] = getBodyAndMetaKeys(key);\n    const metaCopy = { ...metaData };\n\n    if (typeof this.options.ttl === 'number') {\n      metaCopy.expiration = Date.now() + this.options.ttl;\n    }\n\n    try {\n      metaCopy.bodyStreamIntegrity = await new Promise((fulfill, reject) => {\n        bodyStream\n          .pipe(cacache.put.stream(this.options.cacheDirectory, bodyKey))\n          .on('integrity', i => fulfill(i))\n          .on('error', e => {\n            reject(e);\n          });\n      });\n    } catch (err: any) {\n      if (err.code !== 'ENODATA') {\n        throw err;\n      }\n\n      metaCopy.empty = true;\n    }\n\n    const metaBuffer = Buffer.from(JSON.stringify(metaCopy));\n    await cacache.put(this.options.cacheDirectory, metaKey, metaBuffer);\n    const cachedData = await this.get(key);\n\n    return cachedData;\n  }\n}\n"],"file":"FileSystemCache.js"}