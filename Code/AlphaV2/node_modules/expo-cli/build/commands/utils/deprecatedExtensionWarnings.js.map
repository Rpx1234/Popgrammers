{"version":3,"sources":["../../../src/commands/utils/deprecatedExtensionWarnings.ts"],"names":["queryExpoExtensionFilesAsync","projectRoot","ignore","results","absolute","cwd","Log","warn","assertProjectHasExpoExtensionFilesAsync","checkNodeModules","assertModulesHasExpoExtensionFilesAsync","time","matches","catch","timeEnd","length","promptMatchesAsync","spinner","start","root","filter","value","includes","match","succeed","fail","logMatchedFiles","hasNodeModules","find","error","chalk","red","bold","reset","map","join","dim","program","nonInteractive","message","initial","SilentError"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport program from 'commander';\nimport findWorkspaceRoot from 'find-yarn-workspace-root';\n\nimport { SilentError } from '../../CommandError';\nimport Log from '../../log';\nimport { ora } from '../../utils/ora';\nimport { confirmAsync } from '../../utils/prompts';\nimport { everyMatchAsync, wrapGlobWithTimeout } from './glob';\n\nasync function queryExpoExtensionFilesAsync(\n  projectRoot: string,\n  ignore: string[]\n): Promise<string[]> {\n  const results = await wrapGlobWithTimeout(\n    () =>\n      everyMatchAsync('**/*.expo.@(js|jsx|ts|tsx)', {\n        absolute: true,\n        ignore,\n        cwd: projectRoot,\n      }),\n    5000\n  );\n\n  if (results === false) {\n    Log.warn('Failed to query all project files. Skipping `.expo.*` extension check...');\n    return [];\n  }\n  return results;\n}\n\nexport async function assertProjectHasExpoExtensionFilesAsync(\n  projectRoot: string,\n  checkNodeModules: boolean = false\n) {\n  if (checkNodeModules) {\n    await assertModulesHasExpoExtensionFilesAsync(projectRoot);\n  } else {\n    Log.time('assertProjectHasExpoExtensionFilesAsync');\n\n    const matches = await queryExpoExtensionFilesAsync(projectRoot, [\n      `**/@(Carthage|Pods|node_modules|ts-declarations|.expo)/**`,\n      '@(ios|android|web)/**',\n    ]).catch(() => [] as string[]);\n\n    Log.timeEnd('assertProjectHasExpoExtensionFilesAsync');\n    if (matches.length) {\n      await promptMatchesAsync(matches);\n    }\n  }\n}\n\nasync function assertModulesHasExpoExtensionFilesAsync(projectRoot: string) {\n  const spinner = ora('Checking project for deprecated features, this may take a moment.').start();\n  const root = findWorkspaceRoot(projectRoot) || projectRoot;\n\n  Log.time('assertModulesHasExpoExtensionFilesAsync');\n  let matches = await queryExpoExtensionFilesAsync(root, [\n    `**/@(Carthage|Pods|ts-declarations|.expo)/**`,\n    '@(ios|android|web)/**',\n  ]).catch(() => [] as string[]);\n  Log.timeEnd('assertModulesHasExpoExtensionFilesAsync');\n  matches = matches.filter(value => {\n    if (value.includes('node_modules')) {\n      // Remove duplicate files from packages compiled with bob\n      return !value.match(/node_modules\\/.*\\/lib\\/commonjs/g);\n    }\n    return true;\n  });\n\n  if (!matches.length) {\n    spinner.succeed('Validated project');\n    return;\n  } else {\n    spinner.fail('Found project files with deprecated features');\n  }\n\n  logMatchedFiles(matches);\n}\n\nfunction logMatchedFiles(matches: string[]) {\n  const hasNodeModules = matches.find(match => match.includes('node_modules/'));\n  Log.error(\n    chalk.red(\n      `Project is using deprecated ${chalk.bold`.expo.*`} file extensions.\\nPlease refactor the following files${\n        hasNodeModules ? ' and upgrade modules' : ''\n      } accordingly:\\n\\n`\n    ) +\n      chalk.reset(\n        matches.map(match => `- ${match}`).join('\\n') +\n          chalk.dim(\n            `\\n\\nDangerously disable this check with ${chalk.bold(\n              `EXPO_LEGACY_IMPORTS=1`\n            )}\\nLearn more: http://expo.fyi/expo-extension-migration\\n`\n          )\n      )\n  );\n}\n\nasync function promptMatchesAsync(matches: string[]) {\n  logMatchedFiles(matches);\n\n  // Skip in nonInteractive to give users a bypass\n  if (\n    program.nonInteractive ||\n    (await confirmAsync({ message: 'Would you like to continue anyways?', initial: true }))\n  ) {\n    return;\n  }\n\n  throw new SilentError();\n}\n"],"file":"deprecatedExtensionWarnings.js"}