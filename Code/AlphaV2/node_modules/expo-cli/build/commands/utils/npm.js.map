{"version":3,"sources":["../../../src/commands/utils/npm.ts"],"names":["cachedFetch","FileSystemCache","cacheDirectory","getCacheFilePath","sanitizeNpmPackageName","name","applyKnownNpmPackageNameRules","test","substring","toLowerCase","replace","normalize","npmViewAsync","props","cmd","results","stdout","trim","cmdString","join","Log","debug","JSON","parse","error","Error","message","getNpmUrlAsync","packageName","Array","isArray","length","CommandError","pipeline","Stream","downloadAndExtractNpmModuleAsync","npmName","url","extractNpmTarballFromUrlAsync","extractLocalNpmTarballAsync","tarFilePath","readStream","fs","createReadStream","extractNpmTarballAsync","path","UserSettings","dotExpoHomeDirectory","createUrlStreamAsync","response","ok","statusText","body","stream","cwd","strip","fileList","ensureDir","tar","extract","transform","onentry"],"mappings":"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","sourcesContent":["import { JSONValue } from '@expo/json-file';\nimport spawnAsync from '@expo/spawn-async';\nimport assert from 'assert';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport slugify from 'slugify';\nimport { Stream } from 'stream';\nimport tar from 'tar';\nimport { promisify } from 'util';\nimport { UserSettings } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport { createEntryResolver, createFileTransform } from './createFileTransform';\nimport { FileSystemCache } from './fetch-cache/FileSystemCache';\nimport createFetchWithCache from './fetch-cache/fetch';\n\nconst cachedFetch = createFetchWithCache(\n  new FileSystemCache({\n    cacheDirectory: getCacheFilePath(),\n    // Time to live. How long (in ms) responses remain cached before being automatically ejected. If undefined, responses are never automatically ejected from the cache.\n    // ttl: 1000,\n  })\n);\n\nexport function sanitizeNpmPackageName(name: string): string {\n  // https://github.com/npm/validate-npm-package-name/#naming-rules\n  return (\n    applyKnownNpmPackageNameRules(name) ||\n    applyKnownNpmPackageNameRules(slugify(name)) ||\n    // If nothing is left use 'app' like we do in Xcode projects.\n    'app'\n  );\n}\n\nfunction applyKnownNpmPackageNameRules(name: string): string | null {\n  // https://github.com/npm/validate-npm-package-name/#naming-rules\n\n  // package name cannot start with '.' or '_'.\n  while (/^(\\.|_)/.test(name)) {\n    name = name.substring(1);\n  }\n\n  name = name.toLowerCase().replace(/[^a-zA-Z0-9._\\-/@]/g, '');\n\n  return (\n    name\n      // .replace(/![a-z0-9-._~]+/g, '')\n      // Remove special characters\n      .normalize('NFD')\n      .replace(/[\\u0300-\\u036f]/g, '') || null\n  );\n}\n\nexport async function npmViewAsync(...props: string[]): Promise<JSONValue> {\n  const cmd = ['view', ...props, '--json'];\n  const results = (await spawnAsync('npm', cmd)).stdout?.trim();\n  const cmdString = `npm ${cmd.join(' ')}`;\n  Log.debug('Run:', cmdString);\n  if (!results) {\n    return null;\n  }\n  try {\n    return JSON.parse(results);\n  } catch (error: any) {\n    throw new Error(\n      `Could not parse JSON returned from \"${cmdString}\".\\n\\n${results}\\n\\nError: ${error.message}`\n    );\n  }\n}\n\n/** Given a package name like `expo` or `expo@beta`, return the registry URL if it exists. */\nexport async function getNpmUrlAsync(packageName: string): Promise<string> {\n  const results = await npmViewAsync(packageName, 'dist.tarball');\n\n  assert(results, `Could not get npm url for package \"${packageName}\"`);\n\n  // Fully qualified url returns a string.\n  // Example:\n  // ùù† npm view expo-template-bare-minimum@sdk-33 dist.tarball --json\n  if (typeof results === 'string') {\n    return results;\n  }\n\n  // When the tag is arbitrary, the tarball url is an array, return the last value as it's the most recent.\n  // Example:\n  // ùù† npm view expo-template-bare-minimum@33 dist.tarball --json\n  if (Array.isArray(results)) {\n    return results[results.length - 1] as string;\n  }\n\n  throw new CommandError(\n    'Expected results of `npm view ...` to be an array or string. Instead found: ' + results\n  );\n}\n\n// @ts-ignore\nconst pipeline = promisify(Stream.pipeline);\n\nexport async function downloadAndExtractNpmModuleAsync(\n  npmName: string,\n  props: ExtractProps\n): Promise<void> {\n  const url = await getNpmUrlAsync(npmName);\n\n  Log.debug('Fetch from URL:', url);\n  await extractNpmTarballFromUrlAsync(url, props);\n}\n\nexport async function extractLocalNpmTarballAsync(\n  tarFilePath: string,\n  props: ExtractProps\n): Promise<void> {\n  const readStream = fs.createReadStream(tarFilePath);\n  await extractNpmTarballAsync(readStream, props);\n}\n\ntype ExtractProps = {\n  name: string;\n  cwd: string;\n  strip?: number;\n  fileList?: string[];\n};\n\nfunction getCacheFilePath() {\n  return path.join(UserSettings.dotExpoHomeDirectory(), 'template-cache');\n}\n\nasync function createUrlStreamAsync(url: string) {\n  const response = await cachedFetch(url);\n  if (!response.ok) {\n    throw new Error(`Unexpected response: ${response.statusText}. From url: ${url}`);\n  }\n\n  return response.body;\n}\n\nexport async function extractNpmTarballFromUrlAsync(\n  url: string,\n  props: ExtractProps\n): Promise<void> {\n  await extractNpmTarballAsync(await createUrlStreamAsync(url), props);\n}\n\nexport async function extractNpmTarballAsync(\n  stream: NodeJS.ReadableStream,\n  props: ExtractProps\n): Promise<void> {\n  const { cwd, strip, name, fileList = [] } = props;\n\n  await fs.ensureDir(cwd);\n\n  return pipeline(\n    stream,\n    tar.extract(\n      {\n        cwd,\n        transform: createFileTransform(name),\n        onentry: createEntryResolver(name),\n        strip: strip ?? 1,\n      },\n      fileList\n    )\n  );\n}\n"],"file":"npm.js"}