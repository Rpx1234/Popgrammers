{"version":3,"sources":["../../../src/commands/utils/ClientUpgradeUtils.ts"],"names":["getExpoSdkConfig","path","projectRoot","exp","skipSDKVersionRequirement","error","code","undefined","getClient","platform","sdk","androidClientUrl","url","version","androidClientVersion","iosClientUrl","iosClientVersion","getAvailableClients","options","Object","keys","sdkVersions","reverse","map","client","sdkVersionString","sdkVersion","clientUrl","clientVersion","filter","hasUrl","isDeprecated","IsCompatible","project","Versions","lteSdkVersion","askClientToInstall","answer","type","name","message","optionsPerPage","choices","clients","clientLabels","latestSdkVersion","currentSdkVersion","Boolean","clientMessage","length","join","value","title","chalk","bold","gray","targetClient"],"mappings":"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","sourcesContent":["import { getConfig } from '@expo/config';\nimport { ExpoConfig } from '@expo/config-types';\nimport chalk from 'chalk';\nimport { Versions } from 'xdl';\n\nimport prompt from '../../utils/prompts';\nimport { findProjectRootAsync } from './ProjectUtils';\n\nexport async function getExpoSdkConfig(path: string) {\n  try {\n    const { projectRoot } = await findProjectRootAsync(path);\n    const { exp } = getConfig(projectRoot, {\n      skipSDKVersionRequirement: true,\n    });\n    return exp;\n  } catch (error) {\n    if (error.code !== 'NO_PROJECT') {\n      throw error;\n    }\n  }\n  return undefined;\n}\n\ntype ClientPlatform = 'android' | 'ios';\n\nexport function getClient(platform: ClientPlatform, sdk?: Versions.SDKVersion | null) {\n  if (!sdk) {\n    return null;\n  }\n\n  if (platform === 'android' && sdk.androidClientUrl) {\n    return {\n      url: sdk.androidClientUrl,\n      version: sdk.androidClientVersion,\n    };\n  }\n\n  if (platform === 'ios' && sdk.iosClientUrl) {\n    return {\n      url: sdk.iosClientUrl,\n      version: sdk.iosClientVersion,\n    };\n  }\n\n  return null;\n}\n\ninterface AvailableClientOptions {\n  sdkVersions: Versions.SDKVersions;\n  platform: ClientPlatform;\n  project?: ExpoConfig;\n}\n\ninterface AvailableClient {\n  sdkVersion: Versions.SDKVersion;\n  sdkVersionString: string;\n  clientUrl?: string;\n  clientVersion?: string;\n}\n\nexport function getAvailableClients(options: AvailableClientOptions): AvailableClient[] {\n  return Object.keys(options.sdkVersions)\n    .reverse()\n    .map(version => {\n      const client = getClient(options.platform, options.sdkVersions[version]);\n\n      return {\n        sdkVersionString: version,\n        sdkVersion: options.sdkVersions[version],\n        clientUrl: client?.url,\n        clientVersion: client?.version,\n      };\n    })\n    .filter(client => {\n      const hasUrl = !!client.clientUrl;\n      const isDeprecated = !!client.sdkVersion.isDeprecated;\n      const IsCompatible = options.project\n        ? Versions.lteSdkVersion(options.project, client.sdkVersionString)\n        : true;\n\n      return !isDeprecated && IsCompatible && hasUrl;\n    });\n}\n\ninterface InstallClientOptions {\n  clients: AvailableClient[];\n  latestSdkVersion?: string;\n  currentSdkVersion?: string;\n}\n\nexport async function askClientToInstall(options: InstallClientOptions): Promise<AvailableClient> {\n  const answer = await prompt({\n    type: 'select',\n    name: 'targetClient',\n    message: 'Choose an SDK version to install the client for:',\n    optionsPerPage: 20,\n    choices: options.clients.map(client => {\n      const clientVersion = `- client ${client.clientVersion || 'version unknown'}`;\n      const clientLabels = [\n        client.sdkVersionString === options.latestSdkVersion && 'latest',\n        client.sdkVersionString === options.currentSdkVersion && 'recommended',\n      ].filter(Boolean);\n\n      const clientMessage = clientLabels.length\n        ? `${clientVersion} (${clientLabels.join(', ')})`\n        : clientVersion;\n\n      return {\n        value: client,\n        title: `${chalk.bold(client.sdkVersionString)} ${chalk.gray(clientMessage)}`,\n      };\n    }),\n  });\n\n  return answer.targetClient;\n}\n"],"file":"ClientUpgradeUtils.js"}