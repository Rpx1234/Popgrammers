{"version":3,"sources":["../../../src/commands/utils/applyAsyncAction.ts"],"names":["applyAsyncActionProjectDir","command","resolve","settings","asyncActionProjectDir","projectRoot","options","mod","actionAsync","applyAsyncAction","asyncAction","args","applyAnyAsyncAction"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEO,SAASA,0BAAT,CACLC,OADK,EAELC,OAFK,EAKLC,QALK,EAML;AACAF,EAAAA,OAAO,CAACG,qBAAR,CAA8B,OAAOC,WAAP,EAA4BC,OAA5B,KAAiD;AAC7E,UAAMC,GAAG,GAAG,MAAML,OAAO,EAAzB;AACA,WAAO,oCAAcK,GAAG,CAACC,WAAlB,EAA+BH,WAA/B,EAA4CC,OAA5C,CAAP;AACD,GAHD,EAGGH,QAHH;AAID;;AAEM,SAASM,gBAAT,CACLR,OADK,EAELC,OAFK,EAGL;AACAD,EAAAA,OAAO,CAACS,WAAR,CAAoB,OAAOC,IAAP,EAAmBL,OAAnB,KAAwC;AAC1D,UAAMC,GAAG,GAAG,MAAML,OAAO,EAAzB;AACA,WAAO,oCAAcK,GAAG,CAACC,WAAlB,EAA+BG,IAA/B,EAAqCL,OAArC,CAAP;AACD,GAHD;AAID;;AAEM,SAASM,mBAAT,CACLX,OADK,EAELC,OAFK,EAGL;AACAD,EAAAA,OAAO,CAACS,WAAR,CAAoB,MAAOJ,OAAP,IAA4B;AAC9C,2BAAO,OAAOA,OAAP,KAAmB,QAA1B,EAAoC,qCAApC;AACA,UAAMC,GAAG,GAAG,MAAML,OAAO,EAAzB;AACA,WAAO,oCAAcK,GAAG,CAACC,WAAlB,EAA+BF,OAA/B,CAAP;AACD,GAJD;AAKD","sourcesContent":["import assert from 'assert';\nimport type { Command } from 'commander';\n\nimport { profileMethod } from '../utils/profileMethod';\n\nexport function applyAsyncActionProjectDir<Options = Record<string, any>>(\n  command: Command,\n  resolve: () => Promise<{\n    actionAsync: (projectRoot: string, options: Options) => Promise<unknown>;\n  }>,\n  settings?: { checkConfig?: boolean; skipSDKVersionRequirement?: true }\n) {\n  command.asyncActionProjectDir(async (projectRoot: string, options: Options) => {\n    const mod = await resolve();\n    return profileMethod(mod.actionAsync)(projectRoot, options);\n  }, settings);\n}\n\nexport function applyAsyncAction<Args = string[], Options = Record<string, any>>(\n  command: Command,\n  resolve: () => Promise<{ actionAsync: (args: Args, options: Options) => Promise<unknown> }>\n) {\n  command.asyncAction(async (args: Args, options: Options) => {\n    const mod = await resolve();\n    return profileMethod(mod.actionAsync)(args, options);\n  });\n}\n\nexport function applyAnyAsyncAction<Options = Record<string, any>>(\n  command: Command,\n  resolve: () => Promise<{ actionAsync: (options: Options) => Promise<unknown> }>\n) {\n  command.asyncAction(async (options: Options) => {\n    assert(typeof options !== 'string', 'Unexpected string passed to command');\n    const mod = await resolve();\n    return profileMethod(mod.actionAsync)(options);\n  });\n}\n"],"file":"applyAsyncAction.js"}