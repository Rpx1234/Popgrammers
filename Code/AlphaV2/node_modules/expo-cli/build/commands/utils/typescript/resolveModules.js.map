{"version":3,"sources":["../../../../src/commands/utils/typescript/resolveModules.ts"],"names":["fileExistsAsync","file","catch","isFile","requiredPackages","pkg","baseTSConfigName","queryFirstProjectTypeScriptFileAsync","projectRoot","results","cwd","ignore","resolveBaseTSConfig","resolveFrom","silent","hasTSConfig","tsConfigPath","path","join","collectMissingPackages","resolutions","missingPackages","filter","p","missing"],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEA,eAAeA,eAAf,CAA+BC,IAA/B,EAA+D;AAAA;;AAC7D,uDAAQ,MAAM,qBAAKA,IAAL,EAAWC,KAAX,CAAiB,MAAM,IAAvB,CAAd,sDAAO,kBAAsCC,MAAtC,EAAP,yEAAyD,KAAzD;AACD;;AAED,MAAMC,gBAAgB,GAAG,CACvB;AACA;AACA;AAAEH,EAAAA,IAAI,EAAE,yBAAR;AAAmCI,EAAAA,GAAG,EAAE;AAAxC,CAHuB,EAIvB;AAAEJ,EAAAA,IAAI,EAAE,yBAAR;AAAmCI,EAAAA,GAAG,EAAE;AAAxC,CAJuB,EAKvB;AAAEJ,EAAAA,IAAI,EAAE,gCAAR;AAA0CI,EAAAA,GAAG,EAAE;AAA/C,CALuB,CAAzB;AAQO,MAAMC,gBAAgB,GAAG,oBAAzB;;;AAEA,eAAeC,oCAAf,CACLC,WADK,EAEmB;AAAA;;AACxB,QAAMC,OAAO,GAAG,MAAM,iCACpB,MACE,6BAAgB,gBAAhB,EAAkC;AAChCC,IAAAA,GAAG,EAAEF,WAD2B;AAEhCG,IAAAA,MAAM,EAAE,CACN,qCADM,EAEN,WAFM,EAGN,sCAHM;AAFwB,GAAlC,CAFkB,EAUpB,IAVoB,CAAtB;;AAaA,MAAIF,OAAO,KAAK,KAAhB,EAAuB;AACrB,WAAO,IAAP;AACD;;AACD,sBAAOA,OAAO,CAAC,CAAD,CAAd,iDAAqB,IAArB;AACD;;AAEM,SAASG,mBAAT,CAA6BJ,WAA7B,EAAiE;AAAA;;AACtE,gCAAOK,uBAAYC,MAAZ,CAAmBN,WAAnB,EAAgC,yBAAhC,CAAP,qEAAqE,IAArE;AACD;;AAEM,eAAeO,WAAf,CAA2BP,WAA3B,EAAwE;AAC7E,QAAMQ,YAAY,GAAGC,IAAI,GAACC,IAAL,CAAUV,WAAV,EAAuB,eAAvB,CAArB;;AACA,MAAI,MAAMR,eAAe,CAACgB,YAAD,CAAzB,EAAyC;AACvC,WAAOA,YAAP;AACD;;AACD,SAAO,IAAP;AACD;;AAEM,SAASG,sBAAT,CACLX,WADK,EASL;AACA,QAAMY,WAAmC,GAAG,EAA5C;AAEA,QAAMC,eAAe,GAAGjB,gBAAgB,CAACkB,MAAjB,CAAwBC,CAAC,IAAI;AACnD,QAAI;AACFH,MAAAA,WAAW,CAACG,CAAC,CAAClB,GAAH,CAAX,GAAqB,4BAAYG,WAAZ,EAAyBe,CAAC,CAACtB,IAA3B,CAArB;AACA,aAAO,KAAP;AACD,KAHD,CAGE,MAAM;AACN,aAAO,IAAP;AACD;AACF,GAPuB,CAAxB;AASA,SAAO;AAAEuB,IAAAA,OAAO,EAAEH,eAAX;AAA4BD,IAAAA;AAA5B,GAAP;AACD","sourcesContent":["import { stat } from 'fs-extra';\nimport * as path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { everyMatchAsync, wrapGlobWithTimeout } from '../glob';\n\nasync function fileExistsAsync(file: string): Promise<boolean> {\n  return (await stat(file).catch(() => null))?.isFile() ?? false;\n}\n\nconst requiredPackages = [\n  // use typescript/package.json to skip node module cache issues when the user installs\n  // the package and attempts to resolve the module in the same process.\n  { file: 'typescript/package.json', pkg: 'typescript' },\n  { file: '@types/react/index.d.ts', pkg: '@types/react' },\n  { file: '@types/react-native/index.d.ts', pkg: '@types/react-native' },\n];\n\nexport const baseTSConfigName = 'expo/tsconfig.base';\n\nexport async function queryFirstProjectTypeScriptFileAsync(\n  projectRoot: string\n): Promise<null | string> {\n  const results = await wrapGlobWithTimeout(\n    () =>\n      everyMatchAsync('**/*.@(ts|tsx)', {\n        cwd: projectRoot,\n        ignore: [\n          '**/@(Carthage|Pods|node_modules)/**',\n          '**/*.d.ts',\n          '@(ios|android|web|web-build|dist)/**',\n        ],\n      }),\n    5000\n  );\n\n  if (results === false) {\n    return null;\n  }\n  return results[0] ?? null;\n}\n\nexport function resolveBaseTSConfig(projectRoot: string): string | null {\n  return resolveFrom.silent(projectRoot, 'expo/tsconfig.base.json') ?? null;\n}\n\nexport async function hasTSConfig(projectRoot: string): Promise<string | null> {\n  const tsConfigPath = path.join(projectRoot, 'tsconfig.json');\n  if (await fileExistsAsync(tsConfigPath)) {\n    return tsConfigPath;\n  }\n  return null;\n}\n\nexport function collectMissingPackages(\n  projectRoot: string\n): {\n  missing: {\n    file: string;\n    pkg: string;\n    version?: string;\n  }[];\n  resolutions: Record<string, string>;\n} {\n  const resolutions: Record<string, string> = {};\n\n  const missingPackages = requiredPackages.filter(p => {\n    try {\n      resolutions[p.pkg] = resolveFrom(projectRoot, p.file);\n      return false;\n    } catch {\n      return true;\n    }\n  });\n\n  return { missing: missingPackages, resolutions };\n}\n"],"file":"resolveModules.js"}