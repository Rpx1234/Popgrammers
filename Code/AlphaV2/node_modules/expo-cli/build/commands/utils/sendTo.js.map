{"version":3,"sources":["../../../src/commands/utils/sendTo.ts"],"names":["askForSendToAsync","cachedValue","UserSettings","getAsync","Log","nested","recipient","message","initial","undefined","nonInteractiveHelp","mergeAsync","sendTo","getRecipient","sendUrlAsync","url","email","chalk","bold","spinner","start","result","Exp","sendAsync","succeed","e","fail"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEO,eAAeA,iBAAf,GAAoD;AACzD,QAAMC,WAAW,GAAG,MAAMC,oBAAaC,QAAb,CAAsB,QAAtB,EAAgC,IAAhC,CAA1B;;AACAC,iBAAIC,MAAJ,CAAW,8CAAX;;AACA,QAAMC,SAAS,GAAG,MAAM,iCACtB;AACEC,IAAAA,OAAO,EAAG,eADZ;AAEEC,IAAAA,OAAO,EAAEP,WAAF,aAAEA,WAAF,cAAEA,WAAF,GAAiBQ;AAF1B,GADsB,EAKtB;AAAEC,IAAAA,kBAAkB,EAAE;AAAtB,GALsB,CAAxB;AAOA,QAAMR,oBAAaS,UAAb,CAAwB;AAAEC,IAAAA,MAAM,EAAEN;AAAV,GAAxB,CAAN;AACA,SAAOA,SAAP;AACD;;AAEM,eAAeO,YAAf,CAA4BD,MAA5B,EAAwE;AAC7E,MAAIN,SAAwB,GAAG,EAA/B;;AACA,MAAIM,MAAJ,EAAY;AACV,QAAI,OAAOA,MAAP,KAAkB,SAAtB,EAAiC;AAC/BN,MAAAA,SAAS,GAAGM,MAAZ;AACD,KAFD,MAEO;AACLN,MAAAA,SAAS,GAAG,MAAMJ,oBAAaC,QAAb,CAAsB,QAAtB,EAAgC,IAAhC,CAAlB;AACD;;AAED,QAAI,CAACG,SAAL,EAAgB;AACd,aAAO,MAAMN,iBAAiB,EAA9B;AACD;AACF;;AAED,SAAOM,SAAP;AACD;;AACM,eAAeQ,YAAf,CAA4BC,GAA5B,EAAyCT,SAAzC,EAA4D;AACjE,QAAMU,KAAK,GAAGC,iBAAMC,IAAN,CAAWZ,SAAX,CAAd;;AACA,QAAMa,OAAO,GAAG,gBAAK,kBAAiBH,KAAM,EAA5B,EAA+BI,KAA/B,EAAhB;;AACA,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMC,WAAIC,SAAJ,CAAcjB,SAAd,EAAyBS,GAAzB,CAArB;AACAI,IAAAA,OAAO,CAACK,OAAR,CAAiB,eAAcR,KAAM,EAArC;AACA,WAAOK,MAAP;AACD,GAJD,CAIE,OAAOI,CAAP,EAAU;AACVN,IAAAA,OAAO,CAACO,IAAR,CAAc,mBAAkBV,KAAM,KAAIS,CAAC,CAAClB,OAAQ,EAApD;AACD;AACF","sourcesContent":["import chalk from 'chalk';\nimport { Exp, UserSettings } from 'xdl';\n\nimport Log from '../../log';\nimport { ora } from '../../utils/ora';\nimport { promptEmailAsync } from '../../utils/prompts';\n\nexport async function askForSendToAsync(): Promise<string> {\n  const cachedValue = await UserSettings.getAsync('sendTo', null);\n  Log.nested(\"Enter an email address and we'll send a link\");\n  const recipient = await promptEmailAsync(\n    {\n      message: `Email address`,\n      initial: cachedValue ?? undefined,\n    },\n    { nonInteractiveHelp: 'Please specify email address with --send-to.' }\n  );\n  await UserSettings.mergeAsync({ sendTo: recipient });\n  return recipient;\n}\n\nexport async function getRecipient(sendTo?: string | boolean): Promise<string> {\n  let recipient: string | null = '';\n  if (sendTo) {\n    if (typeof sendTo !== 'boolean') {\n      recipient = sendTo;\n    } else {\n      recipient = await UserSettings.getAsync('sendTo', null);\n    }\n\n    if (!recipient) {\n      return await askForSendToAsync();\n    }\n  }\n\n  return recipient;\n}\nexport async function sendUrlAsync(url: string, recipient: string) {\n  const email = chalk.bold(recipient);\n  const spinner = ora(`Sending URL to ${email}`).start();\n  try {\n    const result = await Exp.sendAsync(recipient, url);\n    spinner.succeed(`Sent URL to ${email}`);\n    return result;\n  } catch (e) {\n    spinner.fail(`Failed to email ${email}: ${e.message}`);\n  }\n}\n"],"file":"sendTo.js"}