{"version":3,"sources":["../../../src/commands/utils/getOrPromptApplicationId.ts"],"names":["noBundleIdMessage","noPackageMessage","getOrPromptForBundleIdentifier","projectRoot","exp","skipSDKVersionRequirement","currentBundleId","ios","bundleIdentifier","CommandError","recommendedBundleId","android","package","username","owner","UserManager","getCurrentUsernameAsync","possibleId","slug","Log","addNewLineIfNone","log","chalk","bold","dim","newLine","type","name","initial","message","validate","validateBundleId","nonInteractiveHelp","warning","nestedWarn","getOrPromptForPackage","currentPackage","recommendedPackage","split","join","packageName","validatePackage"],"mappings":"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","sourcesContent":["import { getConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport { UserManager } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport prompt, { confirmAsync } from '../../utils/prompts';\nimport { learnMore } from './TerminalLink';\nimport { attemptModification } from './modifyConfigAsync';\nimport {\n  getBundleIdWarningAsync,\n  getPackageNameWarningAsync,\n  validateBundleId,\n  validatePackage,\n} from './validateApplicationId';\n\nconst noBundleIdMessage = `Your project must have a \\`bundleIdentifier\\` set in the Expo config (app.json or app.config.js).\\nSee https://expo.fyi/bundle-identifier`;\nconst noPackageMessage = `Your project must have a \\`package\\` set in the Expo config (app.json or app.config.js).\\nSee https://expo.fyi/android-package`;\n\nexport async function getOrPromptForBundleIdentifier(projectRoot: string): Promise<string> {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  const currentBundleId = exp.ios?.bundleIdentifier;\n  if (currentBundleId) {\n    if (validateBundleId(currentBundleId)) {\n      return currentBundleId;\n    }\n    throw new CommandError(\n      `The ios.bundleIdentifier defined in your Expo config is not formatted properly. Only alphanumeric characters, '.', '-', and '_' are allowed, and each '.' must be followed by a letter.`\n    );\n  }\n\n  // Recommend a bundle ID based on the username and project slug.\n  let recommendedBundleId: string | undefined;\n  // Attempt to use the android package name first since it's convenient to have them aligned.\n  if (exp.android?.package && validateBundleId(exp.android?.package)) {\n    recommendedBundleId = exp.android?.package;\n  } else {\n    const username = exp.owner ?? (await UserManager.getCurrentUsernameAsync());\n    const possibleId = `com.${username}.${exp.slug}`;\n    if (username && validateBundleId(possibleId)) {\n      recommendedBundleId = possibleId;\n    }\n  }\n\n  Log.addNewLineIfNone();\n  Log.log(\n    `${chalk.bold(`üìù  iOS Bundle Identifier`)} ${chalk.dim(\n      learnMore('https://expo.fyi/bundle-identifier')\n    )}`\n  );\n  Log.newLine();\n  // Prompt the user for the bundle ID.\n  // Even if the project is using a dynamic config we can still\n  // prompt a better error message, recommend a default value, and help the user\n  // validate their custom bundle ID upfront.\n  const { bundleIdentifier } = await prompt(\n    {\n      type: 'text',\n      name: 'bundleIdentifier',\n      initial: recommendedBundleId,\n      // The Apple helps people know this isn't an EAS feature.\n      message: `What would you like your iOS bundle identifier to be?`,\n      validate: validateBundleId,\n    },\n    {\n      nonInteractiveHelp: noBundleIdMessage,\n    }\n  );\n\n  // Warn the user if the bundle ID is already in use.\n  const warning = await getBundleIdWarningAsync(bundleIdentifier);\n  if (warning) {\n    Log.newLine();\n    Log.nestedWarn(warning);\n    Log.newLine();\n    if (\n      !(await confirmAsync({\n        message: `Continue?`,\n        initial: true,\n      }))\n    ) {\n      Log.newLine();\n      return getOrPromptForBundleIdentifier(projectRoot);\n    }\n  }\n\n  // Apply the changes to the config.\n  await attemptModification(\n    projectRoot,\n    {\n      ios: { ...(exp.ios || {}), bundleIdentifier },\n    },\n    { ios: { bundleIdentifier } }\n  );\n\n  return bundleIdentifier;\n}\n\nexport async function getOrPromptForPackage(projectRoot: string): Promise<string> {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  const currentPackage = exp.android?.package;\n  if (currentPackage) {\n    if (validatePackage(currentPackage)) {\n      return currentPackage;\n    }\n    throw new CommandError(\n      `Invalid format of Android package name. Only alphanumeric characters, '.' and '_' are allowed, and each '.' must be followed by a letter.`\n    );\n  }\n\n  // Recommend a package name based on the username and project slug.\n  let recommendedPackage: string | undefined;\n  // Attempt to use the ios bundle id first since it's convenient to have them aligned.\n  if (exp.ios?.bundleIdentifier && validatePackage(exp.ios.bundleIdentifier)) {\n    recommendedPackage = exp.ios.bundleIdentifier;\n  } else {\n    const username = exp.owner ?? (await UserManager.getCurrentUsernameAsync());\n    // It's common to use dashes in your node project name, strip them from the suggested package name.\n    const possibleId = `com.${username}.${exp.slug}`.split('-').join('');\n    if (username && validatePackage(possibleId)) {\n      recommendedPackage = possibleId;\n    }\n  }\n\n  Log.addNewLineIfNone();\n  Log.log(\n    `${chalk.bold(`üìù  Android package`)} ${chalk.dim(\n      learnMore('https://expo.fyi/android-package')\n    )}`\n  );\n  Log.newLine();\n\n  // Prompt the user for the android package.\n  // Even if the project is using a dynamic config we can still\n  // prompt a better error message, recommend a default value, and help the user\n  // validate their custom android package upfront.\n  const { packageName } = await prompt(\n    {\n      type: 'text',\n      name: 'packageName',\n      initial: recommendedPackage,\n      message: `What would you like your Android package name to be?`,\n      validate: validatePackage,\n    },\n    {\n      nonInteractiveHelp: noPackageMessage,\n    }\n  );\n\n  // Warn the user if the package name is already in use.\n  const warning = await getPackageNameWarningAsync(packageName);\n  if (warning) {\n    Log.newLine();\n    Log.nestedWarn(warning);\n    Log.newLine();\n    if (\n      !(await confirmAsync({\n        message: `Continue?`,\n        initial: true,\n      }))\n    ) {\n      Log.newLine();\n      return getOrPromptForPackage(projectRoot);\n    }\n  }\n\n  // Apply the changes to the config.\n  await attemptModification(\n    projectRoot,\n    {\n      android: { ...(exp.android || {}), package: packageName },\n    },\n    {\n      android: { package: packageName },\n    }\n  );\n\n  return packageName;\n}\n"],"file":"getOrPromptApplicationId.js"}