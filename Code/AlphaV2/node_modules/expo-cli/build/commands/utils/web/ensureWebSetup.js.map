{"version":3,"sources":["../../../../src/commands/utils/web/ensureWebSetup.ts"],"names":["WEB_FEATURE_FLAG","hasChecked","disabledReason","ensureWebSupportSetupAsync","projectRoot","skipCache","Log","log","chalk","dim","result","shouldSetupWebSupportAsync","failureReason","ensureWebDependenciesInstalledAsync","exp","isWebPlatformExcluded","rootConfig","isWebExcluded","Array","isArray","expo","platforms","length","includes","projectConfig","skipSDKVersionRequirement","configName","bold","requiredPackages","file","pkg","skipPrompt","program","nonInteractive","missing","readableMissingPackages","map","p","join","isYarn","PackageManager","isUsingYarn","title","Prompts","pauseInteractions","confirm","message","wrapForTerminal","cyan","initial","resumeInteractions","packages","version","installPackagesAsync","installCommand","createInstallCommand","disableMessage","solution","reset","CommandError","process","stdout","columns","packageManager","createForProject","yarn","silent","isDebug","packagesStr","newLine","installingPackageStep","addAsync","e","fail","succeed"],"mappings":"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","sourcesContent":["import {\n  AppJSONConfig,\n  ExpoConfig,\n  getConfig,\n  getProjectConfigDescriptionWithPaths,\n  ProjectConfig,\n} from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\nimport chalk from 'chalk';\nimport program from 'commander';\nimport { boolish } from 'getenv';\nimport wrapAnsi from 'wrap-ansi';\nimport { Prompts } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport { logNewSection } from '../../../utils/ora';\nimport { confirmAsync } from '../../../utils/prompts';\nimport { getMissingPackagesAsync } from './getMissingPackages';\n\nconst WEB_FEATURE_FLAG = 'EXPO_NO_WEB_SETUP';\n\n// Only check once per run.\nlet hasChecked = false;\nlet disabledReason = '';\n\nexport async function ensureWebSupportSetupAsync(\n  projectRoot: string,\n  { skipCache = false }: { skipCache?: boolean } = {}\n): Promise<boolean> {\n  if (!skipCache && hasChecked) {\n    if (disabledReason) {\n      Log.log(chalk.dim(disabledReason));\n    }\n    return false;\n  }\n  hasChecked = true;\n\n  const result = await shouldSetupWebSupportAsync(projectRoot);\n\n  if ('failureReason' in result) {\n    disabledReason = result.failureReason;\n    return ensureWebSupportSetupAsync(projectRoot);\n  }\n\n  // Ensure web packages are installed\n  await ensureWebDependenciesInstalledAsync(projectRoot, { exp: result.exp });\n\n  return true;\n}\n\nexport function isWebPlatformExcluded(rootConfig: AppJSONConfig): boolean {\n  // Detect if the 'web' string is purposefully missing from the platforms array.\n  const isWebExcluded =\n    Array.isArray(rootConfig.expo?.platforms) &&\n    !!rootConfig.expo?.platforms.length &&\n    !rootConfig.expo?.platforms.includes('web');\n  return isWebExcluded;\n}\n\nexport async function shouldSetupWebSupportAsync(\n  projectRoot: string\n): Promise<{ failureReason: string } | ProjectConfig> {\n  if (boolish(WEB_FEATURE_FLAG, false)) {\n    return { failureReason: '\\u203A Skipping web setup: EXPO_NO_WEB_SETUP is enabled.' };\n  }\n\n  const projectConfig = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  // Detect if the 'web' string is purposefully missing from the platforms array.\n  if (isWebPlatformExcluded(projectConfig.rootConfig)) {\n    // Get exact config description with paths.\n    const configName = getProjectConfigDescriptionWithPaths(projectRoot, projectConfig);\n    return {\n      failureReason: `\\u203A Skipping web setup: ${chalk.bold`\"web\"`} is not included in the project ${configName} ${chalk.bold`\"platforms\"`} array.`,\n    };\n  }\n\n  return projectConfig;\n}\n\nconst requiredPackages = [\n  // use react-native-web/package.json to skip node module cache issues when the user installs\n  // the package and attempts to resolve the module in the same process.\n  { file: 'react-native-web/package.json', pkg: 'react-native-web' },\n  { file: 'react-dom/package.json', pkg: 'react-dom' },\n];\n\nasync function ensureWebDependenciesInstalledAsync(\n  projectRoot: string,\n  {\n    exp = getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp,\n    // Don't prompt in CI\n    skipPrompt = program.nonInteractive,\n  }: {\n    exp?: ExpoConfig;\n    skipPrompt?: boolean;\n  } = {}\n): Promise<boolean> {\n  const { missing } = await getMissingPackagesAsync(projectRoot, { exp, requiredPackages });\n  if (!missing.length) {\n    return true;\n  }\n\n  // Prompt to install or bail out...\n  const readableMissingPackages = missing.map(p => p.pkg).join(', ');\n\n  const isYarn = PackageManager.isUsingYarn(projectRoot);\n\n  let title = `It looks like you're trying to use web support but don't have the required dependencies installed.`;\n\n  if (skipPrompt) {\n    title += '\\n\\n';\n  } else {\n    Prompts.pauseInteractions();\n    let confirm: boolean;\n    try {\n      confirm = await confirmAsync({\n        message: wrapForTerminal(\n          title + ` Would you like to install ${chalk.cyan(readableMissingPackages)}?`\n        ),\n        initial: true,\n      });\n    } finally {\n      Prompts.resumeInteractions();\n    }\n\n    if (confirm) {\n      // Format with version if available.\n      const packages = missing.map(({ pkg, version }) =>\n        version ? [pkg, version].join('@') : pkg\n      );\n      // Install packages with versions\n      await installPackagesAsync(projectRoot, {\n        isYarn,\n        packages,\n      });\n      // Try again but skip prompting twice, simply fail if the packages didn't install correctly.\n      return await ensureWebDependenciesInstalledAsync(projectRoot, {\n        skipPrompt: true,\n      });\n    }\n\n    // Reset the title so it doesn't print twice in interactive mode.\n    title = '';\n  }\n\n  const installCommand = createInstallCommand({ isYarn, packages: missing });\n\n  const disableMessage = `If you're not using web, please remove the ${chalk.bold(\n    '\"web\"'\n  )} string from the platforms array in the project Expo config.`;\n\n  const solution = `Please install ${chalk.bold(\n    readableMissingPackages\n  )} by running:\\n\\n  ${chalk.reset.bold(installCommand)}\\n\\n`;\n\n  // Reset the cached check so we can re-run the check if the user re-runs the command.\n  hasChecked = false;\n  // This prevents users from starting a misconfigured JS or TS project by default.\n  throw new CommandError(wrapForTerminal(title + solution + disableMessage + '\\n'));\n}\n\n// Wrap long messages to fit smaller terminals.\nfunction wrapForTerminal(message: string): string {\n  return wrapAnsi(message, process.stdout.columns || 80);\n}\n\nexport function createInstallCommand({\n  isYarn,\n  packages,\n}: {\n  isYarn: boolean;\n  packages: {\n    file: string;\n    pkg: string;\n    version?: string | undefined;\n  }[];\n}) {\n  return (\n    (isYarn ? 'yarn add' : 'npm install') +\n    ' ' +\n    packages\n      .map(({ pkg, version }) => {\n        if (version) {\n          return [pkg, version].join('@');\n        }\n        return pkg;\n      })\n      .join(' ')\n  );\n}\n\nasync function installPackagesAsync(\n  projectRoot: string,\n  { isYarn, packages }: { isYarn: boolean; packages: string[] }\n) {\n  const packageManager = PackageManager.createForProject(projectRoot, {\n    yarn: isYarn,\n    log: Log.log,\n    silent: !Log.isDebug,\n  });\n\n  const packagesStr = chalk.bold(packages.join(', '));\n  Log.newLine();\n  const installingPackageStep = logNewSection(`Installing ${packagesStr}`);\n  try {\n    await packageManager.addAsync(...packages);\n  } catch (e: any) {\n    installingPackageStep.fail(`Failed to install ${packagesStr} with error: ${e.message}`);\n    throw e;\n  }\n  installingPackageStep.succeed(`Installed ${packagesStr}`);\n}\n"],"file":"ensureWebSetup.js"}