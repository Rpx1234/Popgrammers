{"version":3,"sources":["../../../src/commands/start/parseStartOptions.ts"],"names":["hasBooleanArg","rawArgs","argName","includes","getBooleanArg","setBooleanArg","fallback","warnUsingDeprecatedArgs","deprecatedArgs","arg","message","Log","warn","chalk","bold","normalizeOptionsAsync","projectRoot","options","parent","opts","parseRawArguments","webOnly","webpackPort","defaultPort","port","fallbackPort","WebpackEnvironment","DEFAULT_PORT","AbortCommandError","metroPort","devClient","cacheOptionsAsync","nonInteractive","dev","minify","https","android","ios","web","localhost","lan","tunnel","ProjectSettings","setAsync","scheme","parseStartOptions","exp","startOpts","platforms","clear","reset","maxWorkers","forceManifestType","undefined","easUpdatesUrlRegex","updatesUrl","updates","url","isEasUpdatesUrl","test","target","debug","Versions","gteSdkVersion","isRemoteReloadingEnabled","Webpack","isTargetingNative","isWebSocketsEnabled"],"mappings":";;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AA0BA,SAASA,aAAT,CAAuBC,OAAvB,EAA0CC,OAA1C,EAAoE;AAClE,SAAOD,OAAO,CAACE,QAAR,CAAiB,OAAOD,OAAxB,KAAoCD,OAAO,CAACE,QAAR,CAAiB,UAAUD,OAA3B,CAA3C;AACD;;AAED,SAASE,aAAT,CAAuBH,OAAvB,EAA0CC,OAA1C,EAAoE;AAClE,MAAID,OAAO,CAACE,QAAR,CAAiB,OAAOD,OAAxB,CAAJ,EAAsC;AACpC,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF;;AAEM,SAASG,aAAT,CACLH,OADK,EAELD,OAFK,EAGLK,QAHK,EAIgB;AACrB,MAAIL,OAAO,CAACE,QAAR,CAAkB,KAAID,OAAQ,EAA9B,CAAJ,EAAsC;AACpC,WAAO,IAAP;AACD,GAFD,MAEO,IAAID,OAAO,CAACE,QAAR,CAAkB,QAAOD,OAAQ,EAAjC,CAAJ,EAAyC;AAC9C,WAAO,KAAP;AACD,GAFM,MAEA;AACL,WAAOI,QAAP;AACD;AACF,C,CAED;;;AACA,SAASC,uBAAT,CAAiCN,OAAjC,EAAoD;AAClD,QAAMO,cAAc,GAAG,CACrB,CAAC,YAAD,EAAe,+BAAf,CADqB,EAErB,CAAC,aAAD,EAAgB,gCAAhB,CAFqB,EAGrB,CAAC,OAAD,EAAU,4BAAV,CAHqB,CAAvB;;AAMA,OAAK,MAAM,CAACC,GAAD,EAAMC,OAAN,CAAX,IAA6BF,cAA7B,EAA6C;AAC3C,QAAIP,OAAO,CAACE,QAAR,CAAiBM,GAAjB,CAAJ,EAA2B;AACzBE,qBAAIC,IAAJ,CAAU,cAAaC,iBAAMC,IAAN,CAAWL,GAAX,CAAgB,wBAAuBC,OAAQ,EAAtE;AACD;AACF;AACF,C,CAED;AACA;AACA;;;AACO,eAAeK,qBAAf,CACLC,WADK,EAELC,OAFK,EAGuB;AAAA;;AAC5B,QAAMhB,OAAO,GAAG,oBAAAgB,OAAO,CAACC,MAAR,oEAAgBjB,OAAhB,KAA2B,EAA3C;AACAM,EAAAA,uBAAuB,CAACN,OAAD,CAAvB;AACA,QAAMkB,IAAI,GAAGC,iBAAiB,CAACH,OAAD,EAAUhB,OAAV,CAA9B;;AAEA,MAAIgB,OAAO,CAACI,OAAZ,EAAqB;AACnB,UAAMC,WAAW,GAAG,MAAM,0CAAiBN,WAAjB,EAA8B;AACtDO,MAAAA,WAAW,EAAEN,OAAO,CAACO,IADiC;AAEtDC,MAAAA,YAAY,EAAEC,kBAAkB,GAACC;AAFqB,KAA9B,CAA1B;;AAIA,QAAI,CAACL,WAAL,EAAkB;AAChB,YAAM,KAAIM,iCAAJ,GAAN;AACD;;AACDT,IAAAA,IAAI,CAACG,WAAL,GAAmBA,WAAnB;AACD,GATD,MASO;AACL,UAAMO,SAAS,GAAG,MAAM,0CAAiBb,WAAjB,EAA8B;AACpDO,MAAAA,WAAW,EAAEN,OAAO,CAACO,IAD+B;AAEpDC,MAAAA,YAAY,EAAER,OAAO,CAACa,SAAR,GAAoB,IAApB,GAA2B;AAFW,KAA9B,CAAxB;;AAIA,QAAI,CAACD,SAAL,EAAgB;AACd,YAAM,KAAID,iCAAJ,GAAN;AACD;;AACDT,IAAAA,IAAI,CAACU,SAAL,GAAiBA,SAAjB;AACD,GAvB2B,CAyB5B;;;AACA,QAAME,iBAAiB,CAACf,WAAD,EAAcG,IAAd,CAAvB;AAEA,SAAOA,IAAP;AACD,C,CAED;AACA;AACA;;;AACO,SAASC,iBAAT,CAA2BH,OAA3B,EAAqDhB,OAArD,EAA2F;AAAA;;AAChG,QAAMkB,IAAuB,GAAG,EAC9B,GAAGF,OAD2B;AAClB;AACZI,IAAAA,OAAO,EAAE,CAAC,CAACJ,OAAO,CAACI,OAFW;AAEF;AAC5BW,IAAAA,cAAc,sBAAEf,OAAO,CAACC,MAAV,qDAAE,iBAAgBc,cAHF;AAI9B;AACA;AACAC,IAAAA,GAAG,EAAE5B,aAAa,CAAC,KAAD,EAAQJ,OAAR,EAAiB,IAAjB,CANY;AAO9BiC,IAAAA,MAAM,EAAE7B,aAAa,CAAC,QAAD,EAAWJ,OAAX,EAAoB,KAApB,CAPS;AAQ9BkC,IAAAA,KAAK,EAAE9B,aAAa,CAAC,OAAD,EAAUJ,OAAV,EAAmB,KAAnB;AARU,GAAhC;;AAWA,MAAID,aAAa,CAACC,OAAD,EAAU,SAAV,CAAjB,EAAuC;AACrCkB,IAAAA,IAAI,CAACiB,OAAL,GAAehC,aAAa,CAACH,OAAD,EAAU,SAAV,CAA5B;AACD;;AAED,MAAID,aAAa,CAACC,OAAD,EAAU,KAAV,CAAjB,EAAmC;AACjCkB,IAAAA,IAAI,CAACkB,GAAL,GAAWjC,aAAa,CAACH,OAAD,EAAU,KAAV,CAAxB;AACD;;AAED,MAAID,aAAa,CAACC,OAAD,EAAU,KAAV,CAAjB,EAAmC;AACjCkB,IAAAA,IAAI,CAACmB,GAAL,GAAWlC,aAAa,CAACH,OAAD,EAAU,KAAV,CAAxB;AACD;;AAED,MAAID,aAAa,CAACC,OAAD,EAAU,WAAV,CAAjB,EAAyC;AACvCkB,IAAAA,IAAI,CAACoB,SAAL,GAAiBnC,aAAa,CAACH,OAAD,EAAU,WAAV,CAA9B;AACD;;AAED,MAAID,aAAa,CAACC,OAAD,EAAU,KAAV,CAAjB,EAAmC;AACjCkB,IAAAA,IAAI,CAACqB,GAAL,GAAWpC,aAAa,CAACH,OAAD,EAAU,KAAV,CAAxB;AACD;;AAED,MAAID,aAAa,CAACC,OAAD,EAAU,QAAV,CAAjB,EAAsC;AACpCkB,IAAAA,IAAI,CAACsB,MAAL,GAAcrC,aAAa,CAACH,OAAD,EAAU,QAAV,CAA3B;AACD;;AAED,SAAOkB,IAAP;AACD;;AAED,eAAeY,iBAAf,CAAiCf,WAAjC,EAAsDC,OAAtD,EAAiG;AAC/F,QAAMyB,uBAAgBC,QAAhB,CAAyB3B,WAAzB,EAAsC;AAC1Cc,IAAAA,SAAS,EAAEb,OAAO,CAACa,SADuB;AAE1Cc,IAAAA,MAAM,EAAE3B,OAAO,CAAC2B,MAF0B;AAG1CX,IAAAA,GAAG,EAAEhB,OAAO,CAACgB,GAH6B;AAI1CC,IAAAA,MAAM,EAAEjB,OAAO,CAACiB,MAJ0B;AAK1CC,IAAAA,KAAK,EAAElB,OAAO,CAACkB;AAL2B,GAAtC,CAAN;AAOD;;AAEM,SAASU,iBAAT,CACL5B,OADK,EAEL6B,GAFK,EAGiB;AAAA;;AACtB,QAAMC,SAA+B,GAAG;AACtClB,IAAAA,SAAS,EAAEZ,OAAO,CAACY,SADmB;AAEtCP,IAAAA,WAAW,EAAEL,OAAO,CAACK,WAFiB;AAGtC0B,IAAAA,SAAS,oBAAEF,GAAG,CAACE,SAAN,2DAAmB,CAAC,KAAD,EAAQ,SAAR,EAAmB,KAAnB;AAHU,GAAxC;;AAMA,MAAI/B,OAAO,CAACgC,KAAZ,EAAmB;AACjBF,IAAAA,SAAS,CAACG,KAAV,GAAkB,IAAlB;AACD;;AAED,MAAIjC,OAAO,CAACe,cAAZ,EAA4B;AAC1Be,IAAAA,SAAS,CAACf,cAAV,GAA2B,IAA3B;AACD;;AAED,MAAIf,OAAO,CAACI,OAAZ,EAAqB;AACnB0B,IAAAA,SAAS,CAAC1B,OAAV,GAAoB,IAApB;AACD;;AAED,MAAIJ,OAAO,CAACkC,UAAZ,EAAwB;AACtBJ,IAAAA,SAAS,CAACI,UAAV,GAAuBlC,OAAO,CAACkC,UAA/B;AACD;;AAED,MAAIlC,OAAO,CAACa,SAAZ,EAAuB;AACrBiB,IAAAA,SAAS,CAACjB,SAAV,GAAsB,IAAtB;AACD;;AAED,MAAIb,OAAO,CAACmC,iBAAZ,EAA+B;AAC7BL,IAAAA,SAAS,CAACK,iBAAV,GACEnC,OAAO,CAACmC,iBAAR,KAA8B,SAA9B,GACI,SADJ,GAEInC,OAAO,CAACmC,iBAAR,KAA8B,cAA9B,GACA,cADA,GAEAC,SALN;AAMD,GAPD,MAOO;AAAA;;AACL,UAAMC,kBAAkB,GAAG,oCAA3B;AACA,UAAMC,UAAU,mBAAGT,GAAG,CAACU,OAAP,iDAAG,aAAaC,GAAhC;AACA,UAAMC,eAAe,GAAGH,UAAU,IAAID,kBAAkB,CAACK,IAAnB,CAAwBJ,UAAxB,CAAtC;AAEAR,IAAAA,SAAS,CAACK,iBAAV,GAA8BM,eAAe,GAAG,cAAH,GAAoB,SAAjE;AACD;;AAED,MAAI,sCAAuBZ,GAAvB,CAAJ,EAAiC;AAC/B;AACA;AACAC,IAAAA,SAAS,CAACa,MAAV,GAAmB3C,OAAO,CAACa,SAAR,GAAoB,MAApB,GAA6B,SAAhD;;AACAnB,mBAAIkD,KAAJ,CAAU,gBAAV,EAA4Bd,SAAS,CAACa,MAAtC;AACD,GA/CqB,CAiDtB;;;AACA,MAAIE,gBAASC,aAAT,CAAuBjB,GAAvB,EAA4B,QAA5B,CAAJ,EAA2C;AACzCC,IAAAA,SAAS,CAACiB,wBAAV,GAAqC,IAArC;;AACA,QAAI,CAACjB,SAAS,CAAC1B,OAAX,IAAsB4C,eAAQC,iBAAR,EAA1B,EAAuD;AACrDnB,MAAAA,SAAS,CAACoB,mBAAV,GAAgC,IAAhC;AACD;AACF;;AAED,SAAOpB,SAAP;AACD","sourcesContent":["import { ExpoConfig, isLegacyImportsEnabled } from '@expo/config';\nimport chalk from 'chalk';\nimport { Project, ProjectSettings, Versions, Webpack } from 'xdl';\nimport * as WebpackEnvironment from 'xdl/build/webpack-utils/WebpackEnvironment';\n\nimport { AbortCommandError } from '../../CommandError';\nimport Log from '../../log';\nimport { resolvePortAsync } from '../run/utils/resolvePortAsync';\nimport { URLOptions } from '../utils/urlOpts';\n\nexport type NormalizedOptions = URLOptions & {\n  webOnly?: boolean;\n  dev?: boolean;\n  minify?: boolean;\n  https?: boolean;\n  nonInteractive?: boolean;\n  clear?: boolean;\n  maxWorkers?: number;\n  sendTo?: string;\n  host?: string;\n  lan?: boolean;\n  localhost?: boolean;\n  tunnel?: boolean;\n  metroPort?: number;\n  webpackPort?: number;\n  forceManifestType?: string;\n};\n\nexport type RawStartOptions = NormalizedOptions & {\n  port?: number;\n  parent?: { nonInteractive: boolean; rawArgs: string[] };\n};\n\nfunction hasBooleanArg(rawArgs: string[], argName: string): boolean {\n  return rawArgs.includes('--' + argName) || rawArgs.includes('--no-' + argName);\n}\n\nfunction getBooleanArg(rawArgs: string[], argName: string): boolean {\n  if (rawArgs.includes('--' + argName)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function setBooleanArg(\n  argName: string,\n  rawArgs: string[],\n  fallback?: boolean\n): boolean | undefined {\n  if (rawArgs.includes(`--${argName}`)) {\n    return true;\n  } else if (rawArgs.includes(`--no-${argName}`)) {\n    return false;\n  } else {\n    return fallback;\n  }\n}\n\n// TODO: Deprecate these features sometime around the versioned migration.\nfunction warnUsingDeprecatedArgs(rawArgs: string[]) {\n  const deprecatedArgs = [\n    ['--no-https', 'Https is disabled by default.'],\n    ['--no-minify', 'Minify is disabled by default.'],\n    ['--dev', 'Dev is enabled by default.'],\n  ];\n\n  for (const [arg, message] of deprecatedArgs) {\n    if (rawArgs.includes(arg)) {\n      Log.warn(`\\u203A The ${chalk.bold(arg)} flag is deprecated. ${message}`);\n    }\n  }\n}\n\n// The main purpose of this function is to take existing options object and\n// support boolean args with as defined in the hasBooleanArg and getBooleanArg\n// functions.\nexport async function normalizeOptionsAsync(\n  projectRoot: string,\n  options: RawStartOptions\n): Promise<NormalizedOptions> {\n  const rawArgs = options.parent?.rawArgs || [];\n  warnUsingDeprecatedArgs(rawArgs);\n  const opts = parseRawArguments(options, rawArgs);\n\n  if (options.webOnly) {\n    const webpackPort = await resolvePortAsync(projectRoot, {\n      defaultPort: options.port,\n      fallbackPort: WebpackEnvironment.DEFAULT_PORT,\n    });\n    if (!webpackPort) {\n      throw new AbortCommandError();\n    }\n    opts.webpackPort = webpackPort;\n  } else {\n    const metroPort = await resolvePortAsync(projectRoot, {\n      defaultPort: options.port,\n      fallbackPort: options.devClient ? 8081 : 19000,\n    });\n    if (!metroPort) {\n      throw new AbortCommandError();\n    }\n    opts.metroPort = metroPort;\n  }\n\n  // Side-effect\n  await cacheOptionsAsync(projectRoot, opts);\n\n  return opts;\n}\n\n// The main purpose of this function is to take existing options object and\n// support boolean args with as defined in the hasBooleanArg and getBooleanArg\n// functions.\nexport function parseRawArguments(options: RawStartOptions, rawArgs: string[]): NormalizedOptions {\n  const opts: NormalizedOptions = {\n    ...options, // This is necessary to ensure we don't drop any options\n    webOnly: !!options.webOnly, // This is only ever true in the start:web command\n    nonInteractive: options.parent?.nonInteractive,\n    // setBooleanArg is used to flip the default commander logic which automatically sets a value to `true` if the inverse option isn't provided.\n    // ex: `dev == true` if `--no-dev` is a possible flag, but `--no-dev` was not provided in the command.\n    dev: setBooleanArg('dev', rawArgs, true),\n    minify: setBooleanArg('minify', rawArgs, false),\n    https: setBooleanArg('https', rawArgs, false),\n  };\n\n  if (hasBooleanArg(rawArgs, 'android')) {\n    opts.android = getBooleanArg(rawArgs, 'android');\n  }\n\n  if (hasBooleanArg(rawArgs, 'ios')) {\n    opts.ios = getBooleanArg(rawArgs, 'ios');\n  }\n\n  if (hasBooleanArg(rawArgs, 'web')) {\n    opts.web = getBooleanArg(rawArgs, 'web');\n  }\n\n  if (hasBooleanArg(rawArgs, 'localhost')) {\n    opts.localhost = getBooleanArg(rawArgs, 'localhost');\n  }\n\n  if (hasBooleanArg(rawArgs, 'lan')) {\n    opts.lan = getBooleanArg(rawArgs, 'lan');\n  }\n\n  if (hasBooleanArg(rawArgs, 'tunnel')) {\n    opts.tunnel = getBooleanArg(rawArgs, 'tunnel');\n  }\n\n  return opts;\n}\n\nasync function cacheOptionsAsync(projectRoot: string, options: NormalizedOptions): Promise<void> {\n  await ProjectSettings.setAsync(projectRoot, {\n    devClient: options.devClient,\n    scheme: options.scheme,\n    dev: options.dev,\n    minify: options.minify,\n    https: options.https,\n  });\n}\n\nexport function parseStartOptions(\n  options: NormalizedOptions,\n  exp: ExpoConfig\n): Project.StartOptions {\n  const startOpts: Project.StartOptions = {\n    metroPort: options.metroPort,\n    webpackPort: options.webpackPort,\n    platforms: exp.platforms ?? ['ios', 'android', 'web'],\n  };\n\n  if (options.clear) {\n    startOpts.reset = true;\n  }\n\n  if (options.nonInteractive) {\n    startOpts.nonInteractive = true;\n  }\n\n  if (options.webOnly) {\n    startOpts.webOnly = true;\n  }\n\n  if (options.maxWorkers) {\n    startOpts.maxWorkers = options.maxWorkers;\n  }\n\n  if (options.devClient) {\n    startOpts.devClient = true;\n  }\n\n  if (options.forceManifestType) {\n    startOpts.forceManifestType =\n      options.forceManifestType === 'classic'\n        ? 'classic'\n        : options.forceManifestType === 'expo-updates'\n        ? 'expo-updates'\n        : undefined;\n  } else {\n    const easUpdatesUrlRegex = /^https:\\/\\/(staging-)?u\\.expo\\.dev/;\n    const updatesUrl = exp.updates?.url;\n    const isEasUpdatesUrl = updatesUrl && easUpdatesUrlRegex.test(updatesUrl);\n\n    startOpts.forceManifestType = isEasUpdatesUrl ? 'expo-updates' : 'classic';\n  }\n\n  if (isLegacyImportsEnabled(exp)) {\n    // For `expo start`, the default target is 'managed', for both managed *and* bare apps.\n    // See: https://docs.expo.dev/bare/using-expo-client\n    startOpts.target = options.devClient ? 'bare' : 'managed';\n    Log.debug('Using target: ', startOpts.target);\n  }\n\n  // The SDK 41 client has web socket support.\n  if (Versions.gteSdkVersion(exp, '41.0.0')) {\n    startOpts.isRemoteReloadingEnabled = true;\n    if (!startOpts.webOnly || Webpack.isTargetingNative()) {\n      startOpts.isWebSocketsEnabled = true;\n    }\n  }\n\n  return startOpts;\n}\n"],"file":"parseStartOptions.js"}