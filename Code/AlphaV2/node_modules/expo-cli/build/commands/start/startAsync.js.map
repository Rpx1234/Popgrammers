{"version":3,"sources":["../../../src/commands/start/startAsync.ts"],"names":["actionAsync","projectRoot","options","Log","log","chalk","gray","devClient","hasExpoInstalled","resolveFrom","silent","ConfigError","exp","pkg","getConfig","skipSDKVersionRequirement","webOnly","web","track","urlOpts","optsAsync","rootPath","path","resolve","tryOpeningDevToolsAsync","Versions","gteSdkVersion","ensureTypeScriptSetupAsync","validateDependenciesVersionsAsync","assertProjectHasExpoExtensionFilesAsync","startOptions","parseStartOptions","LoadingPageHandler","setOnDeepLink","isDevClient","platform","StatusEventEmitter","once","UnifiedAnalytics","logEvent","status","Project","startAsync","url","UrlUtils","constructDeepLinkAsync","catch","error","code","sendTo","recipient","getRecipient","sendUrlAsync","warn","handleMobileOptsAsync","isTerminalUIEnabled","nonInteractive","isDetached","TerminalUI","newLine","printQRCode","underline","nested","dim","flush"],"mappings":"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","sourcesContent":["import { ConfigError, ExpoConfig, getConfig, isLegacyImportsEnabled } from '@expo/config';\nimport chalk from 'chalk';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport { LoadingPageHandler, Project, UnifiedAnalytics, UrlUtils, Versions } from 'xdl';\n\nimport StatusEventEmitter from '../../analytics/StatusEventEmitter';\nimport getDevClientProperties from '../../analytics/getDevClientProperties';\nimport Log from '../../log';\nimport { assertProjectHasExpoExtensionFilesAsync } from '../utils/deprecatedExtensionWarnings';\nimport { profileMethod } from '../utils/profileMethod';\nimport * as sendTo from '../utils/sendTo';\nimport { ensureTypeScriptSetupAsync } from '../utils/typescript/ensureTypeScriptSetup';\nimport urlOpts from '../utils/urlOpts';\nimport { validateDependenciesVersionsAsync } from '../utils/validateDependenciesVersions';\nimport { ensureWebSupportSetupAsync } from '../utils/web/ensureWebSetup';\nimport * as TerminalUI from './TerminalUI';\nimport { installCustomExitHook, installExitHooks } from './installExitHooks';\nimport { tryOpeningDevToolsAsync } from './openDevTools';\nimport { NormalizedOptions, parseStartOptions } from './parseStartOptions';\n\nexport async function actionAsync(projectRoot: string, options: NormalizedOptions): Promise<void> {\n  Log.log(chalk.gray(`Starting project at ${projectRoot}`));\n\n  // Add clean up hooks\n  installExitHooks(projectRoot);\n\n  // Only validate expo in Expo Go contexts\n  if (!options.devClient) {\n    // Find expo binary in project/workspace node_modules\n    const hasExpoInstalled = resolveFrom.silent(projectRoot, 'expo');\n    if (!hasExpoInstalled) {\n      throw new ConfigError(\n        `Unable to find expo in this project - have you run yarn / npm install yet?`,\n        'MODULE_NOT_FOUND'\n      );\n    }\n  }\n\n  const { exp, pkg } = profileMethod(getConfig)(projectRoot, {\n    skipSDKVersionRequirement: options.webOnly || options.devClient,\n  });\n\n  if (options.web || options.webOnly) {\n    await ensureWebSupportSetupAsync(projectRoot);\n  }\n\n  if (options.devClient) {\n    track(projectRoot, exp);\n  }\n\n  // Assert various random things\n  // TODO: split up this method\n  await profileMethod(urlOpts.optsAsync)(projectRoot, options);\n\n  // TODO: This is useless on mac, check if useless on win32\n  const rootPath = path.resolve(projectRoot);\n\n  // Optionally open the developer tools UI.\n  await profileMethod(tryOpeningDevToolsAsync)(rootPath, {\n    exp,\n    options,\n  });\n\n  if (Versions.gteSdkVersion(exp, '34.0.0')) {\n    await profileMethod(ensureTypeScriptSetupAsync)(projectRoot);\n  }\n\n  if (!options.webOnly) {\n    // TODO: only validate dependencies if starting in managed workflow\n    await profileMethod(validateDependenciesVersionsAsync)(projectRoot, exp, pkg);\n    // Warn about expo extensions.\n    if (!isLegacyImportsEnabled(exp)) {\n      // Adds a few seconds in basic projects so we should\n      // drop this in favor of the upgrade version as soon as possible.\n      await profileMethod(assertProjectHasExpoExtensionFilesAsync)(projectRoot);\n    }\n  }\n\n  const startOptions = profileMethod(parseStartOptions)(options, exp);\n  LoadingPageHandler.setOnDeepLink(\n    async (projectRoot: string, isDevClient: boolean, platform: string | null) => {\n      if (!isDevClient) {\n        return;\n      }\n\n      const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n      StatusEventEmitter.once('deviceLogReceive', () => {\n        // Send the 'ready' event once the app is running in a device.\n        UnifiedAnalytics.logEvent('dev client start command', {\n          status: 'ready',\n          platform,\n          ...getDevClientProperties(projectRoot, exp),\n        });\n      });\n\n      UnifiedAnalytics.logEvent('dev client start command', {\n        status: 'started',\n        platform,\n        ...getDevClientProperties(projectRoot, exp),\n      });\n    }\n  );\n  await profileMethod(Project.startAsync)(rootPath, { ...startOptions, exp });\n\n  // Send to option...\n  const url = await profileMethod(\n    UrlUtils.constructDeepLinkAsync,\n    'UrlUtils.constructDeepLinkAsync'\n  )(projectRoot).catch(error => {\n    // TODO: Maybe there's a better way to do this\n    if (!options.devClient || error.code !== 'NO_DEV_CLIENT_SCHEME') {\n      throw error;\n    }\n    return null;\n  });\n\n  if (options.sendTo) {\n    if (url) {\n      const recipient = await profileMethod(sendTo.getRecipient)(options.sendTo);\n      if (recipient) {\n        await sendTo.sendUrlAsync(url, recipient);\n      }\n    } else {\n      Log.warn('Cannot send URL because the linking URI cannot be resolved');\n    }\n  }\n\n  // Open project on devices.\n  await profileMethod(urlOpts.handleMobileOptsAsync)(projectRoot, options);\n\n  // Present the Terminal UI.\n  const isTerminalUIEnabled = !options.nonInteractive && !exp.isDetached;\n\n  if (isTerminalUIEnabled) {\n    await profileMethod(TerminalUI.startAsync, 'TerminalUI.startAsync')(projectRoot, startOptions);\n  } else if (url) {\n    if (!exp.isDetached) {\n      Log.newLine();\n      urlOpts.printQRCode(url);\n    }\n    Log.log(`Your native app is running at ${chalk.underline(url)}`);\n  }\n\n  // Final note about closing the server.\n  if (!options.webOnly) {\n    Log.nested(`Logs for your project will appear below. ${chalk.dim(`Press Ctrl+C to exit.`)}`);\n  } else {\n    Log.nested(\n      `\\nLogs for your project will appear in the browser console. ${chalk.dim(\n        `Press Ctrl+C to exit.`\n      )}`\n    );\n  }\n  if (options.devClient) {\n    UnifiedAnalytics.logEvent('dev client start command', {\n      status: 'ready',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  }\n}\n\nfunction track(projectRoot: string, exp: ExpoConfig) {\n  UnifiedAnalytics.logEvent('dev client start command', {\n    status: 'started',\n    ...getDevClientProperties(projectRoot, exp),\n  });\n  installCustomExitHook(() => {\n    UnifiedAnalytics.logEvent('dev client start command', {\n      status: 'finished',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n    UnifiedAnalytics.flush();\n  });\n}\n"],"file":"startAsync.js"}