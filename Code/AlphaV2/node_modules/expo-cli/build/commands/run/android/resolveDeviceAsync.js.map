{"version":3,"sources":["../../../../src/commands/run/android/resolveDeviceAsync.ts"],"names":["ensureEmulatorOpenAsync","device","devices","Android","getAllAvailableDevicesAsync","bootedDevice","attemptToStartEmulatorOrAssertAsync","CommandError","resolveDeviceAsync","catch","promptForDeviceAsync","Log","log","chalk","dim","name","searchValue","toLowerCase","resolved","find"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,eAAeA,uBAAf,CAAuCC,MAAvC,EAAyF;AACvF,MAAI,CAACA,MAAL,EAAa;AACX,UAAMC,OAAO,GAAG,MAAMC,eAAQC,2BAAR,EAAtB;AACAH,IAAAA,MAAM,GAAGC,OAAO,CAAC,CAAD,CAAhB;AACD;;AAED,QAAMG,YAAY,GAAG,MAAMF,eAAQG,mCAAR,CAA4CL,MAA5C,CAA3B;;AACA,MAAI,CAACI,YAAL,EAAmB;AACjB;AACA,UAAM,KAAIE,uBAAJ,EAAiB,cAAjB,CAAN;AACD;;AACD,SAAOF,YAAP;AACD;;AAEM,eAAeG,kBAAf,CAAkCP,MAAlC,EAAsF;AAC3F,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,MAAMD,uBAAuB,EAApC;AACD;;AAED,QAAME,OAAyB,GAAG,MAAMC,eAAQC,2BAAR,GAAsCK,KAAtC,CAA4C,MAAM,EAAlD,CAAxC;;AAEA,MAAIR,MAAM,KAAK,IAAf,EAAqB;AACnB;AACA,UAAMA,MAAM,GAAG,MAAME,eAAQO,oBAAR,CAA6BR,OAA7B,CAArB;;AACA,QAAI,CAACD,MAAL,EAAa;AACX,YAAM,KAAIM,uBAAJ,EAAiB,wBAAjB,CAAN;AACD;;AACDI,mBAAIC,GAAJ,CAAQC,iBAAMC,GAAI,yBAAwBb,MAAM,CAACc,IAAK,EAAtD;;AACA,WAAOd,MAAP;AACD;;AACD,QAAMe,WAAW,GAAGf,MAAM,CAACgB,WAAP,EAApB;AACA,QAAMC,QAAQ,GAAGhB,OAAO,CAACiB,IAAR,CAAalB,MAAM,IAAI;AACtC,WAAOA,MAAM,CAACc,IAAP,CAAYE,WAAZ,OAA8BD,WAArC;AACD,GAFgB,CAAjB;;AAIA,MAAI,CAACE,QAAL,EAAe;AACb,UAAM,KAAIX,uBAAJ,EAAkB,4BAA2BN,MAAO,GAApD,CAAN;AACD;;AAED,SAAO,MAAMD,uBAAuB,CAACkB,QAAD,CAApC;AACD","sourcesContent":["import chalk from 'chalk';\nimport { Android } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\n\nasync function ensureEmulatorOpenAsync(device?: Android.Device): Promise<Android.Device> {\n  if (!device) {\n    const devices = await Android.getAllAvailableDevicesAsync();\n    device = devices[0];\n  }\n\n  const bootedDevice = await Android.attemptToStartEmulatorOrAssertAsync(device);\n  if (!bootedDevice) {\n    // TODO: Improve\n    throw new CommandError('Unauthorized');\n  }\n  return bootedDevice;\n}\n\nexport async function resolveDeviceAsync(device?: string | boolean): Promise<Android.Device> {\n  if (!device) {\n    return await ensureEmulatorOpenAsync();\n  }\n\n  const devices: Android.Device[] = await Android.getAllAvailableDevicesAsync().catch(() => []);\n\n  if (device === true) {\n    // --device with no props after\n    const device = await Android.promptForDeviceAsync(devices);\n    if (!device) {\n      throw new CommandError('Select a device to use');\n    }\n    Log.log(chalk.dim`\\u203A Using --device ${device.name}`);\n    return device;\n  }\n  const searchValue = device.toLowerCase();\n  const resolved = devices.find(device => {\n    return device.name.toLowerCase() === searchValue;\n  });\n\n  if (!resolved) {\n    throw new CommandError(`No device name matching \"${device}\"`);\n  }\n\n  return await ensureEmulatorOpenAsync(resolved);\n}\n"],"file":"resolveDeviceAsync.js"}