{"version":3,"sources":["../../../../src/commands/run/android/spawnGradleAsync.ts"],"names":["upperFirst","name","charAt","toUpperCase","slice","formatGradleArguments","cmd","appName","variant","tasks","map","task","resolveGradleWPath","androidProjectPath","path","join","process","platform","getPortArg","port","assembleAsync","args","push","Log","isProfiling","spawnGradleAsync","installAsync","projectRoot","gradlew","debug","cwd","stdio","error","status","AbortCommandError"],"mappings":"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","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport path from 'path';\n\nimport { AbortCommandError } from '../../../CommandError';\nimport Log from '../../../log';\n\nfunction upperFirst(name: string) {\n  return name.charAt(0).toUpperCase() + name.slice(1);\n}\n\nfunction formatGradleArguments(\n  cmd: 'assemble' | 'install',\n  {\n    appName,\n    variant,\n    tasks = [cmd + upperFirst(variant)],\n  }: { tasks?: string[]; variant: string; appName: string }\n) {\n  return appName ? tasks.map(task => `${appName}:${task}`) : tasks;\n}\n\nfunction resolveGradleWPath(androidProjectPath: string): string {\n  return path.join(androidProjectPath, process.platform === 'win32' ? 'gradlew.bat' : 'gradlew');\n}\n\nfunction getPortArg(port: number) {\n  return `-PreactNativeDevServerPort=${port}`;\n}\n\nexport async function assembleAsync({\n  androidProjectPath,\n  variant,\n  port,\n  appName,\n}: {\n  androidProjectPath: string;\n  variant: string;\n  port?: number;\n  appName: string;\n}) {\n  const task = formatGradleArguments('assemble', { variant, appName });\n  const args = [\n    ...task,\n    // ignore linting errors\n    '-x',\n    'lint',\n    // ignore tests\n    '-x',\n    'test',\n    '--configure-on-demand',\n  ];\n  if (port) args.push(getPortArg(port));\n\n  // Generate a profile under `/android/app/build/reports/profile`\n  if (Log.isProfiling) args.push('--profile');\n\n  return await spawnGradleAsync(androidProjectPath, { port, args });\n}\n\nexport async function installAsync({\n  androidProjectPath,\n  variant,\n  appName,\n  port,\n}: {\n  androidProjectPath: string;\n  variant: string;\n  appName: string;\n  port?: number;\n}) {\n  const args = formatGradleArguments('install', { variant, appName });\n  return await spawnGradleAsync(androidProjectPath, { port, args });\n}\n\nexport async function spawnGradleAsync(\n  projectRoot: string,\n  { port, args }: { port?: number; args: string[] }\n) {\n  const gradlew = resolveGradleWPath(projectRoot);\n  if (port) args.push(getPortArg(port));\n  Log.debug(`  ${gradlew} ${args.join(' ')}`);\n  try {\n    return await spawnAsync(gradlew, args, {\n      cwd: projectRoot,\n      stdio: 'inherit',\n    });\n  } catch (error: any) {\n    // User aborted the command with ctrl-c\n    if (error.status === 130) {\n      // Fail silently\n      throw new AbortCommandError();\n    }\n    throw error;\n  }\n}\n"],"file":"spawnGradleAsync.js"}