{"version":3,"sources":["../../../../src/commands/run/android/runAndroid.ts"],"names":["resolveAndroidProjectPathAsync","projectRoot","AndroidConfig","Paths","getProjectPathOrThrowAsync","install","platforms","attemptToGetApplicationIdFromGradleAsync","applicationIdFromGradle","Package","getApplicationIdAsync","Log","debug","resolveOptionsAsync","options","variant","CommandError","device","filePath","getAndroidManifestAsync","androidManifest","Manifest","readAndroidManifestAsync","activity","getRunnableActivity","mainActivity","$","packageName","manifest","package","port","bundler","defaultPort","reuseExistingPort","appName","apkDirectory","path","join","buildType","flavors","split","map","v","toLowerCase","buildDirectory","launchActivity","apkVariantDirectory","actionAsync","promptToClearMalformedNativeProjectsAsync","exp","skipSDKVersionRequirement","track","androidProjectPath","props","log","metroPort","apkFile","getInstallApkNameAsync","binaryPath","Android","installOnDeviceAsync","schemes","result","openProjectAsync","devClient","scheme","applicationId","success","error","message","nested","chalk","dim","UnifiedAnalytics","logEvent","status","platform","StatusEventEmitter","once","flush","availableCPUs","getDeviceABIsAsync","push","DeviceABI","universal","availableCPU","apkName","getApkFileName","fs","existsSync","cpuArch","reduce","rest","flav"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAoBA,eAAeA,8BAAf,CAA8CC,WAA9C,EAAoF;AAClF,MAAI;AACF,WAAO,MAAMC,+BAAcC,KAAd,CAAoBC,0BAApB,CAA+CH,WAA/C,CAAb;AACD,GAFD,CAEE,MAAM;AACN;AACA,UAAM,uCAAcA,WAAd,EAA2B;AAC/BI,MAAAA,OAAO,EAAE,IADsB;AAE/BC,MAAAA,SAAS,EAAE,CAAC,SAAD;AAFoB,KAA3B,CAAN;AAIA,WAAO,MAAMJ,+BAAcC,KAAd,CAAoBC,0BAApB,CAA+CH,WAA/C,CAAb;AACD;AACF;;AAED,eAAeM,wCAAf,CAAwDN,WAAxD,EAA6E;AAC3E,MAAI;AACF,UAAMO,uBAAuB,GAAG,MAAMN,+BAAcO,OAAd,CAAsBC,qBAAtB,CAA4CT,WAA5C,CAAtC;;AACA,QAAIO,uBAAJ,EAA6B;AAC3BG,qBAAIC,KAAJ,CAAU,qCAAqCJ,uBAA/C;;AACA,aAAOA,uBAAP;AACD;AACF,GAND,CAME,MAAM,CAAE;;AACV,SAAO,IAAP;AACD;;AAED,eAAeK,mBAAf,CACEZ,WADF,EAEEa,OAFF,EAG8B;AAAA;;AAC5B,MAAI,OAAOA,OAAO,CAACC,OAAf,KAA2B,QAA/B,EAAyC;AACvC,UAAM,KAAIC,uBAAJ,EAAiB,4BAAjB,CAAN;AACD;;AACD,QAAMC,MAAM,GAAG,MAAM,8CAAmBH,OAAO,CAACG,MAA3B,CAArB;;AACA,MAAI,CAACA,MAAL,EAAa;AACX,UAAM,KAAID,uBAAJ,EAAiB,kCAAjB,CAAN;AACD;;AAED,QAAME,QAAQ,GAAG,MAAMhB,+BAAcC,KAAd,CAAoBgB,uBAApB,CAA4ClB,WAA5C,CAAvB;AACA,QAAMmB,eAAe,GAAG,MAAMlB,+BAAcmB,QAAd,CAAuBC,wBAAvB,CAAgDJ,QAAhD,CAA9B,CAV4B,CAY5B;;AACA,QAAMK,QAAQ,GAAG,MAAMrB,+BAAcmB,QAAd,CAAuBG,mBAAvB,CAA2CJ,eAA3C,CAAvB;;AACA,MAAI,CAACG,QAAL,EAAe;AACb,UAAM,KAAIP,uBAAJ,EAAkB,GAAEE,QAAS,0CAA7B,CAAN;AACD,GAhB2B,CAiB5B;;;AACA,QAAMO,YAAY,GAAGF,QAAQ,CAACG,CAAT,CAAW,cAAX,CAArB;AACA,QAAMC,WAAW,GACf;AADe,2BAEd,MAAMpB,wCAAwC,CAACN,WAAD,CAFhC,yEAGfmB,eAAe,CAACQ,QAAhB,CAAyBF,CAAzB,CAA2BG,OAH7B;;AAKA,MAAI,CAACF,WAAL,EAAkB;AAChB,UAAM,KAAIX,uBAAJ,EAAkB,0DAAyDE,QAAS,GAApF,CAAN;AACD;;AAED,MAAIY,IAAI,GAAGhB,OAAO,CAACiB,OAAR,GACP,MAAM,0CAAiB9B,WAAjB,EAA8B;AAAE+B,IAAAA,WAAW,EAAElB,OAAO,CAACgB,IAAvB;AAA6BG,IAAAA,iBAAiB,EAAE;AAAhD,GAA9B,CADC,GAEP,IAFJ;AAGAnB,EAAAA,OAAO,CAACiB,OAAR,GAAkB,CAAC,CAACD,IAApB;;AACA,MAAI,CAACA,IAAL,EAAW;AACT;AACA;AACAA,IAAAA,IAAI,GAAG,IAAP;AACD,GApC2B,CAsC5B;;;AACA,QAAMI,OAAO,GAAG,KAAhB;;AAEA,QAAMC,YAAY,GAAGC,gBAAKC,IAAL,CAAUpC,WAAV,EAAuB,SAAvB,EAAkCiC,OAAlC,EAA2C,OAA3C,EAAoD,SAApD,EAA+D,KAA/D,CAArB,CAzC4B,CA2C5B;AACA;;;AACA,QAAM,CAACI,SAAD,EAAY,GAAGC,OAAf,IAA0BzB,OAAO,CAACC,OAAR,CAAgByB,KAAhB,CAAsB,WAAtB,EAAmCC,GAAnC,CAAuCC,CAAC,IAAIA,CAAC,CAACC,WAAF,EAA5C,CAAhC;;AACA,QAAMC,cAAc,GAAGR,gBAAKC,IAAL,CAAUF,YAAV,EAAwB,GAAGI,OAA3B,EAAoCD,SAApC,CAAvB;;AAEA,SAAO,EACL,GAAGxB,OADE;AAELgB,IAAAA,IAFK;AAGLb,IAAAA,MAHK;AAILQ,IAAAA,YAJK;AAKLoB,IAAAA,cAAc,EAAG,GAAElB,WAAY,IAAGF,YAAa,EAL1C;AAMLE,IAAAA,WANK;AAOLmB,IAAAA,mBAAmB,EAAEF,cAPhB;AAQLV,IAAAA,OARK;AASLI,IAAAA,SATK;AAULC,IAAAA;AAVK,GAAP;AAYD;;AAEM,eAAeQ,WAAf,CAA2B9C,WAA3B,EAAgDa,OAAhD,EAAkE;AACvE;AACA;AACA,QAAM,oCAAckC,8DAAd,EAAyD/C,WAAzD,EAAsE,CAAC,SAAD,CAAtE,CAAN;AAEA,QAAM;AAAEgD,IAAAA;AAAF,MAAU,yBAAUhD,WAAV,EAAuB;AAAEiD,IAAAA,yBAAyB,EAAE;AAA7B,GAAvB,CAAhB;AACAC,EAAAA,KAAK,CAAClD,WAAD,EAAcgD,GAAd,CAAL;AAEA,QAAMG,kBAAkB,GAAG,MAAMpD,8BAA8B,CAACC,WAAD,CAA/D;AAEA,QAAMoD,KAAK,GAAG,MAAMxC,mBAAmB,CAACZ,WAAD,EAAca,OAAd,CAAvC;;AAEAH,iBAAI2C,GAAJ,CAAQ,wBAAR;;AAEA,QAAM,uCAAc,EAAE,GAAGD,KAAL;AAAYD,IAAAA;AAAZ,GAAd,CAAN;AAEA,QAAM,0DAAgCnD,WAAhC,CAAN;;AACA,MAAIoD,KAAK,CAACtB,OAAV,EAAmB;AACjB,UAAM,4CAAkB9B,WAAlB,EAA+B;AACnCsD,MAAAA,SAAS,EAAEF,KAAK,CAACvB,IADkB;AAEnCxB,MAAAA,SAAS,EAAE2C,GAAG,CAAC3C;AAFoB,KAA/B,CAAN;AAID;;AAED,QAAMkD,OAAO,GAAG,MAAMC,sBAAsB,CAACJ,KAAK,CAACpC,MAAP,EAAeoC,KAAf,CAA5C;;AACA1C,iBAAIC,KAAJ,CAAW,sBAAqB4C,OAAQ,EAAxC;;AAEA,MAAIA,OAAJ,EAAa;AACX,UAAME,UAAU,GAAGtB,gBAAKC,IAAL,CAAUgB,KAAK,CAACP,mBAAhB,EAAqCU,OAArC,CAAnB;;AACA,UAAMG,eAAQC,oBAAR,CAA6BP,KAAK,CAACpC,MAAnC,EAA2C;AAAEyC,MAAAA;AAAF,KAA3C,CAAN;AACD,GAHD,MAGO;AACL/C,mBAAI2C,GAAJ,CAAQ,gEAAR;;AACA,UAAM,sCAAa,EAAE,GAAGD,KAAL;AAAYD,MAAAA;AAAZ,KAAb,CAAN;AACD;;AAED,QAAMS,OAAO,GAAG,MAAM,0CAA0B5D,WAA1B,CAAtB;AAEA,QAAM6D,MAAM,GAAG,MAAMH,eAAQI,gBAAR,CAAyB;AAC5C9D,IAAAA,WAD4C;AAE5CgB,IAAAA,MAAM,EAAEoC,KAAK,CAACpC,MAF8B;AAG5C+C,IAAAA,SAAS,EAAE,IAHiC;AAI5CC,IAAAA,MAAM,EAAEJ,OAAO,CAAC,CAAD,CAJ6B;AAK5CK,IAAAA,aAAa,EAAEb,KAAK,CAAC1B,WALuB;AAM5CkB,IAAAA,cAAc,EAAEQ,KAAK,CAACR;AANsB,GAAzB,CAArB;;AASA,MAAI,CAACiB,MAAM,CAACK,OAAZ,EAAqB;AACnB,UAAM,KAAInD,uBAAJ,EAAiB,OAAO8C,MAAM,CAACM,KAAd,KAAwB,QAAxB,GAAmCN,MAAM,CAACM,KAA1C,GAAkDN,MAAM,CAACM,KAAP,CAAaC,OAAhF,CAAN;AACD;;AAED,MAAIhB,KAAK,CAACtB,OAAV,EAAmB;AACjB;AACApB,mBAAI2D,MAAJ,CAAY,8CAA6CC,iBAAMC,GAAN,CAAW,uBAAX,CAAmC,EAA5F;AACD;AACF;;AAED,SAASrB,KAAT,CAAelD,WAAf,EAAoCgD,GAApC,EAAqD;AACnDwB,0BAAiBC,QAAjB,CAA0B,wBAA1B,EAAoD;AAClDC,IAAAA,MAAM,EAAE,SAD0C;AAElDC,IAAAA,QAAQ,EAAE,SAFwC;AAGlD,OAAG,uCAAuB3E,WAAvB,EAAoCgD,GAApC;AAH+C,GAApD;;AAKA4B,gCAAmBC,IAAnB,CAAwB,mBAAxB,EAA6C,MAAM;AACjD;AACAL,4BAAiBC,QAAjB,CAA0B,wBAA1B,EAAoD;AAClDC,MAAAA,MAAM,EAAE,cAD0C;AAElDC,MAAAA,QAAQ,EAAE,SAFwC;AAGlD,SAAG,uCAAuB3E,WAAvB,EAAoCgD,GAApC;AAH+C,KAApD;AAKD,GAPD;;AAQA4B,gCAAmBC,IAAnB,CAAwB,kBAAxB,EAA4C,MAAM;AAChD;AACAL,4BAAiBC,QAAjB,CAA0B,wBAA1B,EAAoD;AAClDC,MAAAA,MAAM,EAAE,OAD0C;AAElDC,MAAAA,QAAQ,EAAE,SAFwC;AAGlD,SAAG,uCAAuB3E,WAAvB,EAAoCgD,GAApC;AAH+C,KAApD;AAKD,GAPD;;AAQA,iDAAsB,MAAM;AAC1BwB,4BAAiBC,QAAjB,CAA0B,wBAA1B,EAAoD;AAClDC,MAAAA,MAAM,EAAE,UAD0C;AAElDC,MAAAA,QAAQ,EAAE,SAFwC;AAGlD,SAAG,uCAAuB3E,WAAvB,EAAoCgD,GAApC;AAH+C,KAApD;;AAKAwB,4BAAiBM,KAAjB;AACD,GAPD;AAQD;;AAED,eAAetB,sBAAf,CACExC,MADF,EAEE;AACEiB,EAAAA,OADF;AAEEI,EAAAA,SAFF;AAGEC,EAAAA,OAHF;AAIEO,EAAAA;AAJF,CAFF,EAQE;AACA,QAAMkC,aAAa,GAAG,MAAMrB,eAAQsB,kBAAR,CAA2BhE,MAA3B,CAA5B;AACA+D,EAAAA,aAAa,CAACE,IAAd,CAAmBvB,eAAQwB,SAAR,CAAkBC,SAArC;;AAEAzE,iBAAIC,KAAJ,CAAU,qBAAqBoE,aAAa,CAAC3C,IAAd,CAAmB,IAAnB,CAA/B;;AACA1B,iBAAIC,KAAJ,CAAU,wBAAwBkC,mBAAlC,EALA,CAOA;;;AACA,OAAK,MAAMuC,YAAX,IAA2BL,aAA3B,EAA0C;AACxC,UAAMM,OAAO,GAAGC,cAAc,CAACrD,OAAD,EAAUI,SAAV,EAAqBC,OAArB,EAA8B8C,YAA9B,CAA9B;;AACA,QAAIG,cAAGC,UAAH,CAAcrD,gBAAKC,IAAL,CAAUS,mBAAV,EAA+BwC,OAA/B,CAAd,CAAJ,EAA4D;AAC1D,aAAOA,OAAP;AACD;AACF,GAbD,CAeA;;;AACA,QAAMA,OAAO,GAAGC,cAAc,CAACrD,OAAD,EAAUI,SAAV,EAAqBC,OAArB,CAA9B;;AACA,MAAIiD,cAAGC,UAAH,CAAcrD,gBAAKC,IAAL,CAAUS,mBAAV,EAA+BwC,OAA/B,CAAd,CAAJ,EAA4D;AAC1D,WAAOA,OAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAASC,cAAT,CACErD,OADF,EAEEI,SAFF,EAGEC,OAHF,EAIEmD,OAJF,EAKE;AACA,MAAIJ,OAAO,GAAI,GAAEpD,OAAQ,GAAzB;;AACA,MAAIK,OAAJ,EAAa;AACX+C,IAAAA,OAAO,IAAI/C,OAAO,CAACoD,MAAR,CAAe,CAACC,IAAD,EAAOC,IAAP,KAAiB,GAAED,IAAK,GAAEC,IAAK,GAA9C,EAAkD,EAAlD,CAAX;AACD;;AACD,MAAIH,OAAJ,EAAa;AACXJ,IAAAA,OAAO,IAAK,GAAEI,OAAQ,GAAtB;AACD;;AACDJ,EAAAA,OAAO,IAAK,GAAEhD,SAAU,MAAxB;AAEA,SAAOgD,OAAP;AACD","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { AndroidConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport { Android, UnifiedAnalytics } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport StatusEventEmitter from '../../../analytics/StatusEventEmitter';\nimport getDevClientProperties from '../../../analytics/getDevClientProperties';\nimport Log from '../../../log';\nimport { promptToClearMalformedNativeProjectsAsync } from '../../eject/clearNativeFolder';\nimport { prebuildAsync } from '../../eject/prebuildAppAsync';\nimport { installCustomExitHook } from '../../start/installExitHooks';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { setGlobalDevClientSettingsAsync, startBundlerAsync } from '../ios/startBundlerAsync';\nimport { resolvePortAsync } from '../utils/resolvePortAsync';\nimport { getSchemesForAndroidAsync } from '../utils/schemes';\nimport { resolveDeviceAsync } from './resolveDeviceAsync';\nimport { assembleAsync, installAsync } from './spawnGradleAsync';\n\ntype Options = {\n  variant: string;\n  device?: boolean | string;\n  port?: number;\n  bundler?: boolean;\n};\n\nexport type AndroidRunOptions = Omit<Options, 'device'> & {\n  apkVariantDirectory: string;\n  packageName: string;\n  mainActivity: string;\n  launchActivity: string;\n  device: Android.Device;\n  appName: string;\n  buildType: string;\n  flavors?: string[];\n};\n\nasync function resolveAndroidProjectPathAsync(projectRoot: string): Promise<string> {\n  try {\n    return await AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);\n  } catch {\n    // If the project doesn't have native code, prebuild it...\n    await prebuildAsync(projectRoot, {\n      install: true,\n      platforms: ['android'],\n    });\n    return await AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);\n  }\n}\n\nasync function attemptToGetApplicationIdFromGradleAsync(projectRoot: string) {\n  try {\n    const applicationIdFromGradle = await AndroidConfig.Package.getApplicationIdAsync(projectRoot);\n    if (applicationIdFromGradle) {\n      Log.debug('Found Application ID in Gradle: ' + applicationIdFromGradle);\n      return applicationIdFromGradle;\n    }\n  } catch {}\n  return null;\n}\n\nasync function resolveOptionsAsync(\n  projectRoot: string,\n  options: Options\n): Promise<AndroidRunOptions> {\n  if (typeof options.variant !== 'string') {\n    throw new CommandError('--variant must be a string');\n  }\n  const device = await resolveDeviceAsync(options.device);\n  if (!device) {\n    throw new CommandError('Cannot resolve an Android device');\n  }\n\n  const filePath = await AndroidConfig.Paths.getAndroidManifestAsync(projectRoot);\n  const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(filePath);\n\n  // Assert MainActivity defined.\n  const activity = await AndroidConfig.Manifest.getRunnableActivity(androidManifest);\n  if (!activity) {\n    throw new CommandError(`${filePath} is missing a runnable activity element.`);\n  }\n  // Often this is \".MainActivity\"\n  const mainActivity = activity.$['android:name'];\n  const packageName =\n    // Try to get the application identifier from the gradle before checking the package name in the manifest.\n    (await attemptToGetApplicationIdFromGradleAsync(projectRoot)) ??\n    androidManifest.manifest.$.package;\n\n  if (!packageName) {\n    throw new CommandError(`Could not find package name in AndroidManifest.xml at \"${filePath}\"`);\n  }\n\n  let port = options.bundler\n    ? await resolvePortAsync(projectRoot, { defaultPort: options.port, reuseExistingPort: true })\n    : null;\n  options.bundler = !!port;\n  if (!port) {\n    // Skip bundling if the port is null\n    // any random number\n    port = 8081;\n  }\n\n  // TODO: why would this be different? Can we get the different name?\n  const appName = 'app';\n\n  const apkDirectory = path.join(projectRoot, 'android', appName, 'build', 'outputs', 'apk');\n\n  // buildDeveloperTrust -> build, developer, trust (where developer, and trust are flavors).\n  // This won't work for non-standard flavor names like \"myFlavor\" would be treated as \"my\", \"flavor\".\n  const [buildType, ...flavors] = options.variant.split(/(?=[A-Z])/).map(v => v.toLowerCase());\n  const buildDirectory = path.join(apkDirectory, ...flavors, buildType);\n\n  return {\n    ...options,\n    port,\n    device,\n    mainActivity,\n    launchActivity: `${packageName}/${mainActivity}`,\n    packageName,\n    apkVariantDirectory: buildDirectory,\n    appName,\n    buildType,\n    flavors,\n  };\n}\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  // If the user has an empty android folder then the project won't build, this can happen when they delete the prebuild files in git.\n  // Check to ensure most of the core files are in place, and prompt to remove the folder if they aren't.\n  await profileMethod(promptToClearMalformedNativeProjectsAsync)(projectRoot, ['android']);\n\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  track(projectRoot, exp);\n\n  const androidProjectPath = await resolveAndroidProjectPathAsync(projectRoot);\n\n  const props = await resolveOptionsAsync(projectRoot, options);\n\n  Log.log('\\u203A Building app...');\n\n  await assembleAsync({ ...props, androidProjectPath });\n\n  await setGlobalDevClientSettingsAsync(projectRoot);\n  if (props.bundler) {\n    await startBundlerAsync(projectRoot, {\n      metroPort: props.port,\n      platforms: exp.platforms,\n    });\n  }\n\n  const apkFile = await getInstallApkNameAsync(props.device, props);\n  Log.debug(`\\u203A Installing: ${apkFile}`);\n\n  if (apkFile) {\n    const binaryPath = path.join(props.apkVariantDirectory, apkFile);\n    await Android.installOnDeviceAsync(props.device, { binaryPath });\n  } else {\n    Log.log('\\u203A Failed to locate binary file, installing with Gradle...');\n    await installAsync({ ...props, androidProjectPath });\n  }\n\n  const schemes = await getSchemesForAndroidAsync(projectRoot);\n\n  const result = await Android.openProjectAsync({\n    projectRoot,\n    device: props.device,\n    devClient: true,\n    scheme: schemes[0],\n    applicationId: props.packageName,\n    launchActivity: props.launchActivity,\n  });\n\n  if (!result.success) {\n    throw new CommandError(typeof result.error === 'string' ? result.error : result.error.message);\n  }\n\n  if (props.bundler) {\n    // TODO: unify logs\n    Log.nested(`\\nLogs for your project will appear below. ${chalk.dim(`Press Ctrl+C to exit.`)}`);\n  }\n}\n\nfunction track(projectRoot: string, exp: ExpoConfig) {\n  UnifiedAnalytics.logEvent('dev client run command', {\n    status: 'started',\n    platform: 'android',\n    ...getDevClientProperties(projectRoot, exp),\n  });\n  StatusEventEmitter.once('bundleBuildFinish', () => {\n    // Send the 'bundle ready' event once the JS has been built.\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'bundle ready',\n      platform: 'android',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  });\n  StatusEventEmitter.once('deviceLogReceive', () => {\n    // Send the 'ready' event once the app is running in a device.\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'ready',\n      platform: 'android',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  });\n  installCustomExitHook(() => {\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'finished',\n      platform: 'android',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n    UnifiedAnalytics.flush();\n  });\n}\n\nasync function getInstallApkNameAsync(\n  device: Android.Device,\n  {\n    appName,\n    buildType,\n    flavors,\n    apkVariantDirectory,\n  }: Pick<AndroidRunOptions, 'appName' | 'flavors' | 'buildType' | 'apkVariantDirectory'>\n) {\n  const availableCPUs = await Android.getDeviceABIsAsync(device);\n  availableCPUs.push(Android.DeviceABI.universal);\n\n  Log.debug('Supported ABIs: ' + availableCPUs.join(', '));\n  Log.debug('Searching for APK: ' + apkVariantDirectory);\n\n  // Check for cpu specific builds first\n  for (const availableCPU of availableCPUs) {\n    const apkName = getApkFileName(appName, buildType, flavors, availableCPU);\n    if (fs.existsSync(path.join(apkVariantDirectory, apkName))) {\n      return apkName;\n    }\n  }\n\n  // Otherwise use the default apk named after the variant: app-debug.apk\n  const apkName = getApkFileName(appName, buildType, flavors);\n  if (fs.existsSync(path.join(apkVariantDirectory, apkName))) {\n    return apkName;\n  }\n\n  return null;\n}\n\nfunction getApkFileName(\n  appName: string,\n  buildType: string,\n  flavors?: string[] | null,\n  cpuArch?: string | null\n) {\n  let apkName = `${appName}-`;\n  if (flavors) {\n    apkName += flavors.reduce((rest, flav) => `${rest}${flav}-`, '');\n  }\n  if (cpuArch) {\n    apkName += `${cpuArch}-`;\n  }\n  apkName += `${buildType}.apk`;\n\n  return apkName;\n}\n"],"file":"runAndroid.js"}