{"version":3,"sources":["../../../../src/commands/run/utils/resolvePortAsync.ts"],"names":["resolvePortAsync","projectRoot","reuseExistingPort","defaultPort","fallbackPort","port","parseInt","getenv","int","resolvedPort","Log","log","process","env","RCT_METRO_PORT","String"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEO,eAAeA,gBAAf,CACLC,WADK,EAEL;AACEC,EAAAA,iBADF;AAEEC,EAAAA,WAFF;AAGEC,EAAAA;AAHF,IAQI,EAVC,EAWmB;AACxB,MAAIC,IAAJ;;AACA,MAAI,OAAOF,WAAP,KAAuB,QAA3B,EAAqC;AACnCE,IAAAA,IAAI,GAAGC,QAAQ,CAACH,WAAD,EAAc,EAAd,CAAf;AACD,GAFD,MAEO,IAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;AAC1CE,IAAAA,IAAI,GAAGF,WAAP;AACD,GAFM,MAEA;AACLE,IAAAA,IAAI,GAAGE,kBAAOC,GAAP,CAAW,gBAAX,EAA6BJ,YAAY,IAAI,IAA7C,CAAP;AACD,GARuB,CAUxB;;;AACA,QAAMK,YAAY,GAAG,MAAM,wCAAgBR,WAAhB,EAA6B;AACtDE,IAAAA,WAAW,EAAEE,IADyC;AAEtDH,IAAAA;AAFsD,GAA7B,CAA3B;;AAIA,MAAIO,YAAY,IAAI,IAApB,EAA0B;AACxBC,mBAAIC,GAAJ,CAAQ,4BAAR,EADwB,CAExB;;AACD,GAHD,MAGO;AACL;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,cAAZ,GAA6BC,MAAM,CAACN,YAAD,CAAnC;AACD;;AAED,SAAOA,YAAP;AACD","sourcesContent":["import getenv from 'getenv';\nimport { choosePortAsync } from 'xdl/build/utils/choosePortAsync';\n\nimport Log from '../../../log';\n\nexport async function resolvePortAsync(\n  projectRoot: string,\n  {\n    reuseExistingPort,\n    defaultPort,\n    fallbackPort,\n  }: {\n    reuseExistingPort?: boolean;\n    defaultPort?: string | number;\n    fallbackPort?: number;\n  } = {}\n): Promise<number | null> {\n  let port: number;\n  if (typeof defaultPort === 'string') {\n    port = parseInt(defaultPort, 10);\n  } else if (typeof defaultPort === 'number') {\n    port = defaultPort;\n  } else {\n    port = getenv.int('RCT_METRO_PORT', fallbackPort || 8081);\n  }\n\n  // Only check the port when the bundler is running.\n  const resolvedPort = await choosePortAsync(projectRoot, {\n    defaultPort: port,\n    reuseExistingPort,\n  });\n  if (resolvedPort == null) {\n    Log.log('\\u203A Skipping dev server');\n    // Skip bundling if the port is null\n  } else {\n    // Use the new or resolved port\n    process.env.RCT_METRO_PORT = String(resolvedPort);\n  }\n\n  return resolvedPort;\n}\n"],"file":"resolvePortAsync.js"}