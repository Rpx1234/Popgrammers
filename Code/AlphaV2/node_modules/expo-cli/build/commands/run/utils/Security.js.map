{"version":3,"sources":["../../../../src/commands/run/utils/Security.ts"],"names":["assertInstalledAsync","CommandError","getCertificateForSigningIdAsync","id","pem","stdout","trim","forge","pki","certificateFromPem","findIdentitiesAsync","results","parsed","split","map","line","extractCodeSigningInfo","filter","Boolean","Set","value","match","resolveIdentitiesAsync","identities","values","extractSigningId","Promise","all","signingCertificateId","resolveCertificateSigningInfoAsync","certificate","codeSigningInfo","subject","getField","appleTeamName","appleTeamId"],"mappings":";;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAqBO,eAAeA,oBAAf,GAAsC;AAC3C,MAAI;AACF,UAAM,2BAAW,OAAX,EAAoB,CAAC,UAAD,CAApB,CAAN;AACD,GAFD,CAEE,MAAM;AACN,UAAM,KAAIC,uBAAJ,EACJ,qIADI,CAAN;AAGD;AACF;;AAEM,eAAeC,+BAAf,CAA+CC,EAA/C,EAA2F;AAAA;;AAChG,QAAMC,GAAG,4BAAG,CAAC,MAAM,2BAAW,UAAX,EAAuB,CAAC,kBAAD,EAAqB,IAArB,EAA2BD,EAA3B,EAA+B,IAA/B,CAAvB,CAAP,EAAqEE,MAAxE,oFAAG,sBAA6EC,IAAhF,2DAAG,kDAAZ;;AACA,MAAI,CAACF,GAAL,EAAU;AACR,UAAM,KAAIH,uBAAJ,EACH,yCAAwCE,EAAG,8BADxC,CAAN;AAGD;;AACD,SAAOI,qBAAMC,GAAN,CAAUC,kBAAV,CAA6BL,GAA7B,CAAP;AACD;;AAEM,eAAeM,mBAAf,GAAwD;AAAA;;AAC7D,QAAMC,OAAO,6BAAG,2BACd,MAAM,2BAAW,UAAX,EAAuB,CAAC,eAAD,EAAkB,IAAlB,EAAwB,aAAxB,EAAuC,IAAvC,CAAvB,CADQ,EAEdN,MAFc,EAEPC,IAFI,2DAAG,mDAAhB,CAD6D,CAI7D;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMM,MAAM,GAAGD,OAAO,CACnBE,KADY,CACN,IADM,EAEZC,GAFY,CAERC,IAAI,IAAIC,sBAAsB,CAACD,IAAD,CAFtB,EAGZE,MAHY,CAGLC,OAHK,CAAf,CAX6D,CAgB7D;;AACA,SAAO,CAAC,GAAG,IAAIC,GAAJ,CAAQP,MAAR,CAAJ,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASI,sBAAT,CAAgCI,KAAhC,EAA8D;AAAA;;AACnE,0CAAOA,KAAK,CAACC,KAAN,CAAY,sCAAZ,CAAP,iDAAO,aAAsD,CAAtD,CAAP,yDAAmE,IAAnE;AACD;;AAEM,eAAeC,sBAAf,CACLC,UADK,EAE8B;AACnC,QAAMC,MAAM,GAAGD,UAAU,CAACT,GAAX,CAAeW,gBAAf,EAAiCR,MAAjC,CAAwCC,OAAxC,CAAf;AACA,SAAO,MAAMQ,OAAO,CAACC,GAAR,CACXH,MAAM,CAACV,GAAP,CAAWc,oBAAoB,IAAIC,kCAAkC,CAACD,oBAAD,CAArE,CADW,CAAb;AAGD;;AAEM,eAAeC,kCAAf,CACLD,oBADK,EAE4B;AAAA;;AACjC,QAAME,WAAW,GAAG,MAAM5B,+BAA+B,CAAC0B,oBAAD,CAAzD;AACA,SAAO;AACLA,IAAAA,oBADK;AAELG,IAAAA,eAAe,2BAAED,WAAW,CAACE,OAAZ,CAAoBC,QAApB,CAA6B,IAA7B,CAAF,0DAAE,sBAAoCb,KAFhD;AAGLc,IAAAA,aAAa,4BAAEJ,WAAW,CAACE,OAAZ,CAAoBC,QAApB,CAA6B,GAA7B,CAAF,2DAAE,uBAAmCb,KAH7C;AAILe,IAAAA,WAAW,4BAAEL,WAAW,CAACE,OAAZ,CAAoBC,QAApB,CAA6B,IAA7B,CAAF,2DAAE,uBAAoCb;AAJ5C,GAAP;AAMD;AAED;AACA;AACA;AACA;;;AACO,SAASK,gBAAT,CAA0BM,eAA1B,EAAkE;AAAA;;AACvE,4DAAOA,eAAe,CAACV,KAAhB,CAAsB,sBAAtB,CAAP,2DAAO,uBAAgD,CAAhD,CAAP,yEAA6D,IAA7D;AACD","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport forge from 'node-forge';\n\nimport CommandError from '../../../CommandError';\n\nexport type CertificateSigningInfo = {\n  /**\n   * @example 'AA00AABB0A'\n   */\n  signingCertificateId: string;\n  /**\n   * @example 'Apple Development: Evan Bacon (AA00AABB0A)'\n   */\n  codeSigningInfo?: string;\n  /**\n   * @example '650 Industries, Inc.'\n   */\n  appleTeamName?: string;\n  /**\n   * @example 'A1BCDEF234'\n   */\n  appleTeamId?: string;\n};\n\nexport async function assertInstalledAsync() {\n  try {\n    await spawnAsync('which', ['security']);\n  } catch {\n    throw new CommandError(\n      \"Cannot code sign project because the CLI `security` is not available on your computer.\\nPlease ensure it's installed and try again.\"\n    );\n  }\n}\n\nexport async function getCertificateForSigningIdAsync(id: string): Promise<forge.pki.Certificate> {\n  const pem = (await spawnAsync('security', ['find-certificate', '-c', id, '-p'])).stdout?.trim?.();\n  if (!pem) {\n    throw new CommandError(\n      `Failed to get PEM certificate for ID \"${id}\" using the \\`security\\` CLI`\n    );\n  }\n  return forge.pki.certificateFromPem(pem);\n}\n\nexport async function findIdentitiesAsync(): Promise<string[]> {\n  const results = (\n    await spawnAsync('security', ['find-identity', '-p', 'codesigning', '-v'])\n  ).stdout.trim?.();\n  // Returns a string like:\n  // 1) 12222234253761286351826735HGKDHAJGF45283 \"Apple Development: Evan Bacon (AA00AABB0A)\" (CSSMERR_TP_CERT_REVOKED)\n  // 2) 12312234253761286351826735HGKDHAJGF45283 \"Apple Development: bacon@expo.io (BB00AABB0A)\"\n  // 3) 12442234253761286351826735HGKDHAJGF45283 \"iPhone Distribution: Evan Bacon (CC00AABB0B)\" (CSSMERR_TP_CERT_REVOKED)\n  // 4) 15672234253761286351826735HGKDHAJGF45283 \"Apple Development: Evan Bacon (AA00AABB0A)\"\n  //  4 valid identities found\n\n  const parsed = results\n    .split('\\n')\n    .map(line => extractCodeSigningInfo(line))\n    .filter(Boolean) as string[];\n\n  // Remove duplicates\n  return [...new Set(parsed)];\n}\n\n/**\n * @param value '  2) 12312234253761286351826735HGKDHAJGF45283 \"Apple Development: bacon@expo.io (BB00AABB0A)\"'\n * @returns 'Apple Development: Evan Bacon (PH75MDXG4H)'\n */\nexport function extractCodeSigningInfo(value: string): string | null {\n  return value.match(/^\\s*\\d+\\).+\"(.+Develop(ment|er).+)\"$/)?.[1] ?? null;\n}\n\nexport async function resolveIdentitiesAsync(\n  identities: string[]\n): Promise<CertificateSigningInfo[]> {\n  const values = identities.map(extractSigningId).filter(Boolean) as string[];\n  return await Promise.all(\n    values.map(signingCertificateId => resolveCertificateSigningInfoAsync(signingCertificateId))\n  );\n}\n\nexport async function resolveCertificateSigningInfoAsync(\n  signingCertificateId: string\n): Promise<CertificateSigningInfo> {\n  const certificate = await getCertificateForSigningIdAsync(signingCertificateId);\n  return {\n    signingCertificateId,\n    codeSigningInfo: certificate.subject.getField('CN')?.value,\n    appleTeamName: certificate.subject.getField('O')?.value,\n    appleTeamId: certificate.subject.getField('OU')?.value,\n  };\n}\n\n/**\n * @param codeSigningInfo 'Apple Development: Evan Bacon (AA00AABB0A)'\n * @returns 'AA00AABB0A'\n */\nexport function extractSigningId(codeSigningInfo: string): string | null {\n  return codeSigningInfo.match(/.*\\(([a-zA-Z0-9]+)\\)/)?.[1] ?? null;\n}\n"],"file":"Security.js"}