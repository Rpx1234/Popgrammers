{"version":3,"sources":["../../../../src/commands/run/ios/runIos.ts"],"names":["isMac","process","platform","actionAsync","projectRoot","options","promptToClearMalformedNativeProjectsAsync","exp","skipSDKVersionRequirement","track","Log","warn","chalk","cyan","fs","existsSync","path","join","install","platforms","props","isSimulator","AppleDevice","isEnabled","log","gray","bold","IOSDeploy","assertInstalledAsync","buildOutput","XcodeBuild","buildAsync","binaryPath","getAppBinaryPath","shouldStartBundler","metroPort","port","bundleIdentifier","getBundleIdentifierForBinaryAsync","logPrettyItem","device","name","SimControl","installAsync","udid","dir","openInSimulatorAsync","installOnDeviceAsync","bundle","appDeltaDirectory","deviceName","nested","dim","UnifiedAnalytics","logEvent","status","StatusEventEmitter","once","flush","builtInfoPlistPath","CFBundleIdentifier","Simulator","streamLogsAsync","schemes","result","openProjectAsync","devClient","scheme","applicationId","skipNativeLogs","success","CommandError","error"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport * as path from 'path';\nimport { AppleDevice, SimControl, Simulator, UnifiedAnalytics } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport StatusEventEmitter from '../../../analytics/StatusEventEmitter';\nimport getDevClientProperties from '../../../analytics/getDevClientProperties';\nimport Log from '../../../log';\nimport { promptToClearMalformedNativeProjectsAsync } from '../../eject/clearNativeFolder';\nimport { EjectAsyncOptions, prebuildAsync } from '../../eject/prebuildAppAsync';\nimport { installCustomExitHook } from '../../start/installExitHooks';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { setGlobalDevClientSettingsAsync, startBundlerAsync } from '../ios/startBundlerAsync';\nimport { parseBinaryPlistAsync } from '../utils/binaryPlist';\nimport { getSchemesForIosAsync } from '../utils/schemes';\nimport * as IOSDeploy from './IOSDeploy';\nimport maybePromptToSyncPodsAsync from './Podfile';\nimport * as XcodeBuild from './XcodeBuild';\nimport { getAppDeltaDirectory, installOnDeviceAsync } from './installOnDeviceAsync';\nimport { Options, resolveOptionsAsync } from './resolveOptionsAsync';\n\nconst isMac = process.platform === 'darwin';\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  // If the user has an empty ios folder then the project won't build, this can happen when they delete the prebuild files in git.\n  // Check to ensure most of the core files are in place, and prompt to remove the folder if they aren't.\n  await profileMethod(promptToClearMalformedNativeProjectsAsync)(projectRoot, ['ios']);\n\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  track(projectRoot, exp);\n\n  if (!isMac) {\n    // TODO: Prompt to use EAS?\n\n    Log.warn(\n      `iOS apps can only be built on macOS devices. Use ${chalk.cyan`eas build -p ios`} to build in the cloud.`\n    );\n    return;\n  }\n\n  // If the project doesn't have native code, prebuild it...\n  if (!fs.existsSync(path.join(projectRoot, 'ios'))) {\n    await prebuildAsync(projectRoot, {\n      install: options.install,\n      platforms: ['ios'],\n    } as EjectAsyncOptions);\n  } else if (options.install) {\n    await maybePromptToSyncPodsAsync(projectRoot);\n    // TODO: Ensure the pods are in sync -- https://github.com/expo/expo/pull/11593\n  }\n\n  const props = await resolveOptionsAsync(projectRoot, options);\n  if (!props.isSimulator) {\n    if (AppleDevice.isEnabled()) {\n      Log.log(\n        chalk.gray(\n          `\\u203A Unstable feature ${chalk.bold`EXPO_USE_APPLE_DEVICE`} is enabled. Device installation may not work as expected.`\n        )\n      );\n    } else {\n      // Assert as early as possible\n      await IOSDeploy.assertInstalledAsync();\n    }\n  }\n\n  const buildOutput = await profileMethod(XcodeBuild.buildAsync, 'XcodeBuild.buildAsync')(props);\n\n  const binaryPath = await profileMethod(\n    XcodeBuild.getAppBinaryPath,\n    'XcodeBuild.getAppBinaryPath'\n  )(buildOutput);\n\n  await setGlobalDevClientSettingsAsync(projectRoot);\n  if (props.shouldStartBundler) {\n    await startBundlerAsync(projectRoot, {\n      metroPort: props.port,\n      platforms: exp.platforms,\n    });\n  }\n  const bundleIdentifier = await profileMethod(getBundleIdentifierForBinaryAsync)(binaryPath);\n\n  if (props.isSimulator) {\n    XcodeBuild.logPrettyItem(`${chalk.bold`Installing`} on ${props.device.name}`);\n    await SimControl.installAsync({ udid: props.device.udid, dir: binaryPath });\n\n    await openInSimulatorAsync({\n      projectRoot,\n      bundleIdentifier,\n      device: props.device,\n      shouldStartBundler: props.shouldStartBundler,\n    });\n  } else {\n    await profileMethod(installOnDeviceAsync)({\n      bundleIdentifier,\n      bundle: binaryPath,\n      appDeltaDirectory: getAppDeltaDirectory(bundleIdentifier),\n      udid: props.device.udid,\n      deviceName: props.device.name,\n    });\n  }\n\n  if (props.shouldStartBundler) {\n    Log.nested(`\\nLogs for your project will appear below. ${chalk.dim(`Press Ctrl+C to exit.`)}`);\n  }\n}\n\nfunction track(projectRoot: string, exp: ExpoConfig) {\n  UnifiedAnalytics.logEvent('dev client run command', {\n    status: 'started',\n    platform: 'ios',\n    ...getDevClientProperties(projectRoot, exp),\n  });\n  StatusEventEmitter.once('bundleBuildFinish', () => {\n    // Send the 'bundle ready' event once the JS has been built.\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'bundle ready',\n      platform: 'ios',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  });\n  StatusEventEmitter.once('deviceLogReceive', () => {\n    // Send the 'ready' event once the app is running in a device.\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'ready',\n      platform: 'ios',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  });\n  installCustomExitHook(() => {\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'finished',\n      platform: 'ios',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n    UnifiedAnalytics.flush();\n  });\n}\n\nasync function getBundleIdentifierForBinaryAsync(binaryPath: string): Promise<string> {\n  const builtInfoPlistPath = path.join(binaryPath, 'Info.plist');\n  const { CFBundleIdentifier } = await parseBinaryPlistAsync(builtInfoPlistPath);\n  return CFBundleIdentifier;\n}\n\nasync function openInSimulatorAsync({\n  projectRoot,\n  bundleIdentifier,\n  device,\n  shouldStartBundler,\n}: {\n  projectRoot: string;\n  bundleIdentifier: string;\n  device: XcodeBuild.BuildProps['device'];\n  shouldStartBundler?: boolean;\n}) {\n  XcodeBuild.logPrettyItem(\n    `${chalk.bold`Opening`} on ${device.name} ${chalk.dim(`(${bundleIdentifier})`)}`\n  );\n\n  if (shouldStartBundler) {\n    await Simulator.streamLogsAsync({\n      udid: device.udid,\n      bundleIdentifier,\n    });\n  }\n\n  const schemes = await getSchemesForIosAsync(projectRoot);\n  const result = await Simulator.openProjectAsync({\n    projectRoot,\n    udid: device.udid,\n    devClient: true,\n    scheme: schemes[0],\n    applicationId: bundleIdentifier,\n    // We always setup native logs before launching to ensure we catch any fatal errors.\n    skipNativeLogs: true,\n  });\n  if (!result.success) {\n    throw new CommandError(result.error);\n  }\n}\n"],"file":"runIos.js"}