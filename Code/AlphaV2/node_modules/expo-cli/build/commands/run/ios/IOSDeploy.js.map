{"version":3,"sources":["../../../../src/commands/run/ios/IOSDeploy.ts"],"names":["isInstalledAsync","stdio","installOnDeviceAsync","props","bundle","appDeltaDirectory","udid","deviceName","args","push","Log","debug","join","indicator","copyingFileCount","currentPhase","output","spawnIOSDeployAsync","message","loadingMatch","match","progress","tryParsingNumericValue","text","chalk","bold","startsWith","phaseMatch","phase","trim","PhaseNameMap","copiedMessage","gray","succeed","start","code","fail","error","includes","appName","path","basename","split","program","nonInteractive","Prompts","confirmAsync","initial","CommandError","Install","Debug","Uninstall","str","parseInt","onStdout","Promise","resolve","reject","fork","errorOutput","stdout","on","data","stringData","toString","os","EOL","line","stderr","Buffer","assertInstalledAsync","cyan","brewInstallAsync","warn","process","columns","SilentError"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEO,eAAeA,gBAAf,GAAkC;AACvC,MAAI;AACF,UAAM,2BAAW,YAAX,EAAyB,CAAC,WAAD,CAAzB,EAAwC;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAxC,CAAN;AACA,WAAO,IAAP;AACD,GAHD,CAGE,MAAM;AACN,WAAO,KAAP;AACD;AACF;;AAEM,eAAeC,oBAAf,CAAoCC,KAApC,EAKW;AAChB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,iBAAV;AAA6BC,IAAAA,IAA7B;AAAmCC,IAAAA;AAAnC,MAAkDJ,KAAxD;AACA,QAAMK,IAAI,GAAG,CACX,UADW,EAEXJ,MAFW,EAGX,MAHW,EAIXE,IAJW,EAKX,cALW,EAMX;AACA,aAPW,CAAb;;AASA,MAAID,iBAAJ,EAAuB;AACrBG,IAAAA,IAAI,CAACC,IAAL,CAAU,cAAV,EAA0BJ,iBAA1B;AACD,GAbe,CAchB;AACA;;;AAEAK,iBAAIC,KAAJ,CAAW,gBAAeH,IAAI,CAACI,IAAL,CAAU,GAAV,CAAe,EAAzC;;AAEA,MAAIC,SAAJ;AACA,MAAIC,gBAAgB,GAAG,CAAvB;AACA,MAAIC,YAAJ;AACA,QAAMC,MAAM,GAAG,MAAMC,mBAAmB,CAACT,IAAD,EAAOU,OAAO,IAAI;AACxD,UAAMC,YAAY,GAAGD,OAAO,CAACE,KAAR,CAAc,iBAAd,CAArB;;AACA,QAAID,YAAJ,EAAkB;AAChB,YAAME,QAAQ,GAAGC,sBAAsB,CAACH,YAAY,CAAC,CAAD,CAAb,CAAvC;AACA,YAAMD,OAAO,GAAGC,YAAY,CAAC,CAAD,CAA5B;;AACA,UAAIN,SAAJ,EAAe;AACbA,QAAAA,SAAS,CAACU,IAAV,GAAkB,GAAEC,iBAAMC,IAAN,CAAWV,YAAX,CAAyB,IAAGM,QAAS,GAAzD;AACD;;AACD,UAAIH,OAAO,CAACQ,UAAR,CAAmB,UAAnB,CAAJ,EAAoC;AAClCZ,QAAAA,gBAAgB;AACjB;;AACD;AACD,KAZuD,CAaxD;;;AACA,UAAMa,UAAU,GAAGT,OAAO,CAACE,KAAR,CAAc,8BAAd,CAAnB;;AACA,QAAIO,UAAJ,EAAgB;AAAA;;AACd,UAAIC,KAAK,mBAAGD,UAAU,CAAC,CAAD,CAAb,sEAAG,aAAeE,IAAlB,sDAAG,oCAAZ,CADc,CAEd;;AACAD,MAAAA,KAAK,0BAAGE,YAAY,CAACF,KAAD,CAAf,qEAA0BA,KAA/B;;AAEA,UAAIf,SAAJ,EAAe;AACb,YAAIE,YAAY,KAAK,YAArB,EAAmC;AACjC,gBAAMgB,aAAa,GAAGP,iBAAMQ,IAAK,UAASlB,gBAAiB,UAA3D,CADiC,CAEjC;;AACAD,UAAAA,SAAS,CAACoB,OAAV,CAAmB,GAAET,iBAAMC,IAAN,CAAW,WAAX,CAAwB,IAAGM,aAAc,EAA9D;AACD,SAJD,MAIO;AACLlB,UAAAA,SAAS,CAACoB,OAAV;AACD;AACF;;AACDpB,MAAAA,SAAS,GAAG,gBAAIe,KAAJ,EAAWM,KAAX,EAAZ;AACAnB,MAAAA,YAAY,GAAGa,KAAf;AACA;AACD;;AACDlB,mBAAIC,KAAJ,CAAUO,OAAV;AACD,GAlCuC,CAAxC;;AAoCA,MAAIF,MAAM,CAACmB,IAAP,KAAgB,CAApB,EAAuB;AACrB,QAAItB,SAAJ,EAAe;AACbA,MAAAA,SAAS,CAACuB,IAAV;AACD,KAHoB,CAIrB;;;AACA,QAAIpB,MAAM,CAACqB,KAAP,CAAaC,QAAb,CAAsB,sBAAtB,CAAJ,EAAmD;AAAA;;AACjD;AACA,YAAMC,OAAO,4BAAGC,gBAAKC,QAAL,CAAcrC,MAAd,EAAsBsC,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,CAAH,yEAA0C,KAAvD;;AACA,UACE,CAACC,qBAAQC,cAAT,KACC,MAAMC,eAAQC,YAAR,CAAqB;AAC1B5B,QAAAA,OAAO,EAAG,iBAAgBqB,OAAQ,yCAAwChC,UAAW,iBAD3D;AAE1BwC,QAAAA,OAAO,EAAE;AAFiB,OAArB,CADP,CADF,EAME;AACA,eAAO7C,oBAAoB,CAACC,KAAD,CAA3B;AACD,OARD,MAQO;AACL,cAAM,KAAI6C,uBAAJ,EACH,iBAAgBT,OAAQ,OAAMhC,UAAW,gCADtC,CAAN;AAGD;AACF;;AACD,UAAM,KAAIyC,uBAAJ,EACH,uEAAsEhC,MAAM,CAACqB,KAAM,EADhF,CAAN;AAGD,GAzBD,MAyBO;AACL,QAAIxB,SAAJ,EAAe;AACb,UAAIE,YAAY,KAAK,WAArB,EAAkC;AAChCF,QAAAA,SAAS,CAACoB,OAAV,CAAmB,GAAET,iBAAMC,IAAK,UAAU,IAAGD,iBAAMQ,IAAN,CAAY,MAAKzB,UAAW,EAA5B,CAA+B,EAA5E;AACD,OAFD,MAEO;AACLM,QAAAA,SAAS,CAACoB,OAAV;AACD;AACF;AACF;AACF;;AAED,MAAMH,YAAoC,GAAG;AAC3CmB,EAAAA,OAAO,EAAE,YADkC;AAE3CC,EAAAA,KAAK,EAAE,WAFoC;AAG3CC,EAAAA,SAAS,EAAE;AAHgC,CAA7C;;AAMA,SAAS7B,sBAAT,CAAgC8B,GAAhC,EAA6D;AAC3D,MAAI;AAAA;;AACF,WAAOC,QAAQ,gBAACD,GAAD,aAACA,GAAD,qCAACA,GAAG,CAAEhC,KAAL,CAAW,KAAX,CAAD,+CAAC,WAAoB,CAApB,CAAD,qDAA2B,IAA3B,EAAiC,EAAjC,CAAf;AACD,GAFD,CAEE,MAAM;AACN,WAAO,CAAC,CAAR;AACD;AACF;;AAED,SAASH,mBAAT,CAA6BT,IAA7B,EAA6C8C,QAA7C,EAAkF;AAChF,SAAO,IAAIC,OAAJ,CAA6D,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC7F,UAAMC,IAAI,GAAG,4BAAM,YAAN,EAAoBlD,IAApB,CAAb;AACA,QAAIQ,MAAM,GAAG,EAAb;AACA,QAAI2C,WAAW,GAAG,EAAlB;AACAD,IAAAA,IAAI,CAACE,MAAL,CAAYC,EAAZ,CAAe,MAAf,EAAwBC,IAAD,IAAkB;AACvC,YAAMC,UAAU,GAAGD,IAAI,CAACE,QAAL,GAAgBtB,KAAhB,CAAsBuB,cAAGC,GAAzB,CAAnB;;AACA,WAAK,IAAIC,IAAT,IAAiBJ,UAAjB,EAA6B;AAC3BI,QAAAA,IAAI,GAAGA,IAAI,CAACtC,IAAL,EAAP;AACA,YAAI,CAACsC,IAAL,EAAW;;AACX,YAAIA,IAAI,CAAC/C,KAAL,CAAW,SAAX,CAAJ,EAA2B;AACzBuC,UAAAA,WAAW,GAAGQ,IAAd;AACD,SAFD,MAEO;AACLnD,UAAAA,MAAM,IAAImD,IAAV;AACAb,UAAAA,QAAQ,CAACa,IAAD,CAAR;AACD;AACF;AACF,KAZD;AAcAT,IAAAA,IAAI,CAACU,MAAL,CAAYP,EAAZ,CAAe,MAAf,EAAwBC,IAAD,IAAkB;AACvC,YAAMC,UAAU,GAAGD,IAAI,YAAYO,MAAhB,GAAyBP,IAAI,CAACE,QAAL,EAAzB,GAA2CF,IAA9D;AACAH,MAAAA,WAAW,IAAII,UAAf;AACD,KAHD;AAKAL,IAAAA,IAAI,CAACG,EAAL,CAAQ,OAAR,EAAkB1B,IAAD,IAAkB;AACjCqB,MAAAA,OAAO,CAAC;AAAExC,QAAAA,MAAF;AAAUqB,QAAAA,KAAK,EAAEsB,WAAjB;AAA8BxB,QAAAA;AAA9B,OAAD,CAAP;AACD,KAFD;AAGD,GA1BM,CAAP;AA2BD;;AAEM,eAAemC,oBAAf,GAAsC;AAC3C,MAAI,EAAE,MAAMtE,gBAAgB,EAAxB,CAAJ,EAAiC;AAC/B,QACE,MAAM6C,eAAQC,YAAR,CAAqB;AACzB5B,MAAAA,OAAO,EAAG,oBAAmBM,iBAAM+C,IAAK,YAAY,uEAD3B;AAEzBxB,MAAAA,OAAO,EAAE;AAFgB,KAArB,CADR,EAKE;AACA,UAAI;AACF,cAAMyB,gBAAgB,EAAtB;AACA;AACD,OAHD,CAGE,OAAOnC,KAAP,EAAc;AACd3B,uBAAI2B,KAAJ,CAAW,qBAAoBb,iBAAMC,IAAK,YAAY,mBAAkBY,KAAK,CAACnB,OAAQ,EAAtF;AACD;AACF,KAb8B,CAc/B;;;AACA,UAAMmB,KAAK,GAAI,8CAA6Cb,iBAAMC,IAAK,YAAY,+CAA8CD,iBAAMC,IAAK,yBAAyB,oDAArK;;AACAf,mBAAI+D,IAAJ,CAAS,yBAASpC,KAAT,EAAgBqC,OAAO,CAACd,MAAR,CAAee,OAAf,IAA0B,EAA1C,CAAT;;AACA,UAAM,KAAIC,2BAAJ,EAAgBvC,KAAhB,CAAN;AACD;AACF;;AAED,eAAemC,gBAAf,GAAkC;AAChC,QAAM,2BAAW,MAAX,EAAmB,CAAC,SAAD,EAAY,YAAZ,CAAnB,EAA8C;AAClDvE,IAAAA,KAAK,EAAE;AAD2C,GAA9C,CAAN;AAGD","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport { spawn } from 'child_process';\nimport program from 'commander';\nimport { Ora } from 'ora';\nimport os from 'os';\nimport path from 'path';\nimport wrapAnsi from 'wrap-ansi';\nimport { Prompts } from 'xdl';\n\nimport CommandError, { SilentError } from '../../../CommandError';\nimport Log from '../../../log';\nimport { ora } from '../../../utils/ora';\n\nexport async function isInstalledAsync() {\n  try {\n    await spawnAsync('ios-deploy', ['--version'], { stdio: 'ignore' });\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport async function installOnDeviceAsync(props: {\n  bundle: string;\n  appDeltaDirectory?: string;\n  udid: string;\n  deviceName: string;\n}): Promise<void> {\n  const { bundle, appDeltaDirectory, udid, deviceName } = props;\n  const args = [\n    '--bundle',\n    bundle,\n    '--id',\n    udid,\n    '--justlaunch',\n    // Wifi devices tend to stall and never resolve\n    '--no-wifi',\n  ];\n  if (appDeltaDirectory) {\n    args.push('--app_deltas', appDeltaDirectory);\n  }\n  // TODO: Attach LLDB debugger for native logs\n  // '--debug'\n\n  Log.debug(`  ios-deploy ${args.join(' ')}`);\n\n  let indicator: Ora | undefined;\n  let copyingFileCount = 0;\n  let currentPhase: string | undefined;\n  const output = await spawnIOSDeployAsync(args, message => {\n    const loadingMatch = message.match(/\\[(.*?)\\] (.*)/m);\n    if (loadingMatch) {\n      const progress = tryParsingNumericValue(loadingMatch[1]);\n      const message = loadingMatch[2];\n      if (indicator) {\n        indicator.text = `${chalk.bold(currentPhase)} ${progress}%`;\n      }\n      if (message.startsWith('Copying ')) {\n        copyingFileCount++;\n      }\n      return;\n    }\n    // Install, Debug, Uninstall\n    const phaseMatch = message.match(/------\\s(\\w+) phase\\s------/m);\n    if (phaseMatch) {\n      let phase = phaseMatch[1]?.trim?.();\n      // Remap name\n      phase = PhaseNameMap[phase] ?? phase;\n\n      if (indicator) {\n        if (currentPhase === 'Installing') {\n          const copiedMessage = chalk.gray`Copied ${copyingFileCount} file(s)`;\n          // Emulate Xcode copy file count, this helps us know if app deltas are working.\n          indicator.succeed(`${chalk.bold('Installed')} ${copiedMessage}`);\n        } else {\n          indicator.succeed();\n        }\n      }\n      indicator = ora(phase).start();\n      currentPhase = phase;\n      return;\n    }\n    Log.debug(message);\n  });\n\n  if (output.code !== 0) {\n    if (indicator) {\n      indicator.fail();\n    }\n    // Allow users to unlock their phone and try the launch over again.\n    if (output.error.includes('The device is locked')) {\n      // Get the app name from the binary path.\n      const appName = path.basename(bundle).split('.')[0] ?? 'app';\n      if (\n        !program.nonInteractive &&\n        (await Prompts.confirmAsync({\n          message: `Cannot launch ${appName} because the device is locked. Unlock ${deviceName} to continue...`,\n          initial: true,\n        }))\n      ) {\n        return installOnDeviceAsync(props);\n      } else {\n        throw new CommandError(\n          `Cannot launch ${appName} on ${deviceName} because the device is locked.`\n        );\n      }\n    }\n    throw new CommandError(\n      `Failed to install the app on device. Error in \"ios-deploy\" command: ${output.error}`\n    );\n  } else {\n    if (indicator) {\n      if (currentPhase === 'Launching') {\n        indicator.succeed(`${chalk.bold`Launched`} ${chalk.gray(`on ${deviceName}`)}`);\n      } else {\n        indicator.succeed();\n      }\n    }\n  }\n}\n\nconst PhaseNameMap: Record<string, string> = {\n  Install: 'Installing',\n  Debug: 'Launching',\n  Uninstall: 'Uninstalling',\n};\n\nfunction tryParsingNumericValue(str?: string): number | null {\n  try {\n    return parseInt(str?.match(/\\d+/)?.[0] ?? '-1', 10);\n  } catch {\n    return -1;\n  }\n}\n\nfunction spawnIOSDeployAsync(args: string[], onStdout: (message: string) => void) {\n  return new Promise<{ output: string; error: string; code: number }>(async (resolve, reject) => {\n    const fork = spawn('ios-deploy', args);\n    let output = '';\n    let errorOutput = '';\n    fork.stdout.on('data', (data: Buffer) => {\n      const stringData = data.toString().split(os.EOL);\n      for (let line of stringData) {\n        line = line.trim();\n        if (!line) continue;\n        if (line.match(/Error: /)) {\n          errorOutput = line;\n        } else {\n          output += line;\n          onStdout(line);\n        }\n      }\n    });\n\n    fork.stderr.on('data', (data: Buffer) => {\n      const stringData = data instanceof Buffer ? data.toString() : data;\n      errorOutput += stringData;\n    });\n\n    fork.on('close', (code: number) => {\n      resolve({ output, error: errorOutput, code });\n    });\n  });\n}\n\nexport async function assertInstalledAsync() {\n  if (!(await isInstalledAsync())) {\n    if (\n      await Prompts.confirmAsync({\n        message: `Required package ${chalk.cyan`ios-deploy`} is not installed, would you like to try installing it with homebrew?`,\n        initial: true,\n      })\n    ) {\n      try {\n        await brewInstallAsync();\n        return;\n      } catch (error) {\n        Log.error(`Failed to install ${chalk.bold`ios-deploy`} with homebrew: ${error.message}`);\n      }\n    }\n    // Controlled error message.\n    const error = `Cannot install iOS apps on devices without ${chalk.bold`ios-deploy`} installed globally. Please install it with ${chalk.bold`brew install ios-deploy`} and try again, or build the app with a simulator.`;\n    Log.warn(wrapAnsi(error, process.stdout.columns || 80));\n    throw new SilentError(error);\n  }\n}\n\nasync function brewInstallAsync() {\n  await spawnAsync('brew', ['install', 'ios-deploy'], {\n    stdio: 'inherit',\n  });\n}\n"],"file":"IOSDeploy.js"}