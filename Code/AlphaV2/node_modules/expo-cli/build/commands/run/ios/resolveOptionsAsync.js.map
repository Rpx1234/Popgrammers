{"version":3,"sources":["../../../../src/commands/run/ios/resolveOptionsAsync.ts"],"names":["ignoredPaths","findXcodeProjectPaths","projectRoot","extension","absolute","cwd","ignore","resolveXcodeProject","paths","length","name","isWorkspace","CommandError","isMac","process","platform","getDefaultUserTerminal","REACT_TERMINAL","TERM_PROGRAM","TERM","env","resolveNativeSchemeAsync","scheme","configuration","resolvedScheme","schemes","IOSConfig","BuildScheme","getRunnableSchemesFromXcodeproj","resolvedSchemeName","message","choices","map","value","isApp","type","Target","TargetType","APPLICATION","osType","title","chalk","bold","gray","nonInteractiveHelp","join","find","Log","log","resolveOptionsAsync","options","xcodeProject","port","bundler","reuseExistingPort","defaultPort","path","basename","extname","device","isSimulator","deviceType","startsWith","shouldSkipInitialBundling","shouldStartBundler","buildCache","terminal"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAoBA,MAAMA,YAAY,GAAG,CAAC,4CAAD,CAArB;;AAEA,SAASC,qBAAT,CACEC,WADF,EAEEC,SAFF,EAGY;AACV,SAAO,kBAAU,SAAQA,SAAU,EAA5B,EAA+B;AACpCC,IAAAA,QAAQ,EAAE,IAD0B;AAEpCC,IAAAA,GAAG,EAAEH,WAF+B;AAGpCI,IAAAA,MAAM,EAAEN;AAH4B,GAA/B,CAAP;AAKD;;AAED,SAASO,mBAAT,CAA6BL,WAA7B,EAA+D;AAC7D,MAAIM,KAAK,GAAGP,qBAAqB,CAACC,WAAD,EAAc,aAAd,CAAjC;;AACA,MAAIM,KAAK,CAACC,MAAV,EAAkB;AAChB,WAAO;AACL;AACA;AACAC,MAAAA,IAAI,EAAEF,KAAK,CAAC,CAAD,CAHN;AAIL;AACAG,MAAAA,WAAW,EAAE;AALR,KAAP;AAOD;;AACDH,EAAAA,KAAK,GAAGP,qBAAqB,CAACC,WAAD,EAAc,WAAd,CAA7B;;AACA,MAAIM,KAAK,CAACC,MAAV,EAAkB;AAChB,WAAO;AAAEC,MAAAA,IAAI,EAAEF,KAAK,CAAC,CAAD,CAAb;AAAkBG,MAAAA,WAAW,EAAE;AAA/B,KAAP;AACD;;AACD,QAAM,KAAIC,uBAAJ,EAAkB,uCAAsCV,WAAY,EAApE,CAAN;AACD;;AAED,MAAMW,KAAK,GAAGC,OAAO,CAACC,QAAR,KAAqB,QAAnC;;AAEA,SAASC,sBAAT,GAAsD;AACpD,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA,YAAlB;AAAgCC,IAAAA;AAAhC,MAAyCL,OAAO,CAACM,GAAvD;;AAEA,MAAIH,cAAJ,EAAoB;AAClB,WAAOA,cAAP;AACD;;AAED,MAAIJ,KAAJ,EAAW;AACT,WAAOK,YAAP;AACD;;AAED,SAAOC,IAAP;AACD;;AAED,eAAeE,wBAAf,CACEnB,WADF,EAEE;AAAEoB,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAFF,EAGqD;AACnD,MAAIC,cAAwD,GAAG,IAA/D,CADmD,CAEnD;;AACA,MAAIF,MAAM,KAAK,IAAf,EAAqB;AACnB,UAAMG,OAAO,GAAGC,2BAAUC,WAAV,CAAsBC,+BAAtB,CAAsD1B,WAAtD,EAAmE;AACjFqB,MAAAA;AADiF,KAAnE,CAAhB;;AAGA,QAAI,CAACE,OAAO,CAAChB,MAAb,EAAqB;AACnB,YAAM,KAAIG,uBAAJ,EAAiB,mCAAjB,CAAN;AACD;;AACDY,IAAAA,cAAc,GAAGC,OAAO,CAAC,CAAD,CAAxB;;AACA,QAAIA,OAAO,CAAChB,MAAR,GAAiB,CAArB,EAAwB;AAAA;;AACtB,YAAMoB,kBAAkB,GAAG,MAAM,4BAC/B;AACEC,QAAAA,OAAO,EAAE,iBADX;AAEEC,QAAAA,OAAO,EAAEN,OAAO,CAACO,GAAR,CAAYC,KAAK,IAAI;AAC5B,gBAAMC,KAAK,GACTD,KAAK,CAACE,IAAN,KAAeT,2BAAUU,MAAV,CAAiBC,UAAjB,CAA4BC,WAA3C,IAA0DL,KAAK,CAACM,MAAN,KAAiB,KAD7E;AAEA,iBAAO;AACLN,YAAAA,KAAK,EAAEA,KAAK,CAACvB,IADR;AAEL8B,YAAAA,KAAK,EAAEN,KAAK,GAAGO,iBAAMC,IAAN,CAAWT,KAAK,CAACvB,IAAjB,IAAyB+B,iBAAME,IAAN,CAAW,QAAX,CAA5B,GAAmDV,KAAK,CAACvB;AAFhE,WAAP;AAID,SAPQ;AAFX,OAD+B,EAY/B;AACEkC,QAAAA,kBAAkB,EAAG,iGAAgGnB,OAAO,CAACoB,IAAR,CACnH,IADmH,CAEnH;AAHJ,OAZ+B,CAAjC;AAkBArB,MAAAA,cAAc,oBAAGC,OAAO,CAACqB,IAAR,CAAa,CAAC;AAAEpC,QAAAA;AAAF,OAAD,KAAcmB,kBAAkB,KAAKnB,IAAlD,CAAH,yDAA8D,IAA5E;AACD,KApBD,MAoBO;AACLqC,qBAAIC,GAAJ,CAAS,yCAAwCxB,cAAc,CAACd,IAAK,EAArE;AACD;AACF,GA/BD,MA+BO,IAAIY,MAAJ,EAAY;AACjB;AACA,UAAMG,OAAO,GAAGC,2BAAUC,WAAV,CAAsBC,+BAAtB,CAAsD1B,WAAtD,EAAmE;AACjFqB,MAAAA;AADiF,KAAnE,CAAhB;;AAGAC,IAAAA,cAAc,GAAGC,OAAO,CAACqB,IAAR,CAAa,CAAC;AAAEpC,MAAAA;AAAF,KAAD,KAAcA,IAAI,KAAKY,MAApC,KAA+C;AAAEZ,MAAAA,IAAI,EAAEY;AAAR,KAAhE;AACD;;AAED,SAAOE,cAAP;AACD;;AAEM,eAAeyB,mBAAf,CACL/C,WADK,EAELgD,OAFK,EAG2B;AAAA;;AAChC,QAAMC,YAAY,GAAG5C,mBAAmB,CAACL,WAAD,CAAxC;AAEA,MAAIkD,IAAI,GAAGF,OAAO,CAACG,OAAR,GACP,MAAM,0CAAiBnD,WAAjB,EAA8B;AAAEoD,IAAAA,iBAAiB,EAAE,IAArB;AAA2BC,IAAAA,WAAW,EAAEL,OAAO,CAACE;AAAhD,GAA9B,CADC,GAEP,IAFJ,CAHgC,CAMhC;;AACAF,EAAAA,OAAO,CAACG,OAAR,GAAkB,CAAC,CAACD,IAApB;;AACA,MAAI,CAACA,IAAL,EAAW;AACT;AACAA,IAAAA,IAAI,GAAG,IAAP;AACD;;AAED,QAAM5B,cAAc,oCAAI,MAAMH,wBAAwB,CAACnB,WAAD,EAAcgD,OAAd,CAAlC,yEAClB,oCAAcxB,2BAAUC,WAAV,CAAsBC,+BAApC,EAAqE1B,WAArE,EAAkF;AAChFqB,IAAAA,aAAa,EAAE2B,OAAO,CAAC3B;AADyD,GAAlF,EAEG,CAFH,CADkB,uCAGT;AACPb,IAAAA,IAAI,EAAE8C,IAAI,GAACC,QAAL,CAAcN,YAAY,CAACzC,IAA3B,EAAiC8C,IAAI,GAACE,OAAL,CAAaP,YAAY,CAACzC,IAA1B,CAAjC;AADC,GAHX;AAOA,QAAMiD,MAAM,GAAG,MAAM,8CAAmBT,OAAO,CAACS,MAA3B,EAAmC;AAAEpB,IAAAA,MAAM,EAAEf,cAAc,CAACe;AAAzB,GAAnC,CAArB;AAEA,QAAMqB,WAAW,GACf,EAAE,gBAAgBD,MAAlB,KACAA,MAAM,CAACE,UAAP,CAAkBC,UAAlB,CAA6B,wCAA7B,CAFF;AAIA,QAAMvC,aAAa,GAAG2B,OAAO,CAAC3B,aAAR,IAAyB,OAA/C,CA1BgC,CA2BhC;AACA;AACA;AACA;;AACA,QAAMwC,yBAAyB,GAAGxC,aAAa,KAAK,OAAlB,IAA6B,CAACqC,WAAhE;AACA,SAAO;AACL1D,IAAAA,WADK;AAEL0D,IAAAA,WAFK;AAGLT,IAAAA,YAHK;AAILQ,IAAAA,MAJK;AAKLpC,IAAAA,aAAa,EAAE2B,OAAO,CAAC3B,aAAR,IAAyB,OALnC;AAMLyC,IAAAA,kBAAkB,sBAAEd,OAAO,CAACG,OAAV,+DAAqB,KANlC;AAOLU,IAAAA,yBAPK;AAQLX,IAAAA,IARK;AASLa,IAAAA,UAAU,EAAEf,OAAO,CAACe,UATf;AAULC,IAAAA,QAAQ,EAAElD,sBAAsB,EAV3B;AAWLM,IAAAA,MAAM,EAAEE,cAAc,CAACd;AAXlB,GAAP;AAaD","sourcesContent":["import { IOSConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport { sync as globSync } from 'glob';\nimport * as path from 'path';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport { selectAsync } from '../../../utils/prompts';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { resolvePortAsync } from '../utils/resolvePortAsync';\nimport * as XcodeBuild from './XcodeBuild';\nimport { resolveDeviceAsync } from './resolveDeviceAsync';\n\nexport type XcodeConfiguration = 'Debug' | 'Release';\n\nexport type Options = {\n  device?: string | boolean;\n  port?: number;\n  scheme?: string;\n  configuration?: XcodeConfiguration;\n  bundler?: boolean;\n  install?: boolean;\n  /** Should use derived data for builds. */\n  buildCache: boolean;\n};\n\nexport type ProjectInfo = {\n  isWorkspace: boolean;\n  name: string;\n};\n\nconst ignoredPaths = ['**/@(Carthage|Pods|vendor|node_modules)/**'];\n\nfunction findXcodeProjectPaths(\n  projectRoot: string,\n  extension: 'xcworkspace' | 'xcodeproj'\n): string[] {\n  return globSync(`ios/*.${extension}`, {\n    absolute: true,\n    cwd: projectRoot,\n    ignore: ignoredPaths,\n  });\n}\n\nfunction resolveXcodeProject(projectRoot: string): ProjectInfo {\n  let paths = findXcodeProjectPaths(projectRoot, 'xcworkspace');\n  if (paths.length) {\n    return {\n      // Use full path instead of relative project root so that warnings and errors contain full paths as well, this helps with filtering.\n      // Also helps keep things consistent in monorepos.\n      name: paths[0],\n      // name: path.relative(projectRoot, paths[0]),\n      isWorkspace: true,\n    };\n  }\n  paths = findXcodeProjectPaths(projectRoot, 'xcodeproj');\n  if (paths.length) {\n    return { name: paths[0], isWorkspace: false };\n  }\n  throw new CommandError(`Xcode project not found in project: ${projectRoot}`);\n}\n\nconst isMac = process.platform === 'darwin';\n\nfunction getDefaultUserTerminal(): string | undefined {\n  const { REACT_TERMINAL, TERM_PROGRAM, TERM } = process.env;\n\n  if (REACT_TERMINAL) {\n    return REACT_TERMINAL;\n  }\n\n  if (isMac) {\n    return TERM_PROGRAM;\n  }\n\n  return TERM;\n}\n\nasync function resolveNativeSchemeAsync(\n  projectRoot: string,\n  { scheme, configuration }: { scheme?: string | true; configuration?: XcodeConfiguration }\n): Promise<{ name: string; osType?: string } | null> {\n  let resolvedScheme: { name: string; osType?: string } | null = null;\n  // @ts-ignore\n  if (scheme === true) {\n    const schemes = IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj(projectRoot, {\n      configuration,\n    });\n    if (!schemes.length) {\n      throw new CommandError('No native iOS build schemes found');\n    }\n    resolvedScheme = schemes[0];\n    if (schemes.length > 1) {\n      const resolvedSchemeName = await selectAsync(\n        {\n          message: 'Select a scheme',\n          choices: schemes.map(value => {\n            const isApp =\n              value.type === IOSConfig.Target.TargetType.APPLICATION && value.osType === 'iOS';\n            return {\n              value: value.name,\n              title: isApp ? chalk.bold(value.name) + chalk.gray(' (app)') : value.name,\n            };\n          }),\n        },\n        {\n          nonInteractiveHelp: `--scheme: argument must be provided with a string in non-interactive mode. Valid choices are: ${schemes.join(\n            ', '\n          )}`,\n        }\n      );\n      resolvedScheme = schemes.find(({ name }) => resolvedSchemeName === name) ?? null;\n    } else {\n      Log.log(`Auto selecting only available scheme: ${resolvedScheme.name}`);\n    }\n  } else if (scheme) {\n    // Attempt to match the schemes up so we can open the correct simulator\n    const schemes = IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj(projectRoot, {\n      configuration,\n    });\n    resolvedScheme = schemes.find(({ name }) => name === scheme) || { name: scheme };\n  }\n\n  return resolvedScheme;\n}\n\nexport async function resolveOptionsAsync(\n  projectRoot: string,\n  options: Options\n): Promise<XcodeBuild.BuildProps> {\n  const xcodeProject = resolveXcodeProject(projectRoot);\n\n  let port = options.bundler\n    ? await resolvePortAsync(projectRoot, { reuseExistingPort: true, defaultPort: options.port })\n    : null;\n  // Skip bundling if the port is null\n  options.bundler = !!port;\n  if (!port) {\n    // any random number\n    port = 8081;\n  }\n\n  const resolvedScheme = (await resolveNativeSchemeAsync(projectRoot, options)) ??\n    profileMethod(IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj)(projectRoot, {\n      configuration: options.configuration,\n    })[0] ?? {\n      name: path.basename(xcodeProject.name, path.extname(xcodeProject.name)),\n    };\n\n  const device = await resolveDeviceAsync(options.device, { osType: resolvedScheme.osType });\n\n  const isSimulator =\n    !('deviceType' in device) ||\n    device.deviceType.startsWith('com.apple.CoreSimulator.SimDeviceType.');\n\n  const configuration = options.configuration || 'Debug';\n  // This optimization skips resetting the Metro cache needlessly.\n  // The cache is reset in `../node_modules/react-native/scripts/react-native-xcode.sh` when the\n  // project is running in Debug and built onto a physical device. It seems that this is done because\n  // the script is run from Xcode and unaware of the CLI instance.\n  const shouldSkipInitialBundling = configuration === 'Debug' && !isSimulator;\n  return {\n    projectRoot,\n    isSimulator,\n    xcodeProject,\n    device,\n    configuration: options.configuration || 'Debug',\n    shouldStartBundler: options.bundler ?? false,\n    shouldSkipInitialBundling,\n    port,\n    buildCache: options.buildCache,\n    terminal: getDefaultUserTerminal(),\n    scheme: resolvedScheme.name,\n  };\n}\n"],"file":"resolveOptionsAsync.js"}