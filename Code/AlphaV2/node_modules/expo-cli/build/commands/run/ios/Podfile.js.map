{"version":3,"sources":["../../../../src/commands/run/ios/Podfile.ts"],"names":["getTempPrebuildFolder","projectRoot","path","join","hasNewDependenciesSinceLastBuild","packageChecksums","tempDir","tempPkgJsonPath","fs","pathExistsSync","dependencies","devDependencies","JsonFile","read","hasNewDependencies","hasNewDevDependencies","createPackageChecksums","pkg","hasPackageJsonDependencyListChangedAsync","packages","ensureFile","writeAsync","doesProjectUseCocoaPods","existsSync","isLockfileCreated","podfileLockPath","isPodFolderCreated","podFolderPath","maybePromptToSyncPodsAsync","AbortCommandError","promptToInstallPodsAsync","missingPods","length","Log","log","map","pod","chalk","bold","error","removeSync"],"mappings":"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","sourcesContent":["import { getPackageJson, PackageJSONConfig } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport * as path from 'path';\n\nimport { AbortCommandError } from '../../../CommandError';\nimport Log from '../../../log';\nimport { hashForDependencyMap } from '../../eject/updatePackageJson';\nimport { installCocoaPodsAsync } from '../../utils/CreateApp';\n\nfunction getTempPrebuildFolder(projectRoot: string) {\n  return path.join(projectRoot, '.expo', 'prebuild');\n}\n\ntype PackageChecksums = {\n  dependencies: string;\n  devDependencies: string;\n};\n\nfunction hasNewDependenciesSinceLastBuild(projectRoot: string, packageChecksums: PackageChecksums) {\n  // TODO: Maybe comparing lock files would be better...\n  const tempDir = getTempPrebuildFolder(projectRoot);\n  const tempPkgJsonPath = path.join(tempDir, 'cached-packages.json');\n  if (!fs.pathExistsSync(tempPkgJsonPath)) {\n    return true;\n  }\n  const { dependencies, devDependencies } = JsonFile.read(tempPkgJsonPath);\n  // Only change the dependencies if the normalized hash changes, this helps to reduce meaningless changes.\n  const hasNewDependencies = packageChecksums.dependencies !== dependencies;\n  const hasNewDevDependencies = packageChecksums.devDependencies !== devDependencies;\n\n  return hasNewDependencies || hasNewDevDependencies;\n}\n\nfunction createPackageChecksums(pkg: PackageJSONConfig): PackageChecksums {\n  return {\n    dependencies: hashForDependencyMap(pkg.dependencies || {}),\n    devDependencies: hashForDependencyMap(pkg.devDependencies || {}),\n  };\n}\n\nexport async function hasPackageJsonDependencyListChangedAsync(projectRoot: string) {\n  const pkg = getPackageJson(projectRoot);\n\n  const packages = createPackageChecksums(pkg);\n  const hasNewDependencies = hasNewDependenciesSinceLastBuild(projectRoot, packages);\n\n  // Cache package.json\n  const tempDir = path.join(getTempPrebuildFolder(projectRoot), 'cached-packages.json');\n  await fs.ensureFile(tempDir);\n  await JsonFile.writeAsync(tempDir, packages);\n\n  return hasNewDependencies;\n}\n\nfunction doesProjectUseCocoaPods(projectRoot: string): boolean {\n  return fs.existsSync(path.join(projectRoot, 'ios', 'Podfile'));\n}\n\nfunction isLockfileCreated(projectRoot: string): boolean {\n  const podfileLockPath = path.join(projectRoot, 'ios', 'Podfile.lock');\n  return fs.existsSync(podfileLockPath);\n}\n\nfunction isPodFolderCreated(projectRoot: string): boolean {\n  const podFolderPath = path.join(projectRoot, 'ios', 'Pods');\n  return fs.existsSync(podFolderPath);\n}\n\n// TODO: Same process but with app.config changes + default plugins.\n// This will ensure the user is prompted for extra setup.\nexport default async function maybePromptToSyncPodsAsync(projectRoot: string) {\n  if (!doesProjectUseCocoaPods(projectRoot)) {\n    // Project does not use CocoaPods\n    return;\n  }\n  if (!isLockfileCreated(projectRoot) || !isPodFolderCreated(projectRoot)) {\n    if (!(await installCocoaPodsAsync(projectRoot))) {\n      throw new AbortCommandError();\n    }\n    return;\n  }\n\n  // Getting autolinked packages can be heavy, optimize around checking every time.\n  if (!(await hasPackageJsonDependencyListChangedAsync(projectRoot))) {\n    return;\n  }\n\n  await promptToInstallPodsAsync(projectRoot, []);\n}\n\nasync function promptToInstallPodsAsync(projectRoot: string, missingPods?: string[]) {\n  if (missingPods?.length) {\n    Log.log(\n      `Could not find the following native modules: ${missingPods\n        .map(pod => chalk.bold(pod))\n        .join(', ')}. Did you forget to run \"${chalk.bold('pod install')}\" ?`\n    );\n  }\n\n  try {\n    if (!(await installCocoaPodsAsync(projectRoot))) {\n      throw new AbortCommandError();\n    }\n  } catch (error) {\n    fs.removeSync(path.join(getTempPrebuildFolder(projectRoot), 'cached-packages.json'));\n    throw error;\n  }\n}\n"],"file":"Podfile.js"}