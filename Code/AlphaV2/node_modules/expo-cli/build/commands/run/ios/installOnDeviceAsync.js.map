{"version":3,"sources":["../../../../src/commands/run/ios/installOnDeviceAsync.ts"],"names":["getAppDeltaDirectory","bundleId","deltaFolder","path","join","os","tmpdir","fs","ensureDirSync","installOnDeviceAsync","props","AppleDevice","isEnabled","IOSDeploy","bundle","bundleIdentifier","appDeltaDirectory","udid","deviceName","indicator","runOnDevice","appPath","waitForApp","deltaPath","onProgress","status","isComplete","progress","start","text","chalk","bold","succeed","err","fail","code","appName","basename","split","program","nonInteractive","Prompts","confirmAsync","message","initial","CommandError"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,oBAAT,CAA8BC,QAA9B,EAAwD;AAC7D;AACA;AACA,QAAMC,WAAW,GAAGC,gBAAKC,IAAL,CAAUC,cAAGC,MAAH,EAAV,EAAuB,KAAvB,EAA8B,WAA9B,EAA2CL,QAA3C,CAApB;;AACAM,qBAAGC,aAAH,CAAiBN,WAAjB;;AACA,SAAOA,WAAP;AACD,C,CAED;;;AACO,eAAeO,oBAAf,CAAoCC,KAApC,EAMW;AAChB,MAAI,CAACC,mBAAYC,SAAZ,EAAL,EAA8B;AAC5B,WAAO,MAAMC,SAAS,GAACJ,oBAAV,CAA+BC,KAA/B,CAAb;AACD;;AAED,QAAM;AAAEI,IAAAA,MAAF;AAAUC,IAAAA,gBAAV;AAA4BC,IAAAA,iBAA5B;AAA+CC,IAAAA,IAA/C;AAAqDC,IAAAA;AAArD,MAAoER,KAA1E;AACA,MAAIS,SAAJ;;AAEA,MAAI;AACF;AACA,UAAMR,mBAAYS,WAAZ,CAAwB;AAC5BH,MAAAA,IAD4B;AAE5BI,MAAAA,OAAO,EAAEP,MAFmB;AAG5Bb,MAAAA,QAAQ,EAAEc,gBAHkB;AAI5BO,MAAAA,UAAU,EAAE,KAJgB;AAK5BC,MAAAA,SAAS,EAAEP,iBALiB;;AAM5BQ,MAAAA,UAAU,CAAC;AACTC,QAAAA,MADS;AAETC,QAAAA,UAFS;AAGTC,QAAAA;AAHS,OAAD,EAQP;AACD,YAAI,CAACR,SAAL,EAAgB;AACdA,UAAAA,SAAS,GAAG,gBAAIM,MAAJ,EAAYG,KAAZ,EAAZ;AACD;;AACDT,QAAAA,SAAS,CAACU,IAAV,GAAkB,GAAEC,iBAAMC,IAAN,CAAWN,MAAX,CAAmB,IAAGE,QAAS,GAAnD;;AACA,YAAID,UAAJ,EAAgB;AACdP,UAAAA,SAAS,CAACa,OAAV;AACD;AACF;;AAtB2B,KAAxB,CAAN;AAwBD,GA1BD,CA0BE,OAAOC,GAAP,EAAiB;AACjB,QAAId,SAAJ,EAAe;AACbA,MAAAA,SAAS,CAACe,IAAV;AACD;;AACD,QAAID,GAAG,CAACE,IAAJ,KAAa,cAAjB,EAAiC;AAAA;;AAC/B;AACA,YAAMC,OAAO,4BAAGjC,gBAAKkC,QAAL,CAAcvB,MAAd,EAAsBwB,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,CAAH,yEAA0C,KAAvD;;AACA,UACE,CAACC,qBAAQC,cAAT,KACC,MAAMC,eAAQC,YAAR,CAAqB;AAC1BC,QAAAA,OAAO,EAAG,iBAAgBP,OAAQ,yCAAwClB,UAAW,iBAD3D;AAE1B0B,QAAAA,OAAO,EAAE;AAFiB,OAArB,CADP,CADF,EAME;AACA,eAAOnC,oBAAoB,CAACC,KAAD,CAA3B;AACD;;AACD,YAAM,KAAImC,uBAAJ,EACH,iBAAgBT,OAAQ,OAAMlB,UAAW,gCADtC,CAAN;AAGD;;AACD,UAAMe,GAAN;AACD;AACF","sourcesContent":["import chalk from 'chalk';\nimport program from 'commander';\nimport fs from 'fs-extra';\nimport { Ora } from 'ora';\nimport os from 'os';\nimport path from 'path';\nimport { AppleDevice, Prompts } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport { ora } from '../../../utils/ora';\nimport * as IOSDeploy from './IOSDeploy';\n\n/**\n * Get the app_delta folder for faster subsequent rebuilds on devices.\n *\n * @param bundleId\n * @returns\n */\nexport function getAppDeltaDirectory(bundleId: string): string {\n  // TODO: Maybe use .expo folder instead for debugging\n  // TODO: Reuse existing folder from xcode?\n  const deltaFolder = path.join(os.tmpdir(), 'ios', 'app-delta', bundleId);\n  fs.ensureDirSync(deltaFolder);\n  return deltaFolder;\n}\n\n// To debug: `export DEBUG=expo:xdl:*`\nexport async function installOnDeviceAsync(props: {\n  bundle: string;\n  bundleIdentifier: string;\n  appDeltaDirectory: string;\n  udid: string;\n  deviceName: string;\n}): Promise<void> {\n  if (!AppleDevice.isEnabled()) {\n    return await IOSDeploy.installOnDeviceAsync(props);\n  }\n\n  const { bundle, bundleIdentifier, appDeltaDirectory, udid, deviceName } = props;\n  let indicator: Ora | undefined;\n\n  try {\n    // TODO: Connect for logs\n    await AppleDevice.runOnDevice({\n      udid,\n      appPath: bundle,\n      bundleId: bundleIdentifier,\n      waitForApp: false,\n      deltaPath: appDeltaDirectory,\n      onProgress({\n        status,\n        isComplete,\n        progress,\n      }: {\n        status: string;\n        isComplete: boolean;\n        progress: number;\n      }) {\n        if (!indicator) {\n          indicator = ora(status).start();\n        }\n        indicator.text = `${chalk.bold(status)} ${progress}%`;\n        if (isComplete) {\n          indicator.succeed();\n        }\n      },\n    });\n  } catch (err: any) {\n    if (indicator) {\n      indicator.fail();\n    }\n    if (err.code === 'DeviceLocked') {\n      // Get the app name from the binary path.\n      const appName = path.basename(bundle).split('.')[0] ?? 'app';\n      if (\n        !program.nonInteractive &&\n        (await Prompts.confirmAsync({\n          message: `Cannot launch ${appName} because the device is locked. Unlock ${deviceName} to continue...`,\n          initial: true,\n        }))\n      ) {\n        return installOnDeviceAsync(props);\n      }\n      throw new CommandError(\n        `Cannot launch ${appName} on ${deviceName} because the device is locked.`\n      );\n    }\n    throw err;\n  }\n}\n"],"file":"installOnDeviceAsync.js"}