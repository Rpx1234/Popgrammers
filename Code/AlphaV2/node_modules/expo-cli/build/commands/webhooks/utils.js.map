{"version":3,"sources":["../../../src/commands/webhooks/utils.ts"],"names":["SECRET_MIN_LENGTH","SECRET_MAX_LENGTH","validateSecret","secret","length","generateSecret","randomSecret","crypto","randomBytes","toString","Log","log","chalk","underline","setupAsync","projectRoot","exp","skipSDKVersionRequirement","slug","CommandError","ErrorCodes","MISSING_SLUG","configName","user","UserManager","ensureLoggedInAsync","client","ApiV2","clientForUser","experienceName","owner","username","projects","getAsync","projectNotFoundError","project","error","code","PROJECT_NOT_FOUND"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEA,MAAMA,iBAAiB,GAAG,EAA1B;AACA,MAAMC,iBAAiB,GAAG,IAA1B;;AAIO,SAASC,cAAT,CAAwB;AAAEC,EAAAA;AAAF,CAAxB,EAAwE;AAC7E,MAAIA,MAAJ,EAAY;AACV,2BACEA,MAAM,CAACC,MAAP,IAAiBJ,iBAAjB,IAAsCG,MAAM,CAACC,MAAP,GAAgBH,iBADxD,EAEG,uBAAsBD,iBAAkB,IAAGC,iBAAkB,kBAFhE;AAIA,WAAOE,MAAP;AACD;;AACD,SAAO,IAAP;AACD;;AAEM,SAASE,cAAT,GAA0B;AAC/B;AACA,QAAMC,YAAY,GAAGC,kBAAOC,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,CAArB;;AACAC,iBAAIC,GAAJ,CAAQC,iBAAMC,SAAN,CAAgB,yBAAhB,CAAR;;AACAH,iBAAIC,GAAJ,CAAQL,YAAR;;AACA,SAAOA,YAAP;AACD;;AAEM,eAAeQ,UAAf,CAA0BC,WAA1B,EAA+C;AAAA;;AACpD,QAAM;AAAEC,IAAAA;AAAF,MAAU,yBAAUD,WAAV,EAAuB;AAAEE,IAAAA,yBAAyB,EAAE;AAA7B,GAAvB,CAAhB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWF,GAAjB;;AACA,MAAI,CAACE,IAAL,EAAW;AACT,UAAM,KAAIC,uBAAJ,EACJC,2BAAWC,YADP,EAEH,+BAA8B,8BAAeN,WAAf,EAA4BO,UAAW,EAFlE,CAAN;AAID;;AACD,QAAMC,IAAI,GAAG,MAAMC,mBAAYC,mBAAZ,EAAnB;;AACA,QAAMC,MAAM,GAAGC,aAAMC,aAAN,CAAoBL,IAApB,CAAf;;AACA,QAAMM,cAAc,GAAI,IAAD,cAAIb,GAAG,CAACc,KAAR,mDAAiBP,IAAI,CAACQ,QAAS,IAAGf,GAAG,CAACE,IAAK,EAAlE;;AACA,MAAI;AACF,UAAMc,QAAQ,GAAG,MAAMN,MAAM,CAACO,QAAP,CAAgB,UAAhB,EAA4B;AACjDJ,MAAAA;AADiD,KAA5B,CAAvB;;AAGA,QAAIG,QAAQ,CAAC5B,MAAT,KAAoB,CAAxB,EAA2B;AACzB,YAAM8B,oBAAoB,CAACL,cAAD,CAA1B;AACD;;AACD,UAAMM,OAAO,GAAGH,QAAQ,CAAC,CAAD,CAAxB;AACA,WAAO;AAAEH,MAAAA,cAAF;AAAkBM,MAAAA,OAAlB;AAA2BT,MAAAA;AAA3B,KAAP;AACD,GATD,CASE,OAAOU,KAAP,EAAc;AACd,QAAIA,KAAK,CAACC,IAAN,KAAe,sBAAnB,EAA2C;AACzC,YAAMH,oBAAoB,CAACL,cAAD,CAA1B;AACD,KAFD,MAEO;AACL,YAAMO,KAAN;AACD;AACF;AACF;;AAED,SAASF,oBAAT,CAA8BL,cAA9B,EAAsD;AACpD,SAAO,KAAIV,uBAAJ,EACLC,2BAAWkB,iBADN,EAEJ,WAAUT,cAAe,iKAFrB,CAAP;AAID","sourcesContent":["import { findConfigFile, getConfig } from '@expo/config';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport crypto from 'crypto';\nimport { ApiV2, UserManager } from 'xdl';\n\nimport CommandError, { ErrorCodes } from '../../CommandError';\nimport Log from '../../log';\n\nconst SECRET_MIN_LENGTH = 16;\nconst SECRET_MAX_LENGTH = 1000;\n\nexport type WebhookEvent = 'build';\n\nexport function validateSecret({ secret }: { secret?: string }): string | null {\n  if (secret) {\n    assert(\n      secret.length >= SECRET_MIN_LENGTH && secret.length < SECRET_MAX_LENGTH,\n      `--secret: should be ${SECRET_MIN_LENGTH}-${SECRET_MAX_LENGTH} characters long`\n    );\n    return secret;\n  }\n  return null;\n}\n\nexport function generateSecret() {\n  // Create a 60 characters long secret from 30 random bytes.\n  const randomSecret = crypto.randomBytes(30).toString('hex');\n  Log.log(chalk.underline('Webhook signing secret:'));\n  Log.log(randomSecret);\n  return randomSecret;\n}\n\nexport async function setupAsync(projectRoot: string) {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  const { slug } = exp;\n  if (!slug) {\n    throw new CommandError(\n      ErrorCodes.MISSING_SLUG,\n      `expo.slug is not defined in ${findConfigFile(projectRoot).configName}`\n    );\n  }\n  const user = await UserManager.ensureLoggedInAsync();\n  const client = ApiV2.clientForUser(user);\n  const experienceName = `@${exp.owner ?? user.username}/${exp.slug}`;\n  try {\n    const projects = await client.getAsync('projects', {\n      experienceName,\n    });\n    if (projects.length === 0) {\n      throw projectNotFoundError(experienceName);\n    }\n    const project = projects[0];\n    return { experienceName, project, client };\n  } catch (error) {\n    if (error.code === 'EXPERIENCE_NOT_FOUND') {\n      throw projectNotFoundError(experienceName);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction projectNotFoundError(experienceName: string) {\n  return new CommandError(\n    ErrorCodes.PROJECT_NOT_FOUND,\n    `Project ${experienceName} not found. The project is created the first time you run \\`expo publish\\` or build the project (https://docs.expo.dev/distribution/building-standalone-apps/).`\n  );\n}\n"],"file":"utils.js"}