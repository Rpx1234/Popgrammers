{"version":3,"sources":["../../../src/commands/webhooks/webhooksAsync.ts"],"names":["actionAsync","projectRoot","experienceName","project","client","webhooks","getAsync","id","length","table","CliTable","head","push","map","hook","url","event","Log","log","toString","chalk","bold"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AASO,eAAeA,WAAf,CAA2BC,WAA3B,EAAgD;AACrD,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA,OAAlB;AAA2BC,IAAAA;AAA3B,MAAsC,MAAM,yBAAWH,WAAX,CAAlD;AAEA,QAAMI,QAAQ,GAAG,MAAMD,MAAM,CAACE,QAAP,CAAiB,YAAWH,OAAO,CAACI,EAAG,WAAvC,CAAvB;;AACA,MAAIF,QAAQ,CAACG,MAAb,EAAqB;AACnB,UAAMC,KAAK,GAAG,KAAIC,mBAAJ,EAAa;AAAEC,MAAAA,IAAI,EAAE,CAAC,YAAD,EAAe,KAAf,EAAsB,OAAtB;AAAR,KAAb,CAAd;AACAF,IAAAA,KAAK,CAACG,IAAN,CAAW,GAAGP,QAAQ,CAACQ,GAAT,CAAcC,IAAD,IAAmB,CAACA,IAAI,CAACP,EAAN,EAAUO,IAAI,CAACC,GAAf,EAAoBD,IAAI,CAACE,KAAzB,CAAhC,CAAd;;AACAC,mBAAIC,GAAJ,CAAQT,KAAK,CAACU,QAAN,EAAR;AACD,GAJD,MAIO;AACLF,mBAAIC,GAAJ,CAAS,GAAEE,iBAAMC,IAAN,CAAWnB,cAAX,CAA2B,mBAAtC;;AACAe,mBAAIC,GAAJ,CAAQ,qCAAR;AACD;AACF","sourcesContent":["import chalk from 'chalk';\nimport CliTable from 'cli-table3';\n\nimport Log from '../../log';\nimport { setupAsync, WebhookEvent } from './utils';\n\ntype Webhook = {\n  id: string;\n  url: string;\n  event: WebhookEvent;\n  secret?: string;\n};\n\nexport async function actionAsync(projectRoot: string) {\n  const { experienceName, project, client } = await setupAsync(projectRoot);\n\n  const webhooks = await client.getAsync(`projects/${project.id}/webhooks`);\n  if (webhooks.length) {\n    const table = new CliTable({ head: ['Webhook ID', 'URL', 'Event'] });\n    table.push(...webhooks.map((hook: Webhook) => [hook.id, hook.url, hook.event]));\n    Log.log(table.toString());\n  } else {\n    Log.log(`${chalk.bold(experienceName)} has no webhooks.`);\n    Log.log('Use `expo webhooks:add` to add one.');\n  }\n}\n"],"file":"webhooksAsync.js"}