{"version":3,"sources":["../../../src/commands/webhooks/webhooksUpdateAsync.ts"],"names":["actionAsync","projectRoot","id","url","event","options","secret","project","client","webhook","getAsync","spinner","start","patchAsync","succeed"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AASO,eAAeA,WAAf,CAA2BC,WAA3B,EAAgD;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,GAAN;AAAWC,EAAAA,KAAX;AAAkB,KAAGC;AAArB,CAAhD,EAAyF;AAAA;;AAC9F,yBAAO,OAAOH,EAAP,KAAc,QAArB,EAA+B,2BAA/B;AACA,yBAAOE,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,QAAzC,EAAmD,6BAAnD;AACA,MAAIE,MAAM,GAAG,6BAAeD,OAAf,CAAb;AAEA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAsB,MAAM,yBAAWP,WAAX,CAAlC;AAEA,QAAMQ,OAAO,GAAG,MAAMD,MAAM,CAACE,QAAP,CAAiB,YAAWH,OAAO,CAACL,EAAG,aAAYA,EAAG,EAAtD,CAAtB;AACAE,EAAAA,KAAK,aAAGA,KAAH,2CAAYK,OAAO,CAACL,KAAzB;AACAE,EAAAA,MAAM,cAAGA,MAAH,6CAAaG,OAAO,CAACH,MAA3B;AAEA,QAAMK,OAAO,GAAG,gBAAK,oBAAmBT,EAAG,EAA3B,EAA8BU,KAA9B,EAAhB;AACA,QAAMJ,MAAM,CAACK,UAAP,CAAmB,YAAWN,OAAO,CAACL,EAAG,aAAYA,EAAG,EAAxD,EAA2D;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,KAAP;AAAcE,IAAAA;AAAd,GAA3D,CAAN;AACAK,EAAAA,OAAO,CAACG,OAAR;AACD","sourcesContent":["import assert from 'assert';\n\nimport { ora } from '../../utils/ora';\nimport { setupAsync, validateSecret, WebhookEvent } from './utils';\n\ntype Options = {\n  id?: string;\n  url?: string;\n  event?: WebhookEvent;\n  secret?: string;\n};\n\nexport async function actionAsync(projectRoot: string, { id, url, event, ...options }: Options) {\n  assert(typeof id === 'string', '--id must be a webhook ID');\n  assert(event == null || typeof event === 'string', '--event: string is required');\n  let secret = validateSecret(options);\n\n  const { project, client } = await setupAsync(projectRoot);\n\n  const webhook = await client.getAsync(`projects/${project.id}/webhooks/${id}`);\n  event = event ?? webhook.event;\n  secret = secret ?? webhook.secret;\n\n  const spinner = ora(`Updating webhook ${id}`).start();\n  await client.patchAsync(`projects/${project.id}/webhooks/${id}`, { url, event, secret });\n  spinner.succeed();\n}\n"],"file":"webhooksUpdateAsync.js"}