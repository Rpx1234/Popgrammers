{"version":3,"sources":["../../src/commands/initAsync.ts"],"names":["FEATURED_TEMPLATES","shortName","name","description","isMacOS","process","platform","assertValidName","folderName","validation","CreateApp","validateName","CommandError","chalk","red","isFolderNameForbidden","parseOptions","command","yes","yarn","npm","install","template","assertFolderEmptyAsync","projectRoot","overwrite","message","Log","newLine","nested","SilentError","resolveProjectRootAsync","input","trim","answer","type","initial","validate","path","basename","resolve","nonInteractiveHelp","error","code","green","program","cyan","join","fs","ensureDir","padEnd","str","width","len","Math","max","length","Array","resolveTemplateAsync","resolvedTemplate","version","newestSdkVersion","data","newestSdkReleaseData","Versions","newestReleasedSdkVersionAsync","versionParam","beta","majorVersion","parseInt","includes","templateSpec","registry","escapedName","raw","fetchSpec","descriptionColumn","map","t","optionsPerPage","choices","prompts","separator","value","title","bold","short","actionAsync","incomingProjectRoot","options","deprecatedNameArgument","undefined","AbortCommandError","cwd","npmPackageName","debug","projectName","initialConfig","expo","slug","extractTemplateStep","projectPath","succeed","e","fail","packageManager","resolvePackageManager","isBare","workflow","hasPodsInstalled","needsPodsInstalled","existsSync","installNodeDependenciesAsync","installCocoaPodsAsync","cdPath","getChangeDirectoryPath","addNewLineIfNone","logProjectReadyAsync","logNodeInstallWarning","logCocoaPodsWarning","initGitRepoAsync","installJsDepsStep","root","log","gray","errno","warn","stdio","dim","macOSComment","addBareUpdatesWarningsAsync","didConfigureUpdatesProjectFiles","username","UserManager","getCurrentUsernameAsync","configureUpdatesProjectFilesAsync","exp","skipSDKVersionRequirement","androidManifestPath","AndroidConfig","Paths","getAndroidManifestAsync","androidManifestJSON","Manifest","readAndroidManifestAsync","result","Updates","setUpdatesConfig","writeAndroidManifestAsync","iosSourceRoot","IOSConfig","getSourceRoot","supportingDirectory","plistFilePath","plist","parse","readFileSync","writeFile","build"],"mappings":"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","sourcesContent":["import { getConfig } from '@expo/config';\nimport { AndroidConfig, IOSConfig } from '@expo/config-plugins';\nimport plist from '@expo/plist';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport program from 'commander';\nimport fs from 'fs-extra';\nimport npmPackageArg from 'npm-package-arg';\nimport path from 'path';\nimport stripAnsi from 'strip-ansi';\nimport terminalLink from 'terminal-link';\nimport { UserManager, Versions } from 'xdl';\n\nimport CommandError, { AbortCommandError, SilentError } from '../CommandError';\nimport Log from '../log';\nimport { logNewSection } from '../utils/ora';\nimport prompts, { selectAsync } from '../utils/prompts';\nimport { directoryExistsAsync } from './eject/clearNativeFolder';\nimport * as CreateApp from './utils/CreateApp';\nimport { hasExpoUpdatesInstalledAsync, usesOldExpoUpdatesAsync } from './utils/ProjectUtils';\nimport { extractAndPrepareTemplateAppAsync } from './utils/extractTemplateAppAsync';\n\ntype Options = {\n  template?: string;\n  install: boolean;\n  npm: boolean;\n  yarn: boolean;\n  yes: boolean;\n};\n\nconst FEATURED_TEMPLATES = [\n  '----- Managed workflow -----',\n  {\n    shortName: 'blank',\n    name: 'expo-template-blank',\n    description: 'a minimal app as clean as an empty canvas',\n  },\n  {\n    shortName: 'blank (TypeScript)',\n    name: 'expo-template-blank-typescript',\n    description: 'same as blank but with TypeScript configuration',\n  },\n  {\n    shortName: 'tabs (TypeScript)',\n    name: 'expo-template-tabs',\n    description: 'several example screens and tabs using react-navigation and TypeScript',\n  },\n  '----- Bare workflow -----',\n  {\n    shortName: 'minimal',\n    name: 'expo-template-bare-minimum',\n    description: 'bare and minimal, just the essentials to get you started',\n  },\n];\n\nconst isMacOS = process.platform === 'darwin';\n\nfunction assertValidName(folderName: string) {\n  const validation = CreateApp.validateName(folderName);\n  if (typeof validation === 'string') {\n    throw new CommandError(\n      `Cannot create an app named ${chalk.red(`\"${folderName}\"`)}. ${validation}`\n    );\n  }\n  const isFolderNameForbidden = CreateApp.isFolderNameForbidden(folderName);\n  if (isFolderNameForbidden) {\n    throw new CommandError(\n      `Cannot create an app named ${chalk.red(\n        `\"${folderName}\"`\n      )} because it would conflict with a dependency of the same name.`\n    );\n  }\n}\n\nfunction parseOptions(command: Partial<Options>): Options {\n  return {\n    yes: !!command.yes,\n    yarn: !!command.yarn,\n    npm: !!command.npm,\n    install: !!command.install,\n    template: command.template,\n  };\n}\n\nasync function assertFolderEmptyAsync(projectRoot: string, folderName?: string) {\n  if (!(await CreateApp.assertFolderEmptyAsync({ projectRoot, folderName, overwrite: false }))) {\n    const message = 'Try using a new directory name, or moving these files.';\n    Log.newLine();\n    Log.nested(message);\n    Log.newLine();\n    throw new SilentError(message);\n  }\n}\n\nasync function resolveProjectRootAsync(input?: string): Promise<string> {\n  let name = input?.trim();\n\n  if (!name) {\n    try {\n      const { answer } = await prompts(\n        {\n          type: 'text',\n          name: 'answer',\n          message: 'What would you like to name your app?',\n          initial: 'my-app',\n          validate: name => {\n            const validation = CreateApp.validateName(path.basename(path.resolve(name)));\n            if (typeof validation === 'string') {\n              return 'Invalid project name: ' + validation;\n            }\n            return true;\n          },\n        },\n        {\n          nonInteractiveHelp: 'Pass the project name using the first argument `expo init <name>`',\n        }\n      );\n\n      if (typeof answer === 'string') {\n        name = answer.trim();\n      }\n    } catch (error: any) {\n      // Handle the aborted message in a custom way.\n      if (error.code !== 'ABORTED') {\n        throw error;\n      }\n    }\n  }\n\n  if (!name) {\n    const message = [\n      '',\n      'Please choose your app name:',\n      `  ${chalk.green(`${program.name()} init`)} ${chalk.cyan('<app-name>')}`,\n      '',\n      `Run ${chalk.green(`${program.name()} init --help`)} for more info`,\n      '',\n    ].join('\\n');\n    Log.nested(message);\n    throw new SilentError(message);\n  }\n\n  const projectRoot = path.resolve(name);\n  const folderName = path.basename(projectRoot);\n\n  assertValidName(folderName);\n\n  await fs.ensureDir(projectRoot);\n\n  await assertFolderEmptyAsync(projectRoot, folderName);\n\n  return projectRoot;\n}\n\nfunction padEnd(str: string, width: number): string {\n  // Pulled from commander for overriding\n  const len = Math.max(0, width - stripAnsi(str).length);\n  return str + Array(len + 1).join(' ');\n}\n\nasync function resolveTemplateAsync(resolvedTemplate?: string | null) {\n  const {\n    version: newestSdkVersion,\n    data: newestSdkReleaseData,\n  } = await Versions.newestReleasedSdkVersionAsync();\n\n  // If the user is opting into a beta then we need to append the template tag explicitly\n  // in order to not fall back to the latest tag for templates.\n  let versionParam = '';\n  if (newestSdkReleaseData?.beta) {\n    const majorVersion = parseInt(newestSdkVersion, 10);\n    versionParam = `@sdk-${majorVersion}`;\n\n    // If the --template flag is provided without an explicit version, then opt-in to\n    // the beta version\n    if (resolvedTemplate && !resolvedTemplate.includes('@')) {\n      resolvedTemplate = `${resolvedTemplate}${versionParam}`;\n    }\n  }\n\n  let templateSpec;\n  if (resolvedTemplate) {\n    templateSpec = npmPackageArg(resolvedTemplate);\n\n    // For backwards compatibility, 'blank' and 'tabs' are aliases for\n    // 'expo-template-blank' and 'expo-template-tabs', respectively.\n    if (\n      templateSpec.name &&\n      templateSpec.registry &&\n      ['blank', 'tabs', 'bare-minimum'].includes(templateSpec.name)\n    ) {\n      templateSpec.escapedName = `expo-template-${templateSpec.name}`;\n      templateSpec.name = templateSpec.escapedName;\n      templateSpec.raw = templateSpec.escapedName;\n    }\n\n    return `${templateSpec.name ?? templateSpec.raw}@${templateSpec.fetchSpec ?? 'latest'}`;\n  }\n\n  const descriptionColumn =\n    Math.max(...FEATURED_TEMPLATES.map(t => (typeof t === 'object' ? t.shortName.length : 0))) + 2;\n  const template = await selectAsync(\n    {\n      message: 'Choose a template:',\n      optionsPerPage: 20,\n      choices: FEATURED_TEMPLATES.map(template => {\n        if (typeof template === 'string') {\n          return prompts.separator(template);\n        } else {\n          return {\n            value: template.name,\n            title:\n              chalk.bold(padEnd(template.shortName, descriptionColumn)) +\n              template.description.trim(),\n            short: template.name,\n          };\n        }\n      }),\n    },\n    {\n      nonInteractiveHelp:\n        '--template: argument is required in non-interactive mode. Valid choices are: \"blank\", \"tabs\", \"bare-minimum\" or any custom template (name of npm package).',\n    }\n  );\n  return `${template}${versionParam}`;\n}\n\nexport async function actionAsync(incomingProjectRoot: string, command: Partial<Options>) {\n  const options = parseOptions(command);\n\n  const deprecatedNameArgument =\n    typeof (command as any).name === 'string' ? (command as any).name : undefined;\n  if (deprecatedNameArgument) {\n    // Commander doesn't support using the `--name` argument so it shouldn't have been implemented in the first place.\n    // Using `--name` will cause other parts of commander to break since it expects a function and `this.name` would be a string.\n\n    Log.error(chalk`Deprecated: Use {bold expo init [name]} instead of {bold --name [name]}.`);\n    throw new AbortCommandError();\n  }\n\n  // Resolve the name, and projectRoot\n  let projectRoot: string;\n  if (!incomingProjectRoot && options.yes) {\n    projectRoot = path.resolve(process.cwd());\n    const folderName = path.basename(projectRoot);\n    assertValidName(folderName);\n    await assertFolderEmptyAsync(projectRoot, folderName);\n  } else {\n    projectRoot = await resolveProjectRootAsync(incomingProjectRoot);\n  }\n\n  let resolvedTemplate: string | null = options.template ?? null;\n  // @ts-ignore: This guards against someone passing --template without a name after it.\n  if (resolvedTemplate === true) {\n    throw new CommandError('Please specify the template name');\n  }\n\n  // Download and sync templates\n  // TODO(Bacon): revisit\n  if (options.yes && !resolvedTemplate) {\n    resolvedTemplate = 'blank';\n  }\n\n  // Supported templates:\n  // `-t tabs` (tabs, blank, bare-minimum, expo-template-blank-typescript)\n  // `-t tabs@40`\n  // `-t tabs@sdk-40`\n  // `-t tabs@latest`\n  // `-t expo-template-tabs@latest`\n  const npmPackageName = await resolveTemplateAsync(resolvedTemplate);\n\n  Log.debug(`Using template: ${npmPackageName}`);\n\n  const projectName = path.basename(projectRoot);\n  const initialConfig: Record<string, any> & { expo: any } = {\n    // In older templates the `.name` property is set when extracting template files. This is because older templates have the `.name` property set to `HelloWorld`.\n    // Newer templates don't need the `.name` property set, so we don't bother with setting it.\n    expo: {\n      name: projectName,\n      slug: projectName,\n    },\n  };\n\n  const extractTemplateStep = logNewSection('Downloading template.');\n  let projectPath;\n  try {\n    projectPath = await extractAndPrepareTemplateAppAsync(\n      npmPackageName,\n      projectRoot,\n      initialConfig\n    );\n    extractTemplateStep.succeed('Downloaded template.');\n  } catch (e) {\n    extractTemplateStep.fail('Something went wrong while downloading and extracting the template.');\n    throw e;\n  }\n\n  // Install dependencies\n\n  const packageManager = CreateApp.resolvePackageManager(options);\n\n  // TODO(Bacon): not this\n  const isBare = await directoryExistsAsync(path.join(projectRoot, 'ios'));\n  const workflow = isBare ? 'bare' : 'managed';\n\n  let hasPodsInstalled: boolean = false;\n  const needsPodsInstalled = fs.existsSync(path.join(projectRoot, 'ios/Podfile'));\n  if (options.install) {\n    await installNodeDependenciesAsync(projectRoot, packageManager);\n    if (needsPodsInstalled) {\n      hasPodsInstalled = await CreateApp.installCocoaPodsAsync(projectRoot);\n    }\n  }\n\n  const cdPath = CreateApp.getChangeDirectoryPath(projectRoot);\n\n  // Log info\n\n  Log.addNewLineIfNone();\n\n  await logProjectReadyAsync(projectRoot, {\n    cdPath,\n    packageManager,\n    workflow,\n  });\n\n  // Log a warning about needing to install node modules\n  if (!options.install) {\n    logNodeInstallWarning(cdPath, packageManager);\n  }\n  if (needsPodsInstalled && !hasPodsInstalled) {\n    logCocoaPodsWarning(cdPath);\n  }\n\n  // Initialize Git at the end to ensure all lock files are committed.\n  await initGitRepoAsync(projectPath);\n}\n\nasync function installNodeDependenciesAsync(projectRoot: string, packageManager: 'yarn' | 'npm') {\n  const installJsDepsStep = logNewSection('Installing JavaScript dependencies.');\n  try {\n    await CreateApp.installNodeDependenciesAsync(projectRoot, packageManager);\n    installJsDepsStep.succeed('Installed JavaScript dependencies.');\n  } catch {\n    installJsDepsStep.fail(\n      `Something went wrong installing JavaScript dependencies. Check your ${packageManager} logs. Continuing to initialize the app.`\n    );\n  }\n}\n\n/**\n * Check if the project is inside an existing Git repo, if so bail out,\n * if not then create a new git repo and commit the initial files.\n *\n * @returns `true` if git is setup.\n */\nasync function initGitRepoAsync(root: string): Promise<boolean> {\n  // let's see if we're in a git tree\n  try {\n    await spawnAsync('git', ['rev-parse', '--is-inside-work-tree'], {\n      cwd: root,\n    });\n    // Log a light notice if we're in a git tree.\n    Log.log(\n      chalk.gray(`Project is already inside of a git repo, skipping ${chalk.bold`git init`}.`)\n    );\n    // Bail out if inside git repo, this makes monorepos a bit easier to setup.\n    return true;\n  } catch (e: any) {\n    if (e.errno === 'ENOENT') {\n      Log.warn('Unable to initialize git repo. `git` not in PATH.');\n      return false;\n    }\n  }\n\n  // not in git tree, so let's init\n  try {\n    await spawnAsync('git', ['init'], { cwd: root });\n    Log.debug('Initialized a git repository.');\n\n    await spawnAsync('git', ['add', '--all'], { cwd: root, stdio: 'ignore' });\n    await spawnAsync('git', ['commit', '-m', 'Created a new Expo app'], {\n      cwd: root,\n      stdio: 'ignore',\n    });\n\n    return true;\n  } catch (e: any) {\n    Log.debug('git error:', e);\n    // no-op -- this is just a convenience and we don't care if it fails\n    return false;\n  }\n}\n\nfunction logNodeInstallWarning(cdPath: string, packageManager: 'yarn' | 'npm'): void {\n  Log.newLine();\n  Log.nested(`⚠️  Before running your app, make sure you have node modules installed:`);\n  Log.nested('');\n  if (cdPath) {\n    // In the case of --yes the project can be created in place so there would be no need to change directories.\n    Log.nested(`  cd ${cdPath}/`);\n  }\n  Log.nested(`  ${packageManager === 'npm' ? 'npm install' : 'yarn'}`);\n  Log.nested('');\n}\n\nfunction logCocoaPodsWarning(cdPath: string): void {\n  if (process.platform !== 'darwin') {\n    return;\n  }\n  Log.newLine();\n  Log.nested(\n    `⚠️  Before running your app on iOS, make sure you have CocoaPods installed and initialize the project:`\n  );\n  Log.nested('');\n  if (cdPath) {\n    // In the case of --yes the project can be created in place so there would be no need to change directories.\n    Log.nested(`  cd ${cdPath}/`);\n  }\n  Log.nested(`  npx pod-install`);\n  Log.nested('');\n}\n\nasync function logProjectReadyAsync(\n  projectRoot: string,\n  {\n    cdPath,\n    packageManager,\n    workflow,\n  }: {\n    cdPath: string;\n    packageManager: string;\n    workflow: 'managed' | 'bare';\n  }\n) {\n  Log.nested(chalk.bold(`✅ Your project is ready!`));\n  Log.newLine();\n\n  // empty string if project was created in current directory\n  if (cdPath) {\n    Log.nested(\n      `To run your project, navigate to the directory and run one of the following ${packageManager} commands.`\n    );\n    Log.newLine();\n    Log.nested(`- ${chalk.bold('cd ' + cdPath)}`);\n  } else {\n    Log.nested(`To run your project, run one of the following ${packageManager} commands.`);\n    Log.newLine();\n  }\n\n  if (workflow === 'managed') {\n    Log.nested(\n      `- ${chalk.bold(`${packageManager} start`)} ${chalk.dim(\n        `# you can open iOS, Android, or web from here, or run them directly with the commands below.`\n      )}`\n    );\n  }\n  Log.nested(`- ${chalk.bold(packageManager === 'npm' ? 'npm run android' : 'yarn android')}`);\n\n  let macOSComment = '';\n  if (!isMacOS && workflow === 'bare') {\n    macOSComment =\n      ' # you need to use macOS to build the iOS project - use managed workflow if you need to do iOS development without a Mac';\n  } else if (!isMacOS && workflow === 'managed') {\n    macOSComment = ' # requires an iOS device or macOS for access to an iOS simulator';\n  }\n  Log.nested(\n    `- ${chalk.bold(packageManager === 'npm' ? 'npm run ios' : 'yarn ios')}${macOSComment}`\n  );\n\n  Log.nested(`- ${chalk.bold(packageManager === 'npm' ? 'npm run web' : 'yarn web')}`);\n\n  if (workflow === 'bare') {\n    Log.newLine();\n    Log.nested(\n      `💡 You can also open up the projects in the ${chalk.bold('ios')} and ${chalk.bold(\n        'android'\n      )} directories with their respective IDEs.`\n    );\n\n    await addBareUpdatesWarningsAsync(projectRoot);\n\n    // TODO: add equivalent of this or some command to wrap it:\n    // # ios\n    // $ open -a Xcode ./ios/{PROJECT_NAME}.xcworkspace\n    // # android\n    // $ open -a /Applications/Android\\\\ Studio.app ./android\n  }\n}\n\nasync function addBareUpdatesWarningsAsync(projectRoot: string) {\n  if (!(await hasExpoUpdatesInstalledAsync(projectRoot))) {\n    return;\n  }\n\n  if (await usesOldExpoUpdatesAsync(projectRoot)) {\n    Log.nested(\n      `🚀 ${terminalLink(\n        'expo-updates',\n        'https://github.com/expo/expo/blob/main/packages/expo-updates/README.md'\n      )} has been configured in your project. Before you do a release build, make sure you run ${chalk.bold(\n        'expo publish'\n      )}. ${terminalLink('Learn more.', 'https://expo.fyi/release-builds-with-expo-updates')}`\n    );\n    return;\n  }\n\n  let didConfigureUpdatesProjectFiles: boolean = false;\n  const username = await UserManager.getCurrentUsernameAsync();\n  if (username) {\n    try {\n      await configureUpdatesProjectFilesAsync(projectRoot, username);\n      didConfigureUpdatesProjectFiles = true;\n    } catch {}\n  }\n\n  if (didConfigureUpdatesProjectFiles) {\n    Log.nested(\n      `🚀 ${terminalLink(\n        'expo-updates',\n        'https://github.com/expo/expo/blob/main/packages/expo-updates/README.md'\n      )} has been configured in your project. If you publish this project under a different user account than ${chalk.bold(\n        username\n      )}, you'll need to update the configuration in Expo.plist and AndroidManifest.xml before making a release build.`\n    );\n  } else {\n    Log.nested(\n      `🚀 ${terminalLink(\n        'expo-updates',\n        'https://github.com/expo/expo/blob/main/packages/expo-updates/README.md'\n      )} has been installed in your project. Before you do a release build, you'll need to configure a few values in Expo.plist and AndroidManifest.xml in order for updates to work.`\n    );\n  }\n}\n\nasync function configureUpdatesProjectFilesAsync(projectRoot: string, username: string) {\n  // skipSDKVersionRequirement here so that this will work when you use the\n  // --no-install flag. the tradeoff is that the SDK version field won't be\n  // filled in, but we should be getting rid of that for expo-updates ASAP\n  // anyways.\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  // apply Android config\n  const androidManifestPath = await AndroidConfig.Paths.getAndroidManifestAsync(projectRoot);\n  const androidManifestJSON = await AndroidConfig.Manifest.readAndroidManifestAsync(\n    androidManifestPath\n  );\n  const result = await AndroidConfig.Updates.setUpdatesConfig(\n    projectRoot,\n    exp,\n    androidManifestJSON,\n    username\n  );\n  await AndroidConfig.Manifest.writeAndroidManifestAsync(androidManifestPath, result);\n\n  // apply iOS config\n  const iosSourceRoot = IOSConfig.Paths.getSourceRoot(projectRoot);\n  const supportingDirectory = path.join(iosSourceRoot, 'Supporting');\n\n  const plistFilePath = path.join(supportingDirectory, 'Expo.plist');\n  let data = plist.parse(fs.readFileSync(plistFilePath, 'utf8'));\n  data = IOSConfig.Updates.setUpdatesConfig(projectRoot, exp, data, username);\n\n  await fs.writeFile(plistFilePath, plist.build(data));\n}\n"],"file":"initAsync.js"}