{"version":3,"sources":["../../../src/commands/fetch/fetchIosCertsAsync.ts"],"names":["actionAsync","projectRoot","inProjectDir","filename","path","resolve","bundleIdentifier","ctx","Context","init","app","accountName","projectOwner","projectName","manifest","slug","Log","log","appCredentials","ios","getAppCredentials","pushCredentials","getPushKey","distCredentials","getDistCert","certP12","certPassword","certPrivateSigningKey","apnsKeyId","apnsKeyP8","pushP12","pushPassword","provisioningProfile","teamId","credentials","undefined","distPath","fs","writeFile","Buffer","from","distPrivateKeyPath","apnsKeyP8Path","pushPath","provisioningProfilePath","chalk","bold","yellow","e","CommandError"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\n\nimport CommandError from '../../CommandError';\nimport { Context } from '../../credentials/context';\nimport Log from '../../log';\nimport { getOrPromptForBundleIdentifier } from '../utils/getOrPromptApplicationId';\n\nexport async function actionAsync(projectRoot: string): Promise<void> {\n  const inProjectDir = (filename: string): string => path.resolve(projectRoot, filename);\n\n  const bundleIdentifier = await getOrPromptForBundleIdentifier(projectRoot);\n\n  try {\n    const ctx = new Context();\n    await ctx.init(projectRoot);\n\n    const app = {\n      accountName: ctx.projectOwner,\n      projectName: ctx.manifest.slug,\n      bundleIdentifier,\n    };\n    Log.log(\n      `Retrieving iOS credentials for @${app.accountName}/${app.projectName} (${bundleIdentifier})`\n    );\n    const appCredentials = await ctx.ios.getAppCredentials(app);\n    const pushCredentials = await ctx.ios.getPushKey(app);\n    const distCredentials = await ctx.ios.getDistCert(app);\n\n    const { certP12, certPassword, certPrivateSigningKey } = distCredentials ?? {};\n    const { apnsKeyId, apnsKeyP8 } = pushCredentials ?? {};\n    const { pushP12, pushPassword, provisioningProfile, teamId } =\n      appCredentials?.credentials ?? {};\n\n    if (teamId !== undefined) {\n      Log.log(`These credentials are associated with Apple Team ID: ${teamId}`);\n    }\n    if (certP12) {\n      const distPath = inProjectDir(`${app.projectName}_dist.p12`);\n      await fs.writeFile(distPath, Buffer.from(certP12, 'base64'));\n    }\n    if (certPrivateSigningKey) {\n      const distPrivateKeyPath = inProjectDir(`${app.projectName}_dist_cert_private.key`);\n      await fs.writeFile(distPrivateKeyPath, certPrivateSigningKey);\n    }\n    if (certP12 || certPrivateSigningKey) {\n      Log.log('Wrote distribution cert credentials to disk.');\n    }\n    if (apnsKeyP8) {\n      const apnsKeyP8Path = inProjectDir(`${app.projectName}_apns_key.p8`);\n      await fs.writeFile(apnsKeyP8Path, apnsKeyP8);\n      Log.log('Wrote push key credentials to disk.');\n    }\n    if (pushP12) {\n      const pushPath = inProjectDir(`${app.projectName}_push.p12`);\n      await fs.writeFile(pushPath, Buffer.from(pushP12, 'base64'));\n    }\n    if (pushP12) {\n      Log.log('Wrote push cert credentials to disk.');\n    }\n    if (provisioningProfile) {\n      const provisioningProfilePath = path.resolve(\n        projectRoot,\n        `${app.projectName}.mobileprovision`\n      );\n      await fs.writeFile(provisioningProfilePath, Buffer.from(provisioningProfile, 'base64'));\n      Log.log('Wrote provisioning profile to disk');\n    }\n    Log.log(`Save these important values as well:\n\nDistribution P12 password: ${\n      certPassword ? chalk.bold(certPassword) : chalk.yellow('(not available)')\n    }\nPush Key ID:               ${apnsKeyId ? chalk.bold(apnsKeyId) : chalk.yellow('(not available)')}\nPush P12 password:         ${\n      pushPassword ? chalk.bold(pushPassword) : chalk.yellow('(not available)')\n    }\n`);\n  } catch (e) {\n    throw new CommandError(\n      'Unable to fetch credentials for this project. Are you sure they exist?'\n    );\n  }\n\n  Log.log('All done!');\n}\n"],"file":"fetchIosCertsAsync.js"}