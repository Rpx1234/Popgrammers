{"version":3,"sources":["../../../src/commands/fetch/fetchAndroidUploadCertAsync.ts"],"names":["actionAsync","projectRoot","options","ctx","Context","init","nonInteractive","parent","keystorePath","path","resolve","manifest","slug","uploadKeyFilename","uploadKeyPath","experienceName","projectOwner","view","DownloadKeystore","outputPath","quiet","keystore","android","fetchKeystore","Log","log","AndroidCredentials","exportCertBase64","keystorePassword","keyAlias","warn","fs","remove"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEO,eAAeA,WAAf,CAA2BC,WAA3B,EAAgDC,OAAhD,EAAiF;AAAA;;AACtF,QAAMC,GAAG,GAAG,KAAIC,sBAAJ,GAAZ;AACA,QAAMD,GAAG,CAACE,IAAJ,CAASJ,WAAT,EAAsB;AAC1BK,IAAAA,cAAc,qBAAEJ,OAAO,CAACK,MAAV,oDAAE,gBAAgBD;AADN,GAAtB,CAAN;AAIA,QAAME,YAAY,GAAGC,IAAI,GAACC,OAAL,CAAaT,WAAb,EAA2B,GAAEE,GAAG,CAACQ,QAAJ,CAAaC,IAAK,UAA/C,CAArB;AAEA,QAAMC,iBAAiB,GAAI,GAAEV,GAAG,CAACQ,QAAJ,CAAaC,IAAK,kBAA/C;AACA,QAAM,2CAA6BX,WAA7B,EAA0CY,iBAA1C,CAAN;AACA,QAAMC,aAAa,GAAGL,IAAI,GAACC,OAAL,CAAaT,WAAb,EAA0BY,iBAA1B,CAAtB;;AAEA,MAAI;AACF,6BAAWV,GAAG,CAACQ,QAAJ,CAAaC,IAAxB;AACA,UAAMG,cAAc,GAAI,IAAGZ,GAAG,CAACa,YAAa,IAAGb,GAAG,CAACQ,QAAJ,CAAaC,IAAK,EAAjE;AACA,UAAMK,IAAI,GAAG,KAAIC,mCAAJ,EAAqBH,cAArB,EAAqC;AAChDI,MAAAA,UAAU,EAAEX,YADoC;AAEhDY,MAAAA,KAAK,EAAE;AAFyC,KAArC,CAAb;AAIA,UAAM,oCAAsBjB,GAAtB,EAA2Bc,IAA3B,CAAN;AACA,UAAMI,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,OAAJ,CAAYC,aAAZ,CAA0BR,cAA1B,CAAvB;;AAEA,QAAIM,QAAJ,EAAc;AACZG,qBAAIC,GAAJ,CAAS,yBAAwBX,aAAc,EAA/C;;AACA,YAAMY,0BAAmBC,gBAAnB,CACJ;AACEnB,QAAAA,YADF;AAEEoB,QAAAA,gBAAgB,EAAEP,QAAQ,CAACO,gBAF7B;AAGEC,QAAAA,QAAQ,EAAER,QAAQ,CAACQ;AAHrB,OADI,EAMJf,aANI,CAAN;AAQD,KAVD,MAUO;AACLU,qBAAIM,IAAJ,CAAS,iDAAT;AACD;AACF,GAvBD,SAuBU;AACR,UAAMC,EAAE,GAACC,MAAH,CAAUxB,YAAV,CAAN;AACD;AACF","sourcesContent":["import * as fs from 'fs-extra';\nimport * as path from 'path';\nimport { AndroidCredentials } from 'xdl';\n\nimport { Context } from '../../credentials';\nimport { runCredentialsManager } from '../../credentials/route';\nimport { DownloadKeystore } from '../../credentials/views/AndroidKeystore';\nimport Log from '../../log';\nimport { assertSlug, maybeRenameExistingFileAsync, Options } from './utils';\n\nexport async function actionAsync(projectRoot: string, options: Options): Promise<void> {\n  const ctx = new Context();\n  await ctx.init(projectRoot, {\n    nonInteractive: options.parent?.nonInteractive,\n  });\n\n  const keystorePath = path.resolve(projectRoot, `${ctx.manifest.slug}.tmp.jks`);\n\n  const uploadKeyFilename = `${ctx.manifest.slug}_upload_cert.pem`;\n  await maybeRenameExistingFileAsync(projectRoot, uploadKeyFilename);\n  const uploadKeyPath = path.resolve(projectRoot, uploadKeyFilename);\n\n  try {\n    assertSlug(ctx.manifest.slug);\n    const experienceName = `@${ctx.projectOwner}/${ctx.manifest.slug}`;\n    const view = new DownloadKeystore(experienceName, {\n      outputPath: keystorePath,\n      quiet: true,\n    });\n    await runCredentialsManager(ctx, view);\n    const keystore = await ctx.android.fetchKeystore(experienceName);\n\n    if (keystore) {\n      Log.log(`Writing upload key to ${uploadKeyPath}`);\n      await AndroidCredentials.exportCertBase64(\n        {\n          keystorePath,\n          keystorePassword: keystore.keystorePassword,\n          keyAlias: keystore.keyAlias,\n        },\n        uploadKeyPath\n      );\n    } else {\n      Log.warn('There is no valid Keystore defined for this app');\n    }\n  } finally {\n    await fs.remove(keystorePath);\n  }\n}\n"],"file":"fetchAndroidUploadCertAsync.js"}