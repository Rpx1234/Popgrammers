{"version":3,"sources":["../../../src/commands/fetch/fetchAndroidHashesAsync.ts"],"names":["actionAsync","projectRoot","options","ctx","Context","init","nonInteractive","parent","outputPath","path","resolve","manifest","slug","experienceName","projectOwner","view","DownloadKeystore","quiet","keystore","android","fetchKeystore","AndroidCredentials","logKeystoreHashes","keystorePath","keystorePassword","keyAlias","keyPassword","Log","log","warn","fs","remove"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEO,eAAeA,WAAf,CAA2BC,WAA3B,EAAgDC,OAAhD,EAAiF;AAAA;;AACtF,QAAMC,GAAG,GAAG,KAAIC,sBAAJ,GAAZ;AACA,QAAMD,GAAG,CAACE,IAAJ,CAASJ,WAAT,EAAsB;AAC1BK,IAAAA,cAAc,qBAAEJ,OAAO,CAACK,MAAV,oDAAE,gBAAgBD;AADN,GAAtB,CAAN;AAGA,QAAME,UAAU,GAAGC,IAAI,GAACC,OAAL,CAAaT,WAAb,EAA2B,GAAEE,GAAG,CAACQ,QAAJ,CAAaC,IAAK,UAA/C,CAAnB;;AACA,MAAI;AACF,6BAAWT,GAAG,CAACQ,QAAJ,CAAaC,IAAxB;AACA,UAAMC,cAAc,GAAI,IAAGV,GAAG,CAACW,YAAa,IAAGX,GAAG,CAACQ,QAAJ,CAAaC,IAAK,EAAjE;AACA,UAAMG,IAAI,GAAG,KAAIC,mCAAJ,EAAqBH,cAArB,EAAqC;AAChDL,MAAAA,UADgD;AAEhDS,MAAAA,KAAK,EAAE;AAFyC,KAArC,CAAb;AAIA,UAAM,oCAAsBd,GAAtB,EAA2BY,IAA3B,CAAN;AACA,UAAMG,QAAQ,GAAG,MAAMf,GAAG,CAACgB,OAAJ,CAAYC,aAAZ,CAA0BP,cAA1B,CAAvB;;AAEA,QAAIK,QAAJ,EAAc;AACZ,YAAMG,0BAAmBC,iBAAnB,CAAqC;AACzCC,QAAAA,YAAY,EAAEf,UAD2B;AAEzCgB,QAAAA,gBAAgB,EAAEN,QAAQ,CAACM,gBAFc;AAGzCC,QAAAA,QAAQ,EAAEP,QAAQ,CAACO,QAHsB;AAIzCC,QAAAA,WAAW,EAAER,QAAQ,CAACQ;AAJmB,OAArC,CAAN;;AAMAC,qBAAIC,GAAJ,CACG,mMADH;AAGD,KAVD,MAUO;AACLD,qBAAIE,IAAJ,CAAS,iDAAT;AACD;AACF,GAvBD,SAuBU;AACR,UAAMC,EAAE,GAACC,MAAH,CAAUvB,UAAV,CAAN;AACD;AACF","sourcesContent":["import * as fs from 'fs-extra';\nimport * as path from 'path';\nimport { AndroidCredentials } from 'xdl';\n\nimport { Context } from '../../credentials';\nimport { runCredentialsManager } from '../../credentials/route';\nimport { DownloadKeystore } from '../../credentials/views/AndroidKeystore';\nimport Log from '../../log';\nimport { assertSlug, Options } from './utils';\n\nexport async function actionAsync(projectRoot: string, options: Options): Promise<void> {\n  const ctx = new Context();\n  await ctx.init(projectRoot, {\n    nonInteractive: options.parent?.nonInteractive,\n  });\n  const outputPath = path.resolve(projectRoot, `${ctx.manifest.slug}.tmp.jks`);\n  try {\n    assertSlug(ctx.manifest.slug);\n    const experienceName = `@${ctx.projectOwner}/${ctx.manifest.slug}`;\n    const view = new DownloadKeystore(experienceName, {\n      outputPath,\n      quiet: true,\n    });\n    await runCredentialsManager(ctx, view);\n    const keystore = await ctx.android.fetchKeystore(experienceName);\n\n    if (keystore) {\n      await AndroidCredentials.logKeystoreHashes({\n        keystorePath: outputPath,\n        keystorePassword: keystore.keystorePassword,\n        keyAlias: keystore.keyAlias,\n        keyPassword: keystore.keyPassword,\n      });\n      Log.log(\n        `\\nNote: if you are using Google Play signing, this app will be signed with a different key after publishing to the store, and you'll need to use the hashes displayed in the Google Play console.`\n      );\n    } else {\n      Log.warn('There is no valid Keystore defined for this app');\n    }\n  } finally {\n    await fs.remove(outputPath);\n  }\n}\n"],"file":"fetchAndroidHashesAsync.js"}