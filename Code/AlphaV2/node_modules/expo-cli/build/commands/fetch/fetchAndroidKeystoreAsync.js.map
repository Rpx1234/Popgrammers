{"version":3,"sources":["../../../src/commands/fetch/fetchAndroidKeystoreAsync.ts"],"names":["actionAsync","projectRoot","options","ctx","Context","init","nonInteractive","parent","keystoreFilename","manifest","slug","backupKeystoreOutputPath","path","resolve","experienceName","projectOwner","DownloadKeystore","outputPath","displayCredentials"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEO,eAAeA,WAAf,CAA2BC,WAA3B,EAAgDC,OAAhD,EAAiF;AAAA;;AACtF,QAAMC,GAAG,GAAG,KAAIC,sBAAJ,GAAZ;AACA,QAAMD,GAAG,CAACE,IAAJ,CAASJ,WAAT,EAAsB;AAC1BK,IAAAA,cAAc,qBAAEJ,OAAO,CAACK,MAAV,oDAAE,gBAAgBD;AADN,GAAtB,CAAN;AAIA,QAAME,gBAAgB,GAAI,GAAEL,GAAG,CAACM,QAAJ,CAAaC,IAAK,MAA9C;AACA,QAAM,2CAA6BT,WAA7B,EAA0CO,gBAA1C,CAAN;AACA,QAAMG,wBAAwB,GAAGC,IAAI,GAACC,OAAL,CAAaZ,WAAb,EAA0BO,gBAA1B,CAAjC;AACA,QAAMM,cAAc,GAAI,IAAGX,GAAG,CAACY,YAAa,IAAGZ,GAAG,CAACM,QAAJ,CAAaC,IAAK,EAAjE;AAEA,2BAAWP,GAAG,CAACM,QAAJ,CAAaC,IAAxB;AACA,QAAM,oCACJP,GADI,EAEJ,KAAIa,mCAAJ,EAAqBF,cAArB,EAAqC;AACnCG,IAAAA,UAAU,EAAEN,wBADuB;AAEnCO,IAAAA,kBAAkB,EAAE;AAFe,GAArC,CAFI,CAAN;AAOD","sourcesContent":["import * as path from 'path';\n\nimport { Context } from '../../credentials';\nimport { runCredentialsManager } from '../../credentials/route';\nimport { DownloadKeystore } from '../../credentials/views/AndroidKeystore';\nimport { assertSlug, maybeRenameExistingFileAsync, Options } from './utils';\n\nexport async function actionAsync(projectRoot: string, options: Options): Promise<void> {\n  const ctx = new Context();\n  await ctx.init(projectRoot, {\n    nonInteractive: options.parent?.nonInteractive,\n  });\n\n  const keystoreFilename = `${ctx.manifest.slug}.jks`;\n  await maybeRenameExistingFileAsync(projectRoot, keystoreFilename);\n  const backupKeystoreOutputPath = path.resolve(projectRoot, keystoreFilename);\n  const experienceName = `@${ctx.projectOwner}/${ctx.manifest.slug}`;\n\n  assertSlug(ctx.manifest.slug);\n  await runCredentialsManager(\n    ctx,\n    new DownloadKeystore(experienceName, {\n      outputPath: backupKeystoreOutputPath,\n      displayCredentials: true,\n    })\n  );\n}\n"],"file":"fetchAndroidKeystoreAsync.js"}