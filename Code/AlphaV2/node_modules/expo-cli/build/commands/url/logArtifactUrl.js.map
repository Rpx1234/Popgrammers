{"version":3,"sources":["../../../src/commands/url/logArtifactUrl.ts"],"names":["assertHTTPS","url","UrlUtils","isHttps","CommandError","logArtifactUrl","platform","projectRoot","options","publicUrl","result","current","jobs","filter","job","artifacts","Log","nested"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAMA,SAASA,WAAT,CAAqBC,GAArB,EAAmC;AACjC,MAAIA,GAAG,IAAI,CAACC,gBAASC,OAAT,CAAiBF,GAAjB,CAAZ,EAAmC;AACjC,UAAM,KAAIG,uBAAJ,EAAiB,oBAAjB,EAAuC,yCAAvC,CAAN;AACD;AACF;;AAEM,MAAMC,cAAc,GAAIC,QAAD,IAAiC,OAC7DC,WAD6D,EAE7DC,OAF6D,KAG1D;AAAA;;AACHR,EAAAA,WAAW,CAACQ,OAAO,CAACC,SAAT,CAAX;AAEA,QAAMC,MAAM,GAAG,MAAM,gDAAoBH,WAApB,EAAiC;AACpDI,IAAAA,OAAO,EAAE,KAD2C;AAEpD,QAAIH,OAAO,CAACC,SAAR,GAAoB;AAAEA,MAAAA,SAAS,EAAED,OAAO,CAACC;AAArB,KAApB,GAAuD,EAA3D;AAFoD,GAAjC,CAArB;AAKA,QAAMR,GAAG,mBAAGS,MAAM,CAACE,IAAV,yEAAG,aAAaC,MAAb,CAAqBC,GAAD,IAAyBA,GAAG,CAACR,QAAJ,KAAiBA,QAA9D,EAAwE,CAAxE,CAAH,kFAAG,qBAA4ES,SAA/E,0DAAG,sBACRd,GADJ;;AAGA,MAAI,CAACA,GAAL,EAAU;AACR,UAAM,KAAIG,uBAAJ,EACH,MAAKE,QAAS,uCAAsCA,QAAS,kBAD1D,CAAN;AAGD;;AAEDU,iBAAIC,MAAJ,CAAWhB,GAAX;AACD,CArBM","sourcesContent":["import { UrlUtils } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport { BuildJobFields, getBuildStatusAsync } from '../build/getBuildStatusAsync';\n\ntype ArtifactUrlOptions = {\n  publicUrl?: string;\n};\n\nfunction assertHTTPS(url?: string) {\n  if (url && !UrlUtils.isHttps(url)) {\n    throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n  }\n}\n\nexport const logArtifactUrl = (platform: 'ios' | 'android') => async (\n  projectRoot: string,\n  options: ArtifactUrlOptions\n) => {\n  assertHTTPS(options.publicUrl);\n\n  const result = await getBuildStatusAsync(projectRoot, {\n    current: false,\n    ...(options.publicUrl ? { publicUrl: options.publicUrl } : {}),\n  });\n\n  const url = result.jobs?.filter((job: BuildJobFields) => job.platform === platform)[0]?.artifacts\n    ?.url;\n\n  if (!url) {\n    throw new CommandError(\n      `No ${platform} binary file found. Use \"expo build:${platform}\" to create one.`\n    );\n  }\n\n  Log.nested(url);\n};\n"],"file":"logArtifactUrl.js"}