{"version":3,"sources":["../../../src/commands/url/urlAsync.ts"],"names":["actionAsync","projectRoot","options","urlOpts","optsAsync","assertProjectRunningAsync","url","web","getWebAppUrlAsync","UrlUtils","constructDeepLinkAsync","logUrl","handleMobileOptsAsync","ProjectSettings","getCurrentStatusAsync","CommandError","constructWebAppUrlAsync","Log","newLine","printQRCode","log","chalk","underline"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAMO,eAAeA,WAAf,CAA2BC,WAA3B,EAAgDC,OAAhD,EAAyF;AAC9F,QAAMC,mBAAQC,SAAR,CAAkBH,WAAlB,EAA+BC,OAA/B,CAAN;AAEA,QAAMG,yBAAyB,CAACJ,WAAD,CAA/B;AAEA,QAAMK,GAAG,GAAGJ,OAAO,CAACK,GAAR,GACR,MAAMC,iBAAiB,CAACP,WAAD,CADf,GAER,MAAMQ,gBAASC,sBAAT,CAAgCT,WAAhC,CAFV;AAIAU,EAAAA,MAAM,CAACL,GAAD,CAAN;;AAEA,MAAI,CAACJ,OAAO,CAACK,GAAb,EAAkB;AAChB,UAAM,2CAAN;AACA,UAAMJ,mBAAQS,qBAAR,CAA8BX,WAA9B,EAA2CC,OAA3C,CAAN;AACD;AACF;;AAED,eAAeG,yBAAf,CAAyCJ,WAAzC,EAA8D;AAC5D,MAAI,CAAC,MAAMY,uBAAgBC,qBAAhB,CAAsCb,WAAtC,CAAP,MAA+D,SAAnE,EAA8E;AAC5E,UAAM,KAAIc,uBAAJ,EACJ,aADI,EAEH,8DAFG,CAAN;AAID;AACF;;AAED,eAAeP,iBAAf,CAAiCP,WAAjC,EAAuE;AACrE,QAAMK,GAAG,GAAG,MAAMG,gBAASO,uBAAT,CAAiCf,WAAjC,CAAlB;;AACA,MAAI,CAACK,GAAL,EAAU;AACR,UAAM,KAAIS,uBAAJ,EACJ,aADI,EAEH,6EAFG,CAAN;AAID;;AACD,SAAOT,GAAP;AACD;;AAED,SAASK,MAAT,CAAgBL,GAAhB,EAA6B;AAC3BW,iBAAIC,OAAJ;;AAEAf,qBAAQgB,WAAR,CAAoBb,GAApB;;AAEAW,iBAAIG,GAAJ,CAAQ,oBAAoBC,iBAAMC,SAAN,CAAgBhB,GAAhB,CAApB,GAA2C,IAAnD;AACD","sourcesContent":["import chalk from 'chalk';\nimport type { Command } from 'commander';\nimport { ProjectSettings, UrlUtils } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport urlOpts, { URLOptions } from '../utils/urlOpts';\nimport printRunInstructionsAsync from './printRunInstructionsAsync';\n\ntype ProjectUrlOptions = Command & {\n  web?: boolean;\n};\n\nexport async function actionAsync(projectRoot: string, options: ProjectUrlOptions & URLOptions) {\n  await urlOpts.optsAsync(projectRoot, options);\n\n  await assertProjectRunningAsync(projectRoot);\n\n  const url = options.web\n    ? await getWebAppUrlAsync(projectRoot)\n    : await UrlUtils.constructDeepLinkAsync(projectRoot);\n\n  logUrl(url);\n\n  if (!options.web) {\n    await printRunInstructionsAsync();\n    await urlOpts.handleMobileOptsAsync(projectRoot, options);\n  }\n}\n\nasync function assertProjectRunningAsync(projectRoot: string) {\n  if ((await ProjectSettings.getCurrentStatusAsync(projectRoot)) !== 'running') {\n    throw new CommandError(\n      'NOT_RUNNING',\n      `Project is not running. Please start it with \\`expo start\\`.`\n    );\n  }\n}\n\nasync function getWebAppUrlAsync(projectRoot: string): Promise<string> {\n  const url = await UrlUtils.constructWebAppUrlAsync(projectRoot);\n  if (!url) {\n    throw new CommandError(\n      'NOT_RUNNING',\n      `Webpack dev server is not running. Please start it with \\`expo start:web\\`.`\n    );\n  }\n  return url;\n}\n\nfunction logUrl(url: string) {\n  Log.newLine();\n\n  urlOpts.printQRCode(url);\n\n  Log.log('Your URL is\\n\\n' + chalk.underline(url) + '\\n');\n}\n"],"file":"urlAsync.js"}