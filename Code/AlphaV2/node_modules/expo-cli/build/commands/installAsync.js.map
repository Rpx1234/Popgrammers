{"version":3,"sources":["../../src/commands/installAsync.ts"],"names":["resolveExpoProjectRootAsync","info","process","cwd","projectRoot","error","code","Log","addNewLineIfNone","message","newLine","log","chalk","cyan","bold","SilentError","actionAsync","packages","options","packageManager","PackageManager","createForProject","npm","yarn","exp","pkg","skipSDKVersionRequirement","skipPlugins","dependencies","addAsync","sdkVersion","CommandError","name","toLowerCase","Versions","gteSdkVersion","resolveFrom","silent","installAsync","bundledNativeModules","versionsForSdk","nativeModulesCount","othersCount","unparsedParameterFound","parameters","forEach","packageName","startsWith","push","versionedPackages","filter","arg","includes","map","type","raw","messages","Boolean","join","addWithParametersAsync","split","isPluginError","warn"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEA,eAAeA,2BAAf,GAA6C;AAC3C,MAAI;AACF,UAAMC,IAAI,GAAG,MAAM,0CAAqBC,OAAO,CAACC,GAAR,EAArB,CAAnB;AACA,WAAOF,IAAI,CAACG,WAAZ;AACD,GAHD,CAGE,OAAOC,KAAP,EAAmB;AACnB,QAAIA,KAAK,CAACC,IAAN,KAAe,YAAnB,EAAiC;AAC/B;AACA,YAAMD,KAAN;AACD,KAJkB,CAKnB;;;AACAE,mBAAIC,gBAAJ;;AACAD,mBAAIF,KAAJ,CAAUA,KAAK,CAACI,OAAhB;;AACAF,mBAAIG,OAAJ;;AACAH,mBAAII,GAAJ,CAAQC,iBAAMC,IAAN,CAAY,qCAAoCD,iBAAME,IAAN,CAAY,WAAZ,CAAwB,EAAxE,CAAR;;AACAP,mBAAIG,OAAJ;;AACA,UAAM,KAAIK,2BAAJ,EAAgBV,KAAhB,CAAN;AACD;AACF;;AAEM,eAAeW,WAAf,CACLC,QADK,EAELC,OAFK,EAGL;AAAA;;AACA,QAAMd,WAAW,GAAG,MAAMJ,2BAA2B,EAArD;AAEA,QAAMmB,cAAc,GAAGC,cAAc,GAACC,gBAAf,CAAgCjB,WAAhC,EAA6C;AAClEkB,IAAAA,GAAG,EAAEJ,OAAO,CAACI,GADqD;AAElEC,IAAAA,IAAI,EAAEL,OAAO,CAACK,IAFoD;AAGlEZ,IAAAA,GAAG,EAAEJ,eAAII;AAHyD,GAA7C,CAAvB;AAMA,MAAI;AAAEa,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAe,yBAAUrB,WAAV,EAAuB;AACxCsB,IAAAA,yBAAyB,EAAE,IADa;AAExC;AACA;AACAC,IAAAA,WAAW,EAAE;AAJ2B,GAAvB,CAAnB,CATA,CAgBA;AACA;AACA;;AACA,MAAI,uBAACF,GAAG,CAACG,YAAL,8CAAC,kBAAmB,MAAnB,CAAD,CAAJ,EAAiC;AAC/B,WAAO,MAAMT,cAAc,CAACU,QAAf,CAAwB,GAAGZ,QAA3B,CAAb;AACD;;AAED,MAAI,CAACO,GAAG,CAACM,UAAT,EAAqB;AACnBvB,mBAAIC,gBAAJ;;AACA,UAAM,KAAIuB,uBAAJ,EACH,OAAMnB,iBAAME,IAAN,CAAY,MAAZ,CAAmB,8BAA6BF,iBAAME,IAAN,CACpD,cADoD,CAErD,sDAAqDF,iBAAME,IAAN,CACpD,GAAEK,cAAc,CAACa,IAAf,CAAoBC,WAApB,EAAkC,UADgB,CAErD,qCALE,CAAN;AAOD;;AAED,MAAI,CAACC,gBAASC,aAAT,CAAuBX,GAAvB,EAA4B,QAA5B,CAAL,EAA4C;AAC1C,UAAMf,OAAO,GAAI,GAAEG,iBAAME,IAAN,CAChB,cADgB,CAEjB,uDAFF;;AAGAP,mBAAIC,gBAAJ;;AACAD,mBAAIF,KAAJ,CAAUI,OAAV;;AACAF,mBAAIG,OAAJ;;AACAH,mBAAII,GAAJ,CAAQC,iBAAMC,IAAN,CAAY,oBAAmBD,iBAAME,IAAN,CAAWU,GAAG,CAACM,UAAf,CAA2B,EAA1D,CAAR;;AACAvB,mBAAIG,OAAJ;;AACA,UAAM,KAAIK,2BAAJ,EAAgBN,OAAhB,CAAN;AACD,GA5CD,CA8CA;AACA;;;AACA,MAAI,CAAC2B,uBAAYC,MAAZ,CAAmBjC,WAAnB,EAAgC,OAAhC,CAAL,EAA+C;AAC7CG,mBAAIC,gBAAJ;;AACAD,mBAAII,GAAJ,CAAQC,iBAAMC,IAAN,CAAY,mCAAkCM,cAAc,CAACa,IAAK,mBAAlE,CAAR;;AACAzB,mBAAIG,OAAJ;;AACA,UAAMS,cAAc,CAACmB,YAAf,EAAN;AACD;;AAED,QAAMC,oBAAoB,GAAG,MAAM,0DAA6BnC,WAA7B,EAA0CoB,GAAG,CAACM,UAA9C,CAAnC;AACA,QAAMU,cAAc,GAAG,MAAM,wDAAwBhB,GAAG,CAACM,UAA5B,CAA7B;AAEA,MAAIW,kBAAkB,GAAG,CAAzB;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,sBAAsB,GAAG,KAA7B;AACA,QAAMC,UAAoB,GAAG,EAA7B,CA7DA,CA+DA;AACA;;AACA3B,EAAAA,QAAQ,CAAC4B,OAAT,CAAiBC,WAAW,IAAI;AAC9B,QAAIA,WAAW,CAACC,UAAZ,CAAuB,GAAvB,CAAJ,EAAiC;AAC/BJ,MAAAA,sBAAsB,GAAG,IAAzB;AACD;;AAED,QAAIA,sBAAJ,EAA4B;AAC1BC,MAAAA,UAAU,CAACI,IAAX,CAAgBF,WAAhB;AACD;AACF,GARD;AAUA,QAAMG,iBAAiB,GAAGhC,QAAQ,CAC/BiC,MADuB,CAChBC,GAAG,IAAI,CAACP,UAAU,CAACQ,QAAX,CAAoBD,GAApB,CADQ,EAEvBE,GAFuB,CAEnBF,GAAG,IAAI;AACV,UAAM;AAAEnB,MAAAA,IAAF;AAAQsB,MAAAA,IAAR;AAAcC,MAAAA;AAAd,QAAsB,8BAAcJ,GAAd,CAA5B;;AAEA,QAAI,CAAC,KAAD,EAAQ,SAAR,EAAmB,OAAnB,EAA4BC,QAA5B,CAAqCE,IAArC,KAA8CtB,IAA9C,IAAsDO,oBAAoB,CAACP,IAAD,CAA9E,EAAsF;AACpF;AACAS,MAAAA,kBAAkB;AAClB,aAAQ,GAAET,IAAK,IAAGO,oBAAoB,CAACP,IAAD,CAAO,EAA7C;AACD,KAJD,MAIO,IAAIA,IAAI,IAAIQ,cAAc,CAACR,IAAD,CAA1B,EAAkC;AACvC;AACAU,MAAAA,WAAW;AACX,aAAQ,GAAEV,IAAK,IAAGQ,cAAc,CAACR,IAAD,CAAO,EAAvC;AACD,KAJM,MAIA;AACL;AACAU,MAAAA,WAAW;AACX,aAAOa,GAAP;AACD;AACF,GAlBuB,CAA1B;AAoBA,QAAMC,QAAQ,GAAG,CACff,kBAAkB,GAAG,CAArB,IACG,GAAEA,kBAAmB,QAAOjB,GAAG,CAACM,UAAW,sBAC1CW,kBAAkB,KAAK,CAAvB,GAA2B,QAA3B,GAAsC,SACvC,EAJY,EAKfC,WAAW,GAAG,CAAd,IAAoB,GAAEA,WAAY,UAASA,WAAW,KAAK,CAAhB,GAAoB,SAApB,GAAgC,UAAW,EALvE,EAMfQ,MANe,CAMRO,OANQ,CAAjB;;AAOAlD,iBAAII,GAAJ,CAAS,cAAa6C,QAAQ,CAACE,IAAT,CAAc,OAAd,CAAuB,UAASvC,cAAc,CAACa,IAAK,GAA1E;;AAEA,QAAMb,cAAc,CAACwC,sBAAf,CAAsCV,iBAAtC,EAAyDL,UAAzD,CAAN;;AAEA,MAAI;AACFpB,IAAAA,GAAG,GAAG,yBAAUpB,WAAV,EAAuB;AAAEsB,MAAAA,yBAAyB,EAAE,IAA7B;AAAmCC,MAAAA,WAAW,EAAE;AAAhD,KAAvB,EAA+EH,GAArF,CADE,CAGF;;AACA,UAAM,4DACJpB,WADI,EAEJoB,GAFI,EAGJyB,iBAAiB,CAACI,GAAlB,CAAsB5B,GAAG,IAAIA,GAAG,CAACmC,KAAJ,CAAU,GAAV,EAAe,CAAf,CAA7B,EAAgDV,MAAhD,CAAuDO,OAAvD,CAHI,CAAN;AAKD,GATD,CASE,OAAOpD,KAAP,EAAmB;AACnB,QAAIA,KAAK,CAACwD,aAAV,EAAyB;AACvBtD,qBAAIuD,IAAJ,CAAU,gCAAD,GAAmCzD,KAAK,CAACI,OAAlD;;AACA;AACD;;AACD,UAAMJ,KAAN;AACD;AACF","sourcesContent":["import { getConfig } from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\nimport chalk from 'chalk';\nimport npmPackageArg from 'npm-package-arg';\nimport resolveFrom from 'resolve-from';\nimport { Versions } from 'xdl';\n\nimport CommandError, { SilentError } from '../CommandError';\nimport Log from '../log';\nimport { getRemoteVersionsForSdk } from '../utils/getRemoteVersionsForSdk';\nimport { findProjectRootAsync } from './utils/ProjectUtils';\nimport { autoAddConfigPluginsAsync } from './utils/autoAddConfigPluginsAsync';\nimport { getBundledNativeModulesAsync } from './utils/bundledNativeModules';\n\nasync function resolveExpoProjectRootAsync() {\n  try {\n    const info = await findProjectRootAsync(process.cwd());\n    return info.projectRoot;\n  } catch (error: any) {\n    if (error.code !== 'NO_PROJECT') {\n      // An unknown error occurred.\n      throw error;\n    }\n    // This happens when an app.config exists but a package.json is not present.\n    Log.addNewLineIfNone();\n    Log.error(error.message);\n    Log.newLine();\n    Log.log(chalk.cyan(`You can create a new project with ${chalk.bold(`expo init`)}`));\n    Log.newLine();\n    throw new SilentError(error);\n  }\n}\n\nexport async function actionAsync(\n  packages: string[],\n  options: PackageManager.CreateForProjectOptions\n) {\n  const projectRoot = await resolveExpoProjectRootAsync();\n\n  const packageManager = PackageManager.createForProject(projectRoot, {\n    npm: options.npm,\n    yarn: options.yarn,\n    log: Log.log,\n  });\n\n  let { exp, pkg } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n    // Sometimes users will add a plugin to the config before installing the library,\n    // this wouldn't work unless we dangerously disable plugin serialization.\n    skipPlugins: true,\n  });\n\n  // If using `expo install` in a project without the expo package even listed\n  // in package.json, just fall through to npm/yarn.\n  //\n  if (!pkg.dependencies?.['expo']) {\n    return await packageManager.addAsync(...packages);\n  }\n\n  if (!exp.sdkVersion) {\n    Log.addNewLineIfNone();\n    throw new CommandError(\n      `The ${chalk.bold(`expo`)} package was found in your ${chalk.bold(\n        `package.json`\n      )} but we couldn't resolve the Expo SDK version. Run ${chalk.bold(\n        `${packageManager.name.toLowerCase()} install`\n      )} and then try this command again.\\n`\n    );\n  }\n\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    const message = `${chalk.bold(\n      `expo install`\n    )} is only available for Expo SDK version 33 or higher.`;\n    Log.addNewLineIfNone();\n    Log.error(message);\n    Log.newLine();\n    Log.log(chalk.cyan(`Current version: ${chalk.bold(exp.sdkVersion)}`));\n    Log.newLine();\n    throw new SilentError(message);\n  }\n\n  // This shouldn't be invoked because `findProjectRootAsync` will throw if node_modules are missing.\n  // Every React project should have react installed...\n  if (!resolveFrom.silent(projectRoot, 'react')) {\n    Log.addNewLineIfNone();\n    Log.log(chalk.cyan(`node_modules not found, running ${packageManager.name} install command.`));\n    Log.newLine();\n    await packageManager.installAsync();\n  }\n\n  const bundledNativeModules = await getBundledNativeModulesAsync(projectRoot, exp.sdkVersion);\n  const versionsForSdk = await getRemoteVersionsForSdk(exp.sdkVersion);\n\n  let nativeModulesCount = 0;\n  let othersCount = 0;\n  let unparsedParameterFound = false;\n  const parameters: string[] = [];\n\n  // Detect unparsed parameters that are passed in\n  // Assume anything after the first one to be a parameter (to support cases like `-- --loglevel verbose`)\n  packages.forEach(packageName => {\n    if (packageName.startsWith('-')) {\n      unparsedParameterFound = true;\n    }\n\n    if (unparsedParameterFound) {\n      parameters.push(packageName);\n    }\n  });\n\n  const versionedPackages = packages\n    .filter(arg => !parameters.includes(arg))\n    .map(arg => {\n      const { name, type, raw } = npmPackageArg(arg);\n\n      if (['tag', 'version', 'range'].includes(type) && name && bundledNativeModules[name]) {\n        // Unimodule packages from npm registry are modified to use the bundled version.\n        nativeModulesCount++;\n        return `${name}@${bundledNativeModules[name]}`;\n      } else if (name && versionsForSdk[name]) {\n        // Some packages have the recommended version listed in https://exp.host/--/api/v2/versions.\n        othersCount++;\n        return `${name}@${versionsForSdk[name]}`;\n      } else {\n        // Other packages are passed through unmodified.\n        othersCount++;\n        return raw;\n      }\n    });\n\n  const messages = [\n    nativeModulesCount > 0 &&\n      `${nativeModulesCount} SDK ${exp.sdkVersion} compatible native ${\n        nativeModulesCount === 1 ? 'module' : 'modules'\n      }`,\n    othersCount > 0 && `${othersCount} other ${othersCount === 1 ? 'package' : 'packages'}`,\n  ].filter(Boolean);\n  Log.log(`Installing ${messages.join(' and ')} using ${packageManager.name}.`);\n\n  await packageManager.addWithParametersAsync(versionedPackages, parameters);\n\n  try {\n    exp = getConfig(projectRoot, { skipSDKVersionRequirement: true, skipPlugins: true }).exp;\n\n    // Only auto add plugins if the plugins array is defined or if the project is using SDK +42.\n    await autoAddConfigPluginsAsync(\n      projectRoot,\n      exp,\n      versionedPackages.map(pkg => pkg.split('@')[0]).filter(Boolean)\n    );\n  } catch (error: any) {\n    if (error.isPluginError) {\n      Log.warn(`Skipping config plugin check: ` + error.message);\n      return;\n    }\n    throw error;\n  }\n}\n"],"file":"installAsync.js"}