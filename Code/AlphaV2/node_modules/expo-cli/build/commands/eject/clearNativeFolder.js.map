{"version":3,"sources":["../../../src/commands/eject/clearNativeFolder.ts"],"names":["directoryExistsAsync","file","fs","stat","catch","isDirectory","clearNativeFolder","projectRoot","folders","step","join","Promise","all","map","folderName","remove","path","succeed","error","fail","message","hasRequiredAndroidFilesAsync","AndroidConfig","Paths","getAppBuildGradleAsync","getProjectBuildGradleAsync","getAndroidManifestAsync","getMainApplicationAsync","isAndroidProjectValidAsync","hasRequiredIOSFilesAsync","IOSConfig","getAppDelegate","getAllXcodeProjectPaths","getAllInfoPlistPaths","getAllPBXProjectPaths","isIOSProjectValidAsync","promptToClearMalformedNativeProjectsAsync","checkPlatforms","isAndroidValid","isIOSValid","includes","resolve","platforms","filter","Boolean","displayPlatforms","platform","chalk","cyan","length","initial","Log","warn"],"mappings":"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","sourcesContent":["import { AndroidConfig, IOSConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\n\nimport Log from '../../log';\nimport { logNewSection } from '../../utils/ora';\nimport { confirmAsync } from '../../utils/prompts';\nimport { isNonInteractive } from '../utils/environment';\n\nexport async function directoryExistsAsync(file: string): Promise<boolean> {\n  return (await fs.stat(file).catch(() => null))?.isDirectory() ?? false;\n}\n\nexport async function clearNativeFolder(projectRoot: string, folders: string[]) {\n  const step = logNewSection(`Clearing ${folders.join(', ')}`);\n  try {\n    await Promise.all(folders.map(folderName => fs.remove(path.join(projectRoot, folderName))));\n    step.succeed(`Cleared ${folders.join(', ')} code`);\n  } catch (error) {\n    step.fail(`Failed to delete ${folders.join(', ')} code: ${error.message}`);\n    throw error;\n  }\n}\n\nexport async function hasRequiredAndroidFilesAsync(projectRoot: string) {\n  try {\n    await Promise.all([\n      AndroidConfig.Paths.getAppBuildGradleAsync(projectRoot),\n      AndroidConfig.Paths.getProjectBuildGradleAsync(projectRoot),\n      AndroidConfig.Paths.getAndroidManifestAsync(projectRoot),\n      AndroidConfig.Paths.getMainApplicationAsync(projectRoot),\n    ]);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nasync function isAndroidProjectValidAsync(projectRoot: string) {\n  // Only perform the check if the native folder is present.\n  if (!(await directoryExistsAsync(path.join(projectRoot, 'android')))) {\n    return true;\n  }\n  return hasRequiredAndroidFilesAsync(projectRoot);\n}\n\nexport async function hasRequiredIOSFilesAsync(projectRoot: string) {\n  try {\n    // If any of the following required files are missing, then the project is malformed.\n    await Promise.all([\n      IOSConfig.Paths.getAppDelegate(projectRoot),\n      IOSConfig.Paths.getAllXcodeProjectPaths(projectRoot),\n      IOSConfig.Paths.getAllInfoPlistPaths(projectRoot),\n      IOSConfig.Paths.getAllPBXProjectPaths(projectRoot),\n    ]);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nasync function isIOSProjectValidAsync(projectRoot: string) {\n  // Only perform the check if the native folder is present.\n  if (!(await directoryExistsAsync(path.join(projectRoot, 'ios')))) {\n    return true;\n  }\n  return hasRequiredIOSFilesAsync(projectRoot);\n}\n\nexport async function promptToClearMalformedNativeProjectsAsync(\n  projectRoot: string,\n  checkPlatforms: string[]\n) {\n  const [isAndroidValid, isIOSValid] = await Promise.all([\n    checkPlatforms.includes('android')\n      ? isAndroidProjectValidAsync(projectRoot)\n      : Promise.resolve(true),\n    checkPlatforms.includes('ios') ? isIOSProjectValidAsync(projectRoot) : Promise.resolve(true),\n  ]);\n\n  if (isAndroidValid && isIOSValid) {\n    return;\n  }\n\n  const platforms = [!isAndroidValid && 'android', !isIOSValid && 'ios'].filter(\n    Boolean\n  ) as string[];\n\n  const displayPlatforms = platforms.map(platform => chalk.cyan(platform));\n  // Prompt which platforms to reset.\n  const message =\n    platforms.length > 1\n      ? `The ${displayPlatforms[0]} and ${displayPlatforms[1]} projects are malformed`\n      : `The ${displayPlatforms[0]} project is malformed`;\n\n  if (\n    // If the process is non-interactive, default to clearing the malformed native project.\n    // This would only happen on re-running eject.\n    isNonInteractive() ||\n    // Prompt to clear the native folders.\n    (await confirmAsync({\n      message: `${message}, would you like to clear the project files and reinitialize them?`,\n      initial: true,\n    }))\n  ) {\n    await clearNativeFolder(projectRoot, platforms);\n  } else {\n    // Warn the user that the process may fail.\n    Log.warn('Continuing with malformed native projects');\n  }\n}\n"],"file":"clearNativeFolder.js"}