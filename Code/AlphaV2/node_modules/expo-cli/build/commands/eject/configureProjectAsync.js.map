{"version":3,"sources":["../../../src/commands/eject/configureProjectAsync.ts"],"names":["logConfig","config","isObjStr","str","test","Log","log","util","inspect","colors","compact","sorted","a","b","showHidden","depth","configureManagedProjectAsync","projectRoot","platforms","bundleIdentifier","includes","packageName","exp","expoUsername","assertMissingModProviders","isDebug","debug"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAKO,SAASA,SAAT,CAAmBC,MAAnB,EAAuD;AAC5D,QAAMC,QAAQ,GAAIC,GAAD,IAA0B,WAAWC,IAAX,CAAgBD,GAAhB,CAA3C;;AACAE,iBAAIC,GAAJ,CACEC,gBAAKC,OAAL,CAAaP,MAAb,EAAqB;AACnBQ,IAAAA,MAAM,EAAE,IADW;AAEnBC,IAAAA,OAAO,EAAE,KAFU;;AAGnB;AACAC,IAAAA,MAAM,CAACC,CAAD,EAAYC,CAAZ,EAAuB;AAC3B,UAAIX,QAAQ,CAACU,CAAD,CAAZ,EAAiB,OAAO,CAAP;AACjB,UAAIV,QAAQ,CAACW,CAAD,CAAZ,EAAiB,OAAO,CAAC,CAAR;AACjB,aAAO,CAAP;AACD,KARkB;;AASnBC,IAAAA,UAAU,EAAE,KATO;AAUnBC,IAAAA,KAAK,EAAE;AAVY,GAArB,CADF;AAcD;;AAEc,eAAeC,4BAAf,CAA4C;AACzDC,EAAAA,WADyD;AAEzDC,EAAAA;AAFyD,CAA5C,EAMZ;AACD,MAAIC,gBAAJ;;AACA,MAAID,SAAS,CAACE,QAAV,CAAmB,KAAnB,CAAJ,EAA+B;AAC7B;AACAD,IAAAA,gBAAgB,GAAG,MAAM,gEAA+BF,WAA/B,CAAzB;AACD;;AACD,MAAII,WAAJ;;AACA,MAAIH,SAAS,CAACE,QAAV,CAAmB,SAAnB,CAAJ,EAAmC;AACjC;AACAC,IAAAA,WAAW,GAAG,MAAM,uDAAsBJ,WAAtB,CAApB;AACD;;AAED,MAAI;AAAEK,IAAAA,GAAG,EAAErB;AAAP,MAAkB,MAAM,8CAAuBgB,WAAvB,EAAoC;AAC9DC,IAAAA,SAD8D;AAE9DG,IAAAA,WAF8D;AAG9DF,IAAAA,gBAH8D;;AAI9DI,IAAAA,YAAY,CAACtB,MAAD,EAAS;AACnB,aAAO,kCAAmBA,MAAnB,CAAP;AACD;;AAN6D,GAApC,CAA5B,CAZC,CAqBD;;AACAA,EAAAA,MAAM,GAAG,MAAM,uCAAiBA,MAAjB,EAAyB;AACtCgB,IAAAA,WADsC;AAEtCC,IAAAA,SAFsC;AAGtCM,IAAAA,yBAAyB,EAAE;AAHW,GAAzB,CAAf;;AAMA,MAAInB,eAAIoB,OAAR,EAAiB;AACfpB,mBAAIqB,KAAJ;;AACArB,mBAAIqB,KAAJ,CAAU,mBAAV;;AACA1B,IAAAA,SAAS,CAACC,MAAD,CAAT;;AACAI,mBAAIqB,KAAJ;AACD;;AAED,SAAOzB,MAAP;AACD","sourcesContent":["import { ExpoConfig, getAccountUsername, ProjectConfig } from '@expo/config';\nimport { compileModsAsync, ModPlatform } from '@expo/config-plugins';\nimport { getPrebuildConfigAsync } from '@expo/prebuild-config';\nimport util from 'util';\n\nimport Log from '../../log';\nimport {\n  getOrPromptForBundleIdentifier,\n  getOrPromptForPackage,\n} from '../utils/getOrPromptApplicationId';\n\nexport function logConfig(config: ExpoConfig | ProjectConfig) {\n  const isObjStr = (str: string): boolean => /^\\w+: {/g.test(str);\n  Log.log(\n    util.inspect(config, {\n      colors: true,\n      compact: false,\n      // Sort objects to the end so that smaller values aren't hidden between large objects.\n      sorted(a: string, b: string) {\n        if (isObjStr(a)) return 1;\n        if (isObjStr(b)) return -1;\n        return 0;\n      },\n      showHidden: false,\n      depth: null,\n    })\n  );\n}\n\nexport default async function configureManagedProjectAsync({\n  projectRoot,\n  platforms,\n}: {\n  projectRoot: string;\n  platforms: ModPlatform[];\n}) {\n  let bundleIdentifier: string | undefined;\n  if (platforms.includes('ios')) {\n    // Check bundle ID before reading the config because it may mutate the config if the user is prompted to define it.\n    bundleIdentifier = await getOrPromptForBundleIdentifier(projectRoot);\n  }\n  let packageName: string | undefined;\n  if (platforms.includes('android')) {\n    // Check package before reading the config because it may mutate the config if the user is prompted to define it.\n    packageName = await getOrPromptForPackage(projectRoot);\n  }\n\n  let { exp: config } = await getPrebuildConfigAsync(projectRoot, {\n    platforms,\n    packageName,\n    bundleIdentifier,\n    expoUsername(config) {\n      return getAccountUsername(config);\n    },\n  });\n\n  // compile all plugins and mods\n  config = await compileModsAsync(config, {\n    projectRoot,\n    platforms,\n    assertMissingModProviders: false,\n  });\n\n  if (Log.isDebug) {\n    Log.debug();\n    Log.debug('Evaluated config:');\n    logConfig(config);\n    Log.debug();\n  }\n\n  return config;\n}\n"],"file":"configureProjectAsync.js"}