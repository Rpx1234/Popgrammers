{"version":3,"sources":["../../../src/commands/eject/updatePackageJson.ts"],"names":["updatePackageJSONAsync","projectRoot","tempDir","pkg","skipDependencyUpdate","updatingPackageJsonStep","updatePackageJSONScripts","results","updatePackageJSONDependencies","removedPkgMain","updatePackageJSONEntryPoint","fs","writeFile","path","resolve","JSON","stringify","succeed","Log","log","chalk","bold","newLine","devDependencies","dependencies","defaultDependencies","createDependenciesMap","defaultDevDependencies","combinedDependencies","requiredDependencies","filter","depKey","symlinkedPackages","dependenciesKey","moduleId","isSilent","push","includes","length","map","join","combinedDevDependencies","hasNewDependencies","hashForDependencyMap","hasNewDevDependencies","Object","assign","Error","outputMap","key","keys","value","scripts","start","android","ios","shouldDeleteMainField","main","isPkgMainExpoAppEntry","input","startsWith","normalizeDependencyMap","deps","dependency","sort","depsList","depsString","createFileHash","contents","crypto","createHash","update","digest"],"mappings":"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","sourcesContent":["import { getPackageJson, PackageJSONConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport Log from '../../log';\nimport { logNewSection } from '../../utils/ora';\nimport { isModuleSymlinked } from '../utils/isModuleSymlinked';\n\nexport type DependenciesMap = { [key: string]: string | number };\n\nexport type DependenciesModificationResults = {\n  hasNewDependencies: boolean;\n  hasNewDevDependencies: boolean;\n};\n\nexport async function updatePackageJSONAsync({\n  projectRoot,\n  tempDir,\n  pkg,\n  skipDependencyUpdate,\n}: {\n  projectRoot: string;\n  tempDir: string;\n  pkg: PackageJSONConfig;\n  skipDependencyUpdate?: string[];\n}): Promise<DependenciesModificationResults> {\n  // NOTE(brentvatne): Removing spaces between steps for now, add back when\n  // there is some additional context for steps\n  const updatingPackageJsonStep = logNewSection(\n    'Updating your package.json scripts, dependencies, and main file'\n  );\n\n  updatePackageJSONScripts({ pkg });\n\n  const results = updatePackageJSONDependencies({\n    projectRoot,\n    pkg,\n    tempDir,\n    skipDependencyUpdate,\n  });\n\n  const removedPkgMain = updatePackageJSONEntryPoint({ pkg });\n  await fs.writeFile(\n    path.resolve(projectRoot, 'package.json'),\n    // Add new line to match the format of running yarn.\n    // This prevents the `package.json` from changing when running `prebuild --no-install` multiple times.\n    JSON.stringify(pkg, null, 2) + '\\n'\n  );\n\n  updatingPackageJsonStep.succeed(\n    'Updated package.json and added index.js entry point for iOS and Android'\n  );\n  if (removedPkgMain) {\n    Log.log(\n      `\\u203A Removed ${chalk.bold(\n        `\"main\": \"${removedPkgMain}\"`\n      )} from package.json because we recommend using index.js as main instead`\n    );\n    Log.newLine();\n  }\n\n  return results;\n}\n\n/**\n * Update package.json dependencies by combining the dependencies in the project we are ejecting\n * with the dependencies in the template project. Does the same for devDependencies.\n *\n * - The template may have some dependencies beyond react/react-native/react-native-unimodules,\n *   for example RNGH and Reanimated. We should prefer the version that is already being used\n *   in the project for those, but swap the react/react-native/react-native-unimodules versions\n *   with the ones in the template.\n * - The same applies to expo-updates -- since some native project configuration may depend on the\n *   version, we should always use the version of expo-updates in the template.\n */\nexport function updatePackageJSONDependencies({\n  projectRoot,\n  tempDir,\n  pkg,\n  skipDependencyUpdate = [],\n}: {\n  projectRoot: string;\n  tempDir: string;\n  pkg: PackageJSONConfig;\n  skipDependencyUpdate?: string[];\n}): DependenciesModificationResults {\n  if (!pkg.devDependencies) {\n    pkg.devDependencies = {};\n  }\n  const { dependencies, devDependencies } = getPackageJson(tempDir);\n  const defaultDependencies = createDependenciesMap(dependencies);\n  const defaultDevDependencies = createDependenciesMap(devDependencies);\n\n  const combinedDependencies: DependenciesMap = createDependenciesMap({\n    ...defaultDependencies,\n    ...pkg.dependencies,\n  });\n\n  const requiredDependencies = [\n    'react',\n    'react-native-unimodules',\n    'react-native',\n    'expo-updates',\n  ].filter(depKey => !!defaultDependencies[depKey]);\n\n  const symlinkedPackages: string[] = [];\n\n  for (const dependenciesKey of requiredDependencies) {\n    if (\n      // If the local package.json defined the dependency that we want to overwrite...\n      pkg.dependencies?.[dependenciesKey]\n    ) {\n      if (\n        // Then ensure it isn't symlinked (i.e. the user has a custom version in their yarn workspace).\n        isModuleSymlinked({ projectRoot, moduleId: dependenciesKey, isSilent: true })\n      ) {\n        // If the package is in the project's package.json and it's symlinked, then skip overwriting it.\n        symlinkedPackages.push(dependenciesKey);\n        continue;\n      }\n      if (skipDependencyUpdate.includes(dependenciesKey)) {\n        continue;\n      }\n    }\n    combinedDependencies[dependenciesKey] = defaultDependencies[dependenciesKey];\n  }\n\n  if (symlinkedPackages.length) {\n    Log.log(\n      `\\u203A Using symlinked ${symlinkedPackages\n        .map(pkg => chalk.bold(pkg))\n        .join(', ')} instead of recommended version(s).`\n    );\n  }\n\n  const combinedDevDependencies: DependenciesMap = createDependenciesMap({\n    ...defaultDevDependencies,\n    ...pkg.devDependencies,\n  });\n\n  // Only change the dependencies if the normalized hash changes, this helps to reduce meaningless changes.\n  const hasNewDependencies =\n    hashForDependencyMap(pkg.dependencies) !== hashForDependencyMap(combinedDependencies);\n  const hasNewDevDependencies =\n    hashForDependencyMap(pkg.devDependencies) !== hashForDependencyMap(combinedDevDependencies);\n  // Save the dependencies\n  if (hasNewDependencies) {\n    // Use Object.assign to preserve the original order of dependencies, this makes it easier to see what changed in the git diff.\n    pkg.dependencies = Object.assign(pkg.dependencies, combinedDependencies);\n  }\n  if (hasNewDevDependencies) {\n    // Same as with dependencies\n    pkg.devDependencies = Object.assign(pkg.devDependencies, combinedDevDependencies);\n  }\n\n  return {\n    hasNewDependencies,\n    hasNewDevDependencies,\n  };\n}\n\n/**\n * Create an object of type DependenciesMap a dependencies object or throw if not valid.\n *\n * @param dependencies - ideally an object of type {[key]: string} - if not then this will error.\n */\nexport function createDependenciesMap(dependencies: any): DependenciesMap {\n  if (typeof dependencies !== 'object') {\n    throw new Error(`Dependency map is invalid, expected object but got ${typeof dependencies}`);\n  } else if (!dependencies) {\n    return {};\n  }\n\n  const outputMap: DependenciesMap = {};\n\n  for (const key of Object.keys(dependencies)) {\n    const value = dependencies[key];\n    if (typeof value === 'string') {\n      outputMap[key] = value;\n    } else {\n      throw new Error(\n        `Dependency for key \\`${key}\\` should be a \\`string\\`, instead got: \\`{ ${key}: ${JSON.stringify(\n          value\n        )} }\\``\n      );\n    }\n  }\n  return outputMap;\n}\n\n/**\n * Update package.json scripts - `npm start` should default to `react-native\n * start` rather than `expo start` after ejecting, for example.\n */\nfunction updatePackageJSONScripts({ pkg }: { pkg: PackageJSONConfig }) {\n  if (!pkg.scripts) {\n    pkg.scripts = {};\n  }\n  if (!pkg.scripts.start?.includes('--dev-client')) {\n    pkg.scripts.start = 'expo start --dev-client';\n  }\n  if (!pkg.scripts.android?.includes('run')) {\n    pkg.scripts.android = 'expo run:android';\n  }\n  if (!pkg.scripts.ios?.includes('run')) {\n    pkg.scripts.ios = 'expo run:ios';\n  }\n}\n\n/**\n * Add new app entry points\n */\nfunction updatePackageJSONEntryPoint({ pkg }: { pkg: PackageJSONConfig }): boolean {\n  let removedPkgMain = false;\n  // Check that the pkg.main doesn't match:\n  // - ./node_modules/expo/AppEntry\n  // - ./node_modules/expo/AppEntry.js\n  // - node_modules/expo/AppEntry.js\n  // - expo/AppEntry.js\n  // - expo/AppEntry\n  if (shouldDeleteMainField(pkg.main)) {\n    // Save the custom\n    removedPkgMain = pkg.main;\n    delete pkg.main;\n  }\n\n  return removedPkgMain;\n}\n\n/**\n * Returns true if the input string matches the default expo main field.\n *\n * - ./node_modules/expo/AppEntry\n * - ./node_modules/expo/AppEntry.js\n * - node_modules/expo/AppEntry.js\n * - expo/AppEntry.js\n * - expo/AppEntry\n *\n * @param input package.json main field\n */\nexport function isPkgMainExpoAppEntry(input?: string): boolean {\n  const main = input || '';\n  if (main.startsWith('./')) {\n    return main.includes('node_modules/expo/AppEntry');\n  }\n  return main.includes('expo/AppEntry');\n}\n\nfunction normalizeDependencyMap(deps: DependenciesMap): string[] {\n  return Object.keys(deps)\n    .map(dependency => `${dependency}@${deps[dependency]}`)\n    .sort();\n}\n\nexport function hashForDependencyMap(deps: DependenciesMap = {}): string {\n  const depsList = normalizeDependencyMap(deps);\n  const depsString = depsList.join('\\n');\n  return createFileHash(depsString);\n}\n\nexport function createFileHash(contents: string): string {\n  // this doesn't need to be secure, the shorter the better.\n  return crypto.createHash('sha1').update(contents).digest('hex');\n}\n\nexport function shouldDeleteMainField(main?: any): boolean {\n  if (!main || !isPkgMainExpoAppEntry(main)) {\n    return false;\n  }\n\n  return !main?.startsWith('index.');\n}\n"],"file":"updatePackageJson.js"}