{"version":3,"sources":["../../../src/commands/eject/customizeAsync.ts"],"names":["maybeWarnToCommitAsync","projectRoot","workingTreeStatus","result","stdout","e","Log","log","chalk","yellow","dependencyMap","resolveFromLocalOrGlobal","moduleId","resolved","resolveFrom","silent","require","resolve","generateFilesAsync","staticPath","options","answer","templateFolder","promises","file","Object","keys","includes","projectFilePath","path","push","fs","copy","join","overwrite","recursive","packageManager","PackageManager","createForProject","dependency","addDevAsync","fileName","basename","src","dest","pathExists","Error","Promise","all","actionAsync","force","exp","skipSDKVersionRequirement","dirname","files","readdir","filter","item","web","allFiles","map","values","localProjectFile","exists","existsSync","title","value","disabled","description","red","length","bold","type","name","message","hint","warn","limit","instructions","choices"],"mappings":"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","sourcesContent":["import { getConfig } from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport prompts from 'prompts';\nimport resolveFrom from 'resolve-from';\n\nimport Log from '../../log';\n\ntype Options = { force: boolean };\n\nasync function maybeWarnToCommitAsync(projectRoot: string) {\n  let workingTreeStatus = 'unknown';\n  try {\n    const result = await spawnAsync('git', ['status', '--porcelain']);\n    workingTreeStatus = result.stdout === '' ? 'clean' : 'dirty';\n  } catch (e) {\n    // Maybe git is not installed?\n    // Maybe this project is not using git?\n  }\n\n  if (workingTreeStatus === 'dirty') {\n    Log.log(\n      chalk.yellow(\n        'You should commit your changes before generating code into the root of your project.'\n      )\n    );\n  }\n}\n\nconst dependencyMap: { [key: string]: string[] } = {\n  'babel.config.js': ['babel-preset-expo'],\n  'webpack.config.js': ['@expo/webpack-config'],\n};\n\nfunction resolveFromLocalOrGlobal(projectRoot: string, moduleId: string) {\n  const resolved = resolveFrom.silent(projectRoot, moduleId);\n  if (resolved) {\n    return resolved;\n  }\n  return require.resolve(moduleId);\n}\n\nasync function generateFilesAsync({\n  projectRoot,\n  staticPath,\n  options,\n  answer,\n  templateFolder,\n}: {\n  projectRoot: string;\n  staticPath: string;\n  options: Options;\n  answer: string[];\n  templateFolder: string;\n}) {\n  const promises = [];\n\n  for (const file of answer) {\n    if (Object.keys(dependencyMap).includes(file)) {\n      const projectFilePath = path.resolve(projectRoot, file);\n      // copy the file from template\n      promises.push(\n        fs.copy(\n          resolveFromLocalOrGlobal(projectRoot, path.join('@expo/webpack-config/template', file)),\n          projectFilePath,\n          { overwrite: true, recursive: true }\n        )\n      );\n\n      if (file in dependencyMap) {\n        const packageManager = PackageManager.createForProject(projectRoot, { log: Log.log });\n        for (const dependency of dependencyMap[file]) {\n          promises.push(packageManager.addDevAsync(dependency));\n        }\n      }\n    } else {\n      const fileName = path.basename(file);\n      const src = path.resolve(templateFolder, fileName);\n      const dest = path.resolve(projectRoot, staticPath, fileName);\n      if (await fs.pathExists(src)) {\n        promises.push(fs.copy(src, dest, { overwrite: true, recursive: true }));\n      } else {\n        throw new Error(`Expected template file for ${fileName} doesn't exist at path: ${src}`);\n      }\n    }\n  }\n  await Promise.all(promises);\n}\n\nexport async function actionAsync(projectRoot: string = './', options: Options = { force: false }) {\n  // Get the static path (defaults to 'web/')\n  // Doesn't matter if expo is installed or which mode is used.\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n\n  const templateFolder = path.dirname(\n    resolveFromLocalOrGlobal(projectRoot, '@expo/webpack-config/web-default/index.html')\n  );\n\n  const files = (await fs.readdir(templateFolder)).filter(item => item !== 'icon.png');\n  const { web: { staticPath = 'web' } = {} } = exp;\n\n  const allFiles = [\n    ...Object.keys(dependencyMap),\n    ...files.map(file => path.join(staticPath, file)),\n  ];\n  const values = [];\n\n  for (const file of allFiles) {\n    const localProjectFile = path.resolve(projectRoot, file);\n    const exists = fs.existsSync(localProjectFile);\n\n    values.push({\n      title: file,\n      value: file,\n      // @ts-ignore: broken types\n      disabled: !options.force && exists,\n      description:\n        options.force && exists ? chalk.red('This will overwrite the existing file') : '',\n    });\n  }\n\n  if (!values.filter(({ disabled }) => !disabled).length) {\n    Log.log(\n      chalk.yellow('\\nAll of the custom web files already exist.') +\n        '\\nTo regenerate the files run:' +\n        chalk.bold(' expo customize:web --force\\n')\n    );\n    return;\n  }\n\n  await maybeWarnToCommitAsync(projectRoot);\n\n  const { answer } = await prompts({\n    type: 'multiselect',\n    name: 'answer',\n    message: 'Which files would you like to generate?',\n    hint: '- Space to select. Return to submit',\n    // @ts-ignore: broken types\n    warn: 'File exists, use --force to overwrite it.',\n    limit: values.length,\n    instructions: '',\n    choices: values,\n  });\n  if (!answer || answer.length === 0) {\n    Log.log('\\n\\u203A Exiting with no change...\\n');\n    return;\n  }\n  await generateFilesAsync({\n    projectRoot,\n    staticPath,\n    options,\n    answer,\n    templateFolder,\n  });\n}\n"],"file":"customizeAsync.js"}