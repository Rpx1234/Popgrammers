{"version":3,"sources":["../../../src/commands/eject/ensureConfigAsync.ts"],"names":["ensureConfigExistsAsync","projectRoot","config","skipSDKVersionRequirement","dynamicConfigPath","staticConfigPath","exp","_internal","JsonFile","writeAsync","path","join","expo","json5","error","Log","addNewLineIfNone","CommandError","message","ensureConfigAsync","platforms","includes","pkg","entryPoint","log"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAKA;AACA;AACA;AACA;AACA;AACO,eAAeA,uBAAf,CAAuCC,WAAvC,EAA4D;AACjE,MAAI;AACF,UAAMC,MAAM,GAAG,yBAAUD,WAAV,EAAuB;AAAEE,MAAAA,yBAAyB,EAAE;AAA7B,KAAvB,CAAf,CADE,CAEF;;AACA,QAAI,CAACD,MAAM,CAACE,iBAAR,IAA6B,CAACF,MAAM,CAACG,gBAAzC,EAA2D;AACzD;AACA,aAAOH,MAAM,CAACI,GAAP,CAAWC,SAAlB,CAFyD,CAIzD;AACA;AACA;;AACA,YAAMC,oBAASC,UAAT,EACJ;AACAC,sBAAKC,IAAL,CAAUV,WAAV,EAAuB,UAAvB,CAFI,EAGJ;AAAEW,QAAAA,IAAI,EAAGV,MAAM,CAACI;AAAhB,OAHI,EAIJ;AAAEO,QAAAA,KAAK,EAAE;AAAT,OAJI,CAAN;AAMD;AACF,GAjBD,CAiBE,OAAOC,KAAP,EAAc;AACd;AACAC,mBAAIC,gBAAJ;;AACA,UAAM,KAAIC,uBAAJ,EAAkB,GAAEH,KAAK,CAACI,OAAQ,IAAlC,CAAN;AACD;AACF;;AAEM,eAAeC,iBAAf,CAAiC;AACtClB,EAAAA,WADsC;AAEtCmB,EAAAA;AAFsC,CAAjC,EAMkD;AACvD,QAAMpB,uBAAuB,CAACC,WAAD,CAA7B,CADuD,CAGvD;AACA;;AACA,MAAImB,SAAS,CAACC,QAAV,CAAmB,SAAnB,CAAJ,EAAmC;AACjC,UAAM,uDAAsBpB,WAAtB,CAAN;AACD;;AAED,MAAImB,SAAS,CAACC,QAAV,CAAmB,KAAnB,CAAJ,EAA+B;AAC7B,UAAM,gEAA+BpB,WAA/B,CAAN;AACD,GAXsD,CAavD;;;AACA,QAAM;AAAEK,IAAAA,GAAF;AAAOgB,IAAAA;AAAP,MAAe,yBAAUrB,WAAV,CAArB,CAduD,CAgBvD;;AACA,MAAIK,GAAG,CAACiB,UAAR,EAAoB;AAClB,WAAOjB,GAAG,CAACiB,UAAX;;AACAR,mBAAIS,GAAJ,CAAS,4DAAT;AACD,GApBsD,CAsBvD;;;AACA,SAAO;AAAElB,IAAAA,GAAF;AAAOgB,IAAAA;AAAP,GAAP;AACD","sourcesContent":["import { ExpoConfig, getConfig, PackageJSONConfig } from '@expo/config';\nimport { ModPlatform } from '@expo/config-plugins';\nimport JsonFile, { JSONObject } from '@expo/json-file';\nimport path from 'path';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport {\n  getOrPromptForBundleIdentifier,\n  getOrPromptForPackage,\n} from '../utils/getOrPromptApplicationId';\n\n/**\n * If an Expo config file does not exist, write a new one using the in-memory config.\n *\n * @param projectRoot\n */\nexport async function ensureConfigExistsAsync(projectRoot: string) {\n  try {\n    const config = getConfig(projectRoot, { skipSDKVersionRequirement: false });\n    // If no config exists in the file system then we should generate one so the process doesn't fail.\n    if (!config.dynamicConfigPath && !config.staticConfigPath) {\n      // Remove the internal object before writing.\n      delete config.exp._internal;\n\n      // Don't check for a custom config path because the process should fail if a custom file doesn't exist.\n      // Write the generated config.\n      // writeConfigJsonAsync(projectRoot, config.exp);\n      await JsonFile.writeAsync(\n        // TODO: Write to app.config.json because it's easier to convert to a js config file.\n        path.join(projectRoot, 'app.json'),\n        { expo: (config.exp as unknown) as JSONObject },\n        { json5: false }\n      );\n    }\n  } catch (error) {\n    // TODO(Bacon): Currently this is already handled in the command\n    Log.addNewLineIfNone();\n    throw new CommandError(`${error.message}\\n`);\n  }\n}\n\nexport async function ensureConfigAsync({\n  projectRoot,\n  platforms,\n}: {\n  projectRoot: string;\n  platforms: ModPlatform[];\n}): Promise<{ exp: ExpoConfig; pkg: PackageJSONConfig }> {\n  await ensureConfigExistsAsync(projectRoot);\n\n  // Prompt for the Android package first because it's more strict than the bundle identifier\n  // this means you'll have a better chance at matching the bundle identifier with the package name.\n  if (platforms.includes('android')) {\n    await getOrPromptForPackage(projectRoot);\n  }\n\n  if (platforms.includes('ios')) {\n    await getOrPromptForBundleIdentifier(projectRoot);\n  }\n\n  // We need the SDK version to proceed\n  const { exp, pkg } = getConfig(projectRoot);\n\n  // TODO: Should we attempt to persist this change?\n  if (exp.entryPoint) {\n    delete exp.entryPoint;\n    Log.log(`\\u203A expo.entryPoint is not needed and has been removed.`);\n  }\n\n  // Read config again because prompting for bundle id or package name may have mutated the results.\n  return { exp, pkg };\n}\n"],"file":"ensureConfigAsync.js"}