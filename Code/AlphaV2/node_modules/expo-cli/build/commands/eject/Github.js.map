{"version":3,"sources":["../../../src/commands/eject/Github.ts"],"names":["isUrlOk","url","res","status","getRepoInfo","examplePath","username","name","t","_branch","file","pathname","split","filePath","replace","join","undefined","infoResponse","info","json","branch","RegExp","hasRepo","contentsUrl","packagePath","resolveTemplateArgAsync","tempDir","oraInstance","appName","template","templatePath","repoInfo","repoUrl","URL","error","code","fail","path","resolve","fs","existsSync","CommandError","cwd","origin","chalk","red","AbortCommandError","found","text","bold","cyan","downloadAndExtractRepoAsync","root","projectName","basename","strip","length","Log","debug","fileList"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport * as fs from 'fs-extra';\nimport fetch from 'node-fetch';\nimport { Ora } from 'ora';\nimport path from 'path';\n\nimport CommandError, { AbortCommandError } from '../../CommandError';\nimport Log from '../../log';\nimport { extractLocalNpmTarballAsync, extractNpmTarballFromUrlAsync } from '../utils/npm';\n\ntype RepoInfo = {\n  username: string;\n  name: string;\n  branch: string;\n  filePath: string;\n};\n\nasync function isUrlOk(url: string): Promise<boolean> {\n  try {\n    const res = await fetch(url);\n    return res.status === 200;\n  } catch {\n    return false;\n  }\n}\n\nasync function getRepoInfo(url: any, examplePath?: string): Promise<RepoInfo | undefined> {\n  const [, username, name, t, _branch, ...file] = url.pathname.split('/');\n  const filePath = examplePath ? examplePath.replace(/^\\//, '') : file.join('/');\n\n  // Support repos whose entire purpose is to be an example, e.g.\n  // https://github.com/:username/:my-cool-example-repo-name.\n  if (t === undefined) {\n    const infoResponse = await fetch(`https://api.github.com/repos/${username}/${name}`);\n    if (infoResponse.status !== 200) {\n      return;\n    }\n    const info = await infoResponse.json();\n    return { username, name, branch: info['default_branch'], filePath };\n  }\n\n  // If examplePath is available, the branch name takes the entire path\n  const branch = examplePath\n    ? `${_branch}/${file.join('/')}`.replace(new RegExp(`/${filePath}|/$`), '')\n    : _branch;\n\n  if (username && name && branch && t === 'tree') {\n    return { username, name, branch, filePath };\n  }\n  return undefined;\n}\n\nfunction hasRepo({ username, name, branch, filePath }: RepoInfo) {\n  const contentsUrl = `https://api.github.com/repos/${username}/${name}/contents`;\n  const packagePath = `${filePath ? `/${filePath}` : ''}/package.json`;\n\n  return isUrlOk(contentsUrl + packagePath + `?ref=${branch}`);\n}\n\nexport async function resolveTemplateArgAsync(\n  tempDir: string,\n  oraInstance: Ora,\n  appName: string,\n  template: string,\n  templatePath?: string\n) {\n  let repoInfo: RepoInfo | undefined;\n\n  if (template) {\n    // @ts-ignore\n    let repoUrl: URL | undefined;\n\n    try {\n      // @ts-ignore\n      repoUrl = new URL(template);\n    } catch (error: any) {\n      if (error.code !== 'ERR_INVALID_URL') {\n        oraInstance.fail(error);\n        throw error;\n      }\n    }\n\n    if (!repoUrl) {\n      const templatePath = path.resolve(template);\n      if (!fs.existsSync(templatePath)) {\n        throw new CommandError(`template file does not exist: ${templatePath}`);\n      }\n\n      await extractLocalNpmTarballAsync(templatePath, { cwd: tempDir, name: appName });\n      return tempDir;\n    }\n\n    if (repoUrl.origin !== 'https://github.com') {\n      oraInstance.fail(\n        `Invalid URL: ${chalk.red(\n          `\"${template}\"`\n        )}. Only GitHub repositories are supported. Please use a GitHub URL and try again.`\n      );\n      throw new AbortCommandError();\n    }\n\n    repoInfo = await getRepoInfo(repoUrl, templatePath);\n\n    if (!repoInfo) {\n      oraInstance.fail(\n        `Found invalid GitHub URL: ${chalk.red(`\"${template}\"`)}. Please fix the URL and try again.`\n      );\n      throw new AbortCommandError();\n    }\n\n    const found = await hasRepo(repoInfo);\n\n    if (!found) {\n      oraInstance.fail(\n        `Could not locate the repository for ${chalk.red(\n          `\"${template}\"`\n        )}. Please check that the repository exists and try again.`\n      );\n      throw new AbortCommandError();\n    }\n  }\n\n  if (repoInfo) {\n    oraInstance.text = chalk.bold(\n      `Downloading files from repo ${chalk.cyan(template)}. This might take a moment.`\n    );\n\n    await downloadAndExtractRepoAsync(tempDir, repoInfo);\n  }\n\n  return true;\n}\n\nfunction downloadAndExtractRepoAsync(\n  root: string,\n  { username, name, branch, filePath }: RepoInfo\n): Promise<void> {\n  const projectName = path.basename(root);\n\n  const strip = filePath ? filePath.split('/').length + 1 : 1;\n\n  const url = `https://codeload.github.com/${username}/${name}/tar.gz/${branch}`;\n  Log.debug('Downloading tarball from:', url);\n  return extractNpmTarballFromUrlAsync(url, {\n    cwd: root,\n    name: projectName,\n    strip,\n    fileList: [`${name}-${branch}${filePath ? `/${filePath}` : ''}`],\n  });\n}\n"],"file":"Github.js"}