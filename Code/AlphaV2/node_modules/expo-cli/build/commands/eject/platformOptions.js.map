{"version":3,"sources":["../../../src/commands/eject/platformOptions.ts"],"names":["platformsFromPlatform","platform","loose","process","Log","warn","CommandError","ensureValidPlatforms","platforms","isWindows","includes","chalk","bold","newLine","filter","assertPlatforms","length"],"mappings":";;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEO,SAASA,qBAAT,CACLC,QAAgB,GAAG,KADd,EAEL;AAAEC,EAAAA;AAAF,IAAiC,EAF5B,EAGU;AACf,UAAQD,QAAR;AACE,SAAK,KAAL;AACE,UAAIE,OAAO,CAACF,QAAR,KAAqB,OAArB,IAAgC,CAACC,KAArC,EAA4C;AAC1CE,uBAAIC,IAAJ,CAAS,mEAAT,EAD0C,CAE1C;;AACD;;AACD,aAAO,CAAC,KAAD,CAAP;;AACF,SAAK,SAAL;AACE,aAAO,CAAC,SAAD,CAAP;;AACF,SAAK,KAAL;AACE,UAAIH,KAAK,IAAIC,OAAO,CAACF,QAAR,KAAqB,OAAlC,EAA2C;AACzC,eAAO,CAAC,SAAD,EAAY,KAAZ,CAAP;AACD;;AACD,aAAO,CAAC,SAAD,CAAP;;AACF;AACE,YAAM,KAAIK,uBAAJ,EAAkB,yBAAwBL,QAAS,mCAAnD,CAAN;AAfJ;AAiBD;;AAEM,SAASM,oBAAT,CAA8BC,SAA9B,EAAuE;AAC5E,QAAMC,SAAS,GAAGN,OAAO,CAACF,QAAR,KAAqB,OAAvC,CAD4E,CAE5E;;AACA,MAAIQ,SAAS,IAAID,SAAS,CAACE,QAAV,CAAmB,KAAnB,CAAjB,EAA4C;AAC1CN,mBAAIC,IAAJ,CACG,6DAA4DM,iBAAMC,IAAN,CAC3D,YAD2D,CAE3D,yDAHJ;;AAKAR,mBAAIS,OAAJ;;AACA,WAAOL,SAAS,CAACM,MAAV,CAAiBb,QAAQ,IAAIA,QAAQ,KAAK,KAA1C,CAAP;AACD;;AACD,SAAOO,SAAP;AACD;;AAEM,SAASO,eAAT,CAAyBP,SAAzB,EAAmD;AACxD,MAAI,EAACA,SAAD,aAACA,SAAD,eAACA,SAAS,CAAEQ,MAAZ,CAAJ,EAAwB;AACtB,UAAM,KAAIV,uBAAJ,EAAiB,oDAAjB,CAAN;AACD;AACF","sourcesContent":["import { ModPlatform } from '@expo/config-plugins';\nimport chalk from 'chalk';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\n\nexport function platformsFromPlatform(\n  platform: string = 'all',\n  { loose }: { loose?: boolean } = {}\n): ModPlatform[] {\n  switch (platform) {\n    case 'ios':\n      if (process.platform === 'win32' && !loose) {\n        Log.warn('Ejecting is unsupported locally on windows, use eas build instead');\n        // continue anyways :shrug:\n      }\n      return ['ios'];\n    case 'android':\n      return ['android'];\n    case 'all':\n      if (loose || process.platform !== 'win32') {\n        return ['android', 'ios'];\n      }\n      return ['android'];\n    default:\n      throw new CommandError(`Unsupported platform \"${platform}\". Options are: ios, android, all`);\n  }\n}\n\nexport function ensureValidPlatforms(platforms: ModPlatform[]): ModPlatform[] {\n  const isWindows = process.platform === 'win32';\n  // Skip ejecting for iOS on Windows\n  if (isWindows && platforms.includes('ios')) {\n    Log.warn(\n      `⚠️  Skipping generating the iOS native project files. Run ${chalk.bold(\n        'expo eject'\n      )} again from macOS or Linux to generate the iOS project.`\n    );\n    Log.newLine();\n    return platforms.filter(platform => platform !== 'ios');\n  }\n  return platforms;\n}\n\nexport function assertPlatforms(platforms: ModPlatform[]) {\n  if (!platforms?.length) {\n    throw new CommandError('At least one platform must be enabled when syncing');\n  }\n}\n"],"file":"platformOptions.js"}