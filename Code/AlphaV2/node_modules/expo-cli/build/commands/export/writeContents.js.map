{"version":3,"sources":["../../../src/commands/export/writeContents.ts"],"names":["writeAsync","folder","fileName","contents","fs","promises","writeFile","path","join","writeDebugHtmlAsync","outputDir","fileNames","Log","log","debugHtml","Object","values","map","createBundleFileName","platform","hash","createBundleHash","bundle","crypto","createHash","update","digest","writeBundlesAsync","bundles","hashes","bundleOutput","entries","hermesBytecodeBundle","code","writeSourceMapsAsync","removeOriginalSourceMappingUrl","Promise","all","sourceMap","hermesSourcemap","mapName","jsBundleFileName","jsPath","mappingComment","appendFile","comment","writeMetadataJsonAsync","metadata","JSON","stringify","writeAssetMapAsync","assets","fromEntries","asset","writePlatformManifestsAsync","publicUrl","exp","pkg","dependencies","keys","manifests","manifest","bundleUrl","createMultiPlatformBundleInfo","key","on","reduce","prev","cur","configKey"],"mappings":"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","sourcesContent":["import type { ExpoAppManifest, HookArguments, PackageJSONConfig } from '@expo/config';\nimport type { BundleOutput } from '@expo/dev-server';\nimport crypto from 'crypto';\nimport fs from 'fs';\nimport { ensureDir } from 'fs-extra';\nimport path from 'path';\nimport urljoin from 'url-join';\nimport { ProjectAssets } from 'xdl';\n\nimport Log from '../../log';\nimport { truncateLastLinesAsync } from '../utils/truncateLastLinesAsync';\nimport { createMetadataJson } from './createMetadataJson';\n\ntype PlatformExpoAppManifest = ExpoAppManifest & {\n  platform: string;\n  bundleUrl: string;\n  dependencies: string[];\n};\n\nasync function writeAsync(folder: string, fileName: string, contents: any) {\n  await ensureDir(folder);\n  await fs.promises.writeFile(path.join(folder, fileName), contents);\n}\n\nexport async function writeDebugHtmlAsync({\n  outputDir,\n  fileNames,\n}: {\n  outputDir: string;\n  fileNames: Record<string, string>;\n}) {\n  // Make a debug html so user can debug their bundles\n  Log.log('Preparing additional debugging files');\n  const debugHtml = `\n      ${Object.values(fileNames)\n        .map(fileName => `<script src=\"${path.join('bundles', fileName)}\"></script>`)\n        .join('\\n      ')}\n      Open up this file in Chrome. In the JavaScript developer console, navigate to the Source tab.\n      You can see a red colored folder containing the original source code from your bundle.\n      `;\n\n  await writeAsync(outputDir, 'debug.html', debugHtml);\n}\n\n/**\n * @param props.platform native platform for the bundle\n * @param props.hash crypto hash for the bundle contents\n * @returns filename for the JS bundle.\n */\nfunction createBundleFileName({ platform, hash }: { platform: string; hash: string }): string {\n  return `${platform}-${hash}.js`;\n}\n\n/**\n * @param bundle JS bundle as a string\n * @returns crypto hash for the provided bundle\n */\nfunction createBundleHash(bundle: string | Uint8Array): string {\n  return crypto.createHash('md5').update(bundle).digest('hex');\n}\n\nexport async function writeBundlesAsync({\n  bundles,\n  outputDir,\n}: {\n  bundles: Record<string, Pick<BundleOutput, 'hermesBytecodeBundle' | 'code'>>;\n  outputDir: string;\n}) {\n  const hashes: Record<string, string> = {};\n  const fileNames: Record<string, string> = {};\n\n  for (const [platform, bundleOutput] of Object.entries(bundles)) {\n    const bundle = bundleOutput.hermesBytecodeBundle ?? bundleOutput.code;\n    const hash = createBundleHash(bundle);\n    const fileName = createBundleFileName({ platform, hash });\n\n    hashes[platform] = hash;\n    fileNames[platform] = fileName;\n    await writeAsync(outputDir, fileName, bundle);\n  }\n\n  return { hashes, fileNames };\n}\n\nexport async function writeSourceMapsAsync({\n  bundles,\n  hashes,\n  fileNames,\n  outputDir,\n  removeOriginalSourceMappingUrl,\n}: {\n  bundles: Record<\n    string,\n    Pick<BundleOutput, 'hermesSourcemap' | 'map' | 'hermesBytecodeBundle' | 'code'>\n  >;\n  hashes?: Record<string, string>;\n  fileNames?: Record<string, string>;\n  outputDir: string;\n  removeOriginalSourceMappingUrl?: boolean;\n}) {\n  return await Promise.all(\n    Object.entries(bundles).map(async ([platform, bundle]) => {\n      const sourceMap = bundle.hermesSourcemap ?? bundle.map;\n      const hash =\n        hashes?.[platform] ?? createBundleHash(bundle.hermesBytecodeBundle ?? bundle.code);\n      const mapName = `${platform}-${hash}.map`;\n      await writeAsync(outputDir, mapName, sourceMap);\n\n      const jsBundleFileName = fileNames?.[platform] ?? createBundleFileName({ platform, hash });\n      const jsPath = path.join(outputDir, jsBundleFileName);\n\n      if (removeOriginalSourceMappingUrl) {\n        // Remove original mapping to incorrect sourcemap paths\n        // In SDK 40+ and bare projects, we no longer need to do this.\n        Log.log(`Configuring source maps for ${platform}`);\n        await truncateLastLinesAsync(jsPath, 1);\n      }\n\n      // Add correct mapping to sourcemap paths\n      const mappingComment = `\\n//# sourceMappingURL=${mapName}`;\n      await fs.promises.appendFile(jsPath, mappingComment);\n      return {\n        platform,\n        fileName: mapName,\n        hash,\n        map: sourceMap,\n        comment: mappingComment,\n      };\n    })\n  );\n}\n\nexport async function writeMetadataJsonAsync({\n  outputDir,\n  bundles,\n  fileNames,\n}: {\n  outputDir: string;\n  bundles: Record<string, Pick<BundleOutput, 'assets'>>;\n  fileNames: Record<string, string>;\n}) {\n  const metadata = createMetadataJson({\n    bundles,\n    fileNames,\n  });\n  await writeAsync(outputDir, 'metadata.json', JSON.stringify(metadata));\n}\n\nexport async function writeAssetMapAsync({\n  outputDir,\n  assets,\n}: {\n  outputDir: string;\n  assets: ProjectAssets.Asset[];\n}) {\n  // Convert the assets array to a k/v pair where the asset hash is the key and the asset is the value.\n  const contents = Object.fromEntries(assets.map(asset => [asset.hash, asset]));\n\n  await writeAsync(outputDir, 'assetmap.json', JSON.stringify(contents));\n\n  return contents;\n}\n\nexport async function writePlatformManifestsAsync({\n  outputDir,\n  publicUrl,\n  fileNames,\n  exp,\n  pkg,\n}: {\n  outputDir: string;\n  publicUrl: string;\n  fileNames: Record<string, string>;\n  exp: ExpoAppManifest;\n  pkg: Pick<PackageJSONConfig, 'dependencies'>;\n}): Promise<Record<string, PlatformExpoAppManifest>> {\n  const dependencies = Object.keys(pkg.dependencies ?? {});\n  const manifests: Record<string, PlatformExpoAppManifest> = {};\n  for (const platform of Object.keys(fileNames)) {\n    // save the platform manifest\n    const manifest: PlatformExpoAppManifest = {\n      ...exp,\n      platform,\n      bundleUrl: urljoin(publicUrl, 'bundles', fileNames[platform]),\n      dependencies,\n    };\n    manifests[platform] = manifest;\n    await writeAsync(outputDir, `${platform}-index.json`, JSON.stringify(manifest));\n  }\n  return manifests;\n}\n\n// TODO: Refactor this to support more/less platforms better.\nexport type MultiPlatformBundleInfo = Pick<\n  HookArguments,\n  | 'androidManifestUrl'\n  | 'androidBundle'\n  | 'androidManifest'\n  | 'androidSourceMap'\n  | 'iosManifestUrl'\n  | 'iosBundle'\n  | 'iosManifest'\n  | 'iosSourceMap'\n>;\n\nexport function createMultiPlatformBundleInfo({\n  publicUrl,\n  bundles,\n  manifests,\n}: {\n  publicUrl: string;\n  bundles: Record<\n    string,\n    Pick<BundleOutput, 'hermesBytecodeBundle' | 'code' | 'hermesSourcemap' | 'map'>\n  >;\n  manifests: Record<string, PlatformExpoAppManifest>;\n}): MultiPlatformBundleInfo {\n  const keys: { key: string; on: (platform: string) => any }[] = [\n    {\n      key: 'ManifestUrl',\n      on: (platform: string) => urljoin(publicUrl, `${platform}-index.json`),\n    },\n    {\n      key: 'Manifest',\n      on: platform => manifests[platform] ?? null,\n    },\n    {\n      key: 'Bundle',\n      on: platform => bundles[platform].hermesBytecodeBundle ?? bundles[platform].code,\n    },\n    {\n      key: 'SourceMap',\n      on: platform => bundles[platform].hermesSourcemap ?? bundles[platform].map,\n    },\n  ];\n\n  return keys.reduce((prev, cur) => {\n    for (const platform of Object.keys(bundles)) {\n      // Like `iosManifestUrl`, or `androidBundle`\n      const configKey = platform + cur.key;\n      // @ts-ignore: needs refactor in the future -- currently a refactor would break the public API for publish hooks.\n      prev[configKey] = cur.on(platform);\n    }\n    return prev;\n  }, {} as MultiPlatformBundleInfo);\n}\n"],"file":"writeContents.js"}