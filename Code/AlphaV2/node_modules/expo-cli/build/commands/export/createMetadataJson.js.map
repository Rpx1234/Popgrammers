{"version":3,"sources":["../../../src/commands/export/createMetadataJson.ts"],"names":["createMetadataJson","bundles","fileNames","fileMetadata","Object","keys","forEach","platform","filename","bundle","path","join","assets","asset","fileHashes","map","hash","ext","type","metadata","version","bundler"],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAgBO,SAASA,kBAAT,CAA4B;AACjCC,EAAAA,OADiC;AAEjCC,EAAAA;AAFiC,CAA5B,EAMM;AACX;AACA,QAAMC,YAEL,GAAG,EAFJ;AAGAC,EAAAA,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqBK,OAArB,CAA6BC,QAAQ,IAAI;AACvC,UAAMC,QAAQ,GAAGN,SAAS,CAACK,QAAD,CAA1B;AACA,2BAAOC,QAAP,EAAkB,yBAAwBD,QAAS,EAAnD;AAEAJ,IAAAA,YAAY,CAACI,QAAD,CAAZ,GAAyB;AACvBE,MAAAA,MAAM,EAAEC,gBAAKC,IAAL,CAAU,SAAV,EAAqBH,QAArB,CADe;AAEvBI,MAAAA,MAAM,EAAE;AAFe,KAAzB;AAKAX,IAAAA,OAAO,CAACM,QAAD,CAAP,CAAkBK,MAAlB,CAAyBN,OAAzB,CAAkCO,KAAD,IAAmD;AAClFV,MAAAA,YAAY,CAACI,QAAD,CAAZ,CAAuBK,MAAvB,GAAgC,CAC9B,GAAGT,YAAY,CAACI,QAAD,CAAZ,CAAuBK,MADI,EAE9B,GAAGC,KAAK,CAACC,UAAN,CAAiBC,GAAjB,CAAqBC,IAAI,IAAI;AAC9B,eAAO;AAAEN,UAAAA,IAAI,EAAEA,gBAAKC,IAAL,CAAU,QAAV,EAAoBK,IAApB,CAAR;AAAmCC,UAAAA,GAAG,EAAEJ,KAAK,CAACK;AAA9C,SAAP;AACD,OAFE,CAF2B,CAAhC;AAMD,KAPD;AAQD,GAjBD;AAkBA,QAAMC,QAAkB,GAAG;AACzBC,IAAAA,OAAO,EAAE,CADgB;AAEzBC,IAAAA,OAAO,EAAE,OAFgB;AAGzBlB,IAAAA,YAAY,EAAEA;AAHW,GAA3B;AAMA,SAAOgB,QAAP;AACD","sourcesContent":["import type { BundleOutput } from '@expo/dev-server';\nimport assert from 'assert';\nimport path from 'path';\n\nexport type BundlePlatform = 'android' | 'ios';\n\ntype PlatformMetadata = { bundle: string; assets: { path: string; ext: string }[] };\n\ntype FileMetadata = {\n  [key in BundlePlatform]: PlatformMetadata;\n};\n\ntype Metadata = {\n  version: 0;\n  bundler: 'metro';\n  fileMetadata: FileMetadata;\n};\n\nexport function createMetadataJson({\n  bundles,\n  fileNames,\n}: {\n  bundles: Record<string, Pick<BundleOutput, 'assets'>>;\n  fileNames: Record<string, string>;\n}): Metadata {\n  // Build metadata.json\n  const fileMetadata: {\n    [platform: string]: Partial<PlatformMetadata>;\n  } = {};\n  Object.keys(bundles).forEach(platform => {\n    const filename = fileNames[platform];\n    assert(filename, `Expected filename for ${platform}`);\n\n    fileMetadata[platform] = {\n      bundle: path.join('bundles', filename),\n      assets: [],\n    };\n\n    bundles[platform].assets.forEach((asset: { type: string; fileHashes: string[] }) => {\n      fileMetadata[platform].assets = [\n        ...fileMetadata[platform].assets!,\n        ...asset.fileHashes.map(hash => {\n          return { path: path.join('assets', hash), ext: asset.type };\n        }),\n      ];\n    });\n  });\n  const metadata: Metadata = {\n    version: 0,\n    bundler: 'metro',\n    fileMetadata: fileMetadata as FileMetadata,\n  };\n\n  return metadata;\n}\n"],"file":"createMetadataJson.js"}