{"version":3,"sources":["../../../src/commands/export/mergeAppDistributions.ts"],"names":["isSelfHostedIndex","obj","sdkVersion","mergeAppDistributions","projectRoot","sourceDirs","outputDir","assetPathToWrite","path","resolve","fs","ensureDir","bundlesPathToWrite","androidIndexes","iosIndexes","sourceDir","promises","sourceAssetDir","outputAssetDir","assetPromise","copy","push","sourceBundleDir","outputBundleDir","bundlePromise","Promise","all","putJsonInMemory","indexPath","accumulator","index","JsonFile","readAsync","XDLError","Array","isArray","androidIndexPath","iosIndexPath","getSortedIndex","indexes","sort","index1","index2","semver","eq","Log","error","gte","sortedAndroidIndexes","sortedIosIndexes","Project","writeArtifactSafelyAsync","join","JSON","stringify"],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAMA,SAASA,iBAAT,CAA2BC,GAA3B,EAA6D;AAC3D,SAAO,CAAC,CAACA,GAAG,CAACC,UAAb;AACD,C,CAED;;;AACO,eAAeC,qBAAf,CACLC,WADK,EAELC,UAFK,EAGLC,SAHK,EAIU;AACf,QAAMC,gBAAgB,GAAGC,gBAAKC,OAAL,CAAaL,WAAb,EAA0BE,SAA1B,EAAqC,QAArC,CAAzB;;AACA,QAAMI,mBAAGC,SAAH,CAAaJ,gBAAb,CAAN;;AACA,QAAMK,kBAAkB,GAAGJ,gBAAKC,OAAL,CAAaL,WAAb,EAA0BE,SAA1B,EAAqC,SAArC,CAA3B;;AACA,QAAMI,mBAAGC,SAAH,CAAaC,kBAAb,CAAN,CAJe,CAMf;;AACA,QAAMC,cAAiC,GAAG,EAA1C;AACA,QAAMC,UAA6B,GAAG,EAAtC;;AAEA,OAAK,MAAMC,SAAX,IAAwBV,UAAxB,EAAoC;AAClC,UAAMW,QAAQ,GAAG,EAAjB,CADkC,CAGlC;;AACA,QAAID,SAAS,KAAKT,SAAlB,EAA6B;AAC3B;AACA,YAAMW,cAAc,GAAGT,gBAAKC,OAAL,CAAaL,WAAb,EAA0BW,SAA1B,EAAqC,QAArC,CAAvB;;AACA,YAAMG,cAAc,GAAGV,gBAAKC,OAAL,CAAaL,WAAb,EAA0BE,SAA1B,EAAqC,QAArC,CAAvB;;AACA,YAAMa,YAAY,GAAGT,mBAAGU,IAAH,CAAQH,cAAR,EAAwBC,cAAxB,CAArB;;AACAF,MAAAA,QAAQ,CAACK,IAAT,CAAcF,YAAd,EAL2B,CAO3B;;AACA,YAAMG,eAAe,GAAGd,gBAAKC,OAAL,CAAaL,WAAb,EAA0BW,SAA1B,EAAqC,SAArC,CAAxB;;AACA,YAAMQ,eAAe,GAAGf,gBAAKC,OAAL,CAAaL,WAAb,EAA0BE,SAA1B,EAAqC,SAArC,CAAxB;;AACA,YAAMkB,aAAa,GAAGd,mBAAGU,IAAH,CAAQE,eAAR,EAAyBC,eAAzB,CAAtB;;AACAP,MAAAA,QAAQ,CAACK,IAAT,CAAcG,aAAd;AAEA,YAAMC,OAAO,CAACC,GAAR,CAAYV,QAAZ,CAAN;AACD,KAlBiC,CAoBlC;;;AACA,UAAMW,eAAe,GAAG,OAAOC,SAAP,EAA0BC,WAA1B,KAA6D;AACnF,YAAMC,KAAK,GAAG,MAAMC,oBAASC,SAAT,CAAmBJ,SAAnB,CAApB;;AAEA,UAAI,CAAC5B,iBAAiB,CAAC8B,KAAD,CAAtB,EAA+B;AAC7B,cAAM,KAAIG,eAAJ,EACJ,kBADI,EAEH,qDAAoDL,SAAU,EAF3D,CAAN;AAID;;AACD,UAAIM,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;AACxB;AACAD,QAAAA,WAAW,CAACR,IAAZ,CAAiB,GAAGS,KAApB;AACD,OAHD,MAGO;AACLD,QAAAA,WAAW,CAACR,IAAZ,CAAiBS,KAAjB;AACD;AACF,KAfD;;AAiBA,UAAMM,gBAAgB,GAAG5B,gBAAKC,OAAL,CAAaL,WAAb,EAA0BW,SAA1B,EAAqC,oBAArC,CAAzB;;AACA,UAAMY,eAAe,CAACS,gBAAD,EAAmBvB,cAAnB,CAArB;;AAEA,UAAMwB,YAAY,GAAG7B,gBAAKC,OAAL,CAAaL,WAAb,EAA0BW,SAA1B,EAAqC,gBAArC,CAArB;;AACA,UAAMY,eAAe,CAACU,YAAD,EAAevB,UAAf,CAArB;AACD,GArDc,CAuDf;;;AACA,QAAMwB,cAAc,GAAIC,OAAD,IAAgC;AACrD,WAAOA,OAAO,CAACC,IAAR,CAAa,CAACC,MAAD,EAA0BC,MAA1B,KAAsD;AACxE,UAAIC,kBAAOC,EAAP,CAAUH,MAAM,CAACvC,UAAjB,EAA6BwC,MAAM,CAACxC,UAApC,CAAJ,EAAqD;AACnD2C,uBAAIC,KAAJ,CACG,6DAA4DL,MAAM,CAACvC,UAAW,4CADjF;AAGD;;AACD,aAAOyC,kBAAOI,GAAP,CAAWN,MAAM,CAACvC,UAAlB,EAA8BwC,MAAM,CAACxC,UAArC,IAAmD,CAAC,CAApD,GAAwD,CAA/D;AACD,KAPM,CAAP;AAQD,GATD;;AAWA,QAAM8C,oBAAoB,GAAGV,cAAc,CAACzB,cAAD,CAA3C;AACA,QAAMoC,gBAAgB,GAAGX,cAAc,CAACxB,UAAD,CAAvC,CApEe,CAsEf;;AACA,QAAMoC,eAAQC,wBAAR,CACJ/C,WADI,EAEJ,IAFI,EAGJI,gBAAK4C,IAAL,CAAU9C,SAAV,EAAqB,oBAArB,CAHI,EAIJ+C,IAAI,CAACC,SAAL,CAAeN,oBAAf,CAJI,CAAN;AAOA,QAAME,eAAQC,wBAAR,CACJ/C,WADI,EAEJ,IAFI,EAGJI,gBAAK4C,IAAL,CAAU9C,SAAV,EAAqB,gBAArB,CAHI,EAIJ+C,IAAI,CAACC,SAAL,CAAeL,gBAAf,CAJI,CAAN;AAMD","sourcesContent":["import { ExpoAppManifest } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport semver from 'semver';\nimport { Project, XDLError } from 'xdl';\n\nimport Log from '../../log';\n\ntype SelfHostedIndex = ExpoAppManifest & {\n  dependencies: string[];\n};\n\nfunction isSelfHostedIndex(obj: any): obj is SelfHostedIndex {\n  return !!obj.sdkVersion;\n}\n\n// Takes multiple exported apps in sourceDirs and coalesces them to one app in outputDir\nexport async function mergeAppDistributions(\n  projectRoot: string,\n  sourceDirs: string[],\n  outputDir: string\n): Promise<void> {\n  const assetPathToWrite = path.resolve(projectRoot, outputDir, 'assets');\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, outputDir, 'bundles');\n  await fs.ensureDir(bundlesPathToWrite);\n\n  // merge files from bundles and assets\n  const androidIndexes: SelfHostedIndex[] = [];\n  const iosIndexes: SelfHostedIndex[] = [];\n\n  for (const sourceDir of sourceDirs) {\n    const promises = [];\n\n    // copy over assets/bundles from other src dirs to the output dir\n    if (sourceDir !== outputDir) {\n      // copy file over to assetPath\n      const sourceAssetDir = path.resolve(projectRoot, sourceDir, 'assets');\n      const outputAssetDir = path.resolve(projectRoot, outputDir, 'assets');\n      const assetPromise = fs.copy(sourceAssetDir, outputAssetDir);\n      promises.push(assetPromise);\n\n      // copy files over to bundlePath\n      const sourceBundleDir = path.resolve(projectRoot, sourceDir, 'bundles');\n      const outputBundleDir = path.resolve(projectRoot, outputDir, 'bundles');\n      const bundlePromise = fs.copy(sourceBundleDir, outputBundleDir);\n      promises.push(bundlePromise);\n\n      await Promise.all(promises);\n    }\n\n    // put index.jsons into memory\n    const putJsonInMemory = async (indexPath: string, accumulator: SelfHostedIndex[]) => {\n      const index = await JsonFile.readAsync(indexPath);\n\n      if (!isSelfHostedIndex(index)) {\n        throw new XDLError(\n          'INVALID_MANIFEST',\n          `Invalid index.json, must specify an sdkVersion at ${indexPath}`\n        );\n      }\n      if (Array.isArray(index)) {\n        // index.json could also be an array\n        accumulator.push(...index);\n      } else {\n        accumulator.push(index);\n      }\n    };\n\n    const androidIndexPath = path.resolve(projectRoot, sourceDir, 'android-index.json');\n    await putJsonInMemory(androidIndexPath, androidIndexes);\n\n    const iosIndexPath = path.resolve(projectRoot, sourceDir, 'ios-index.json');\n    await putJsonInMemory(iosIndexPath, iosIndexes);\n  }\n\n  // sort indexes by descending sdk value\n  const getSortedIndex = (indexes: SelfHostedIndex[]) => {\n    return indexes.sort((index1: SelfHostedIndex, index2: SelfHostedIndex) => {\n      if (semver.eq(index1.sdkVersion, index2.sdkVersion)) {\n        Log.error(\n          `Encountered multiple index.json with the same SDK version ${index1.sdkVersion}. This could result in undefined behavior.`\n        );\n      }\n      return semver.gte(index1.sdkVersion, index2.sdkVersion) ? -1 : 1;\n    });\n  };\n\n  const sortedAndroidIndexes = getSortedIndex(androidIndexes);\n  const sortedIosIndexes = getSortedIndex(iosIndexes);\n\n  // Save the json arrays to disk\n  await Project.writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(sortedAndroidIndexes)\n  );\n\n  await Project.writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(sortedIosIndexes)\n  );\n}\n"],"file":"mergeAppDistributions.js"}