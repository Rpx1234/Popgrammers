{"version":3,"sources":["../../../src/commands/export/exportAsync.ts"],"names":["promptPublicUrlAsync","value","type","name","validate","UrlUtils","isHttps","message","CommandError","ensurePublicUrlAsync","url","isDev","program","nonInteractive","isURL","protocols","Log","nestedWarn","exportFilesAsync","projectRoot","options","platforms","platform","loose","exportOptions","dumpAssetmap","dumpSourcemap","dev","publishOptions","resetCache","clear","target","publicUrl","assetUrl","outputDir","experimentalBundle","mergeSourceDirectoriresAsync","mergeSrcDirs","length","srcDirs","mergeSrcDir","concat","mergeSrcUrl","join","nested","collectMergeSourceUrlsAsync","tmpFolder","path","resolve","fs","remove","ensureDir","downloadDecompressPromises","map","uniqFilename","basename","crypto","randomBytes","toString","tmpFolderUncompressed","push","Promise","all","actionAsync","outputPath","CreateApp","assertFolderEmptyAsync","folderName","overwrite","log"],"mappings":"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","sourcesContent":["import type { ProjectTarget } from '@expo/config';\nimport program from 'commander';\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { UrlUtils } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport prompt from '../../utils/prompts';\nimport { platformsFromPlatform } from '../eject/platformOptions';\nimport * as CreateApp from '../utils/CreateApp';\nimport { downloadAndDecompressAsync } from '../utils/Tar';\nimport { exportAppAsync } from './exportAppAsync';\nimport { mergeAppDistributions } from './mergeAppDistributions';\n\ntype Options = {\n  outputDir: string;\n  assetUrl: string;\n  publicUrl?: string;\n  mergeSrcUrl: string[];\n  mergeSrcDir: string[];\n  dev: boolean;\n  clear: boolean;\n  quiet: boolean;\n  platform: string;\n  target?: ProjectTarget;\n  dumpAssetmap: boolean;\n  dumpSourcemap: boolean;\n  maxWorkers?: number;\n  experimentalBundle: boolean;\n};\n\nexport async function promptPublicUrlAsync(): Promise<string> {\n  try {\n    const { value } = await prompt({\n      type: 'text',\n      name: 'value',\n      validate: UrlUtils.isHttps,\n      message: `What is the public url that will host the static files?`,\n    });\n    return value;\n  } catch {\n    throw new CommandError('MISSING_PUBLIC_URL', 'Missing required option: --public-url');\n  }\n}\n\nexport async function ensurePublicUrlAsync(url: any, isDev?: boolean): Promise<string> {\n  if (!url) {\n    if (program.nonInteractive) {\n      throw new CommandError('MISSING_PUBLIC_URL', 'Missing required option: --public-url');\n    }\n    url = await promptPublicUrlAsync();\n  }\n\n  // If we are not in dev mode, ensure that url is https\n  if (!isDev && !UrlUtils.isHttps(url)) {\n    throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n  } else if (!UrlUtils.isURL(url, { protocols: ['http', 'https'] })) {\n    Log.nestedWarn(\n      `Dev Mode: --public-url ${url} does not conform to the required HTTP(S) protocol.`\n    );\n  }\n\n  return url;\n}\n\n// TODO: We shouldn't need to wrap a method that is only used for one purpose.\nasync function exportFilesAsync(\n  projectRoot: string,\n  options: Pick<\n    Options,\n    | 'dumpAssetmap'\n    | 'dumpSourcemap'\n    | 'dev'\n    | 'clear'\n    | 'target'\n    | 'outputDir'\n    | 'publicUrl'\n    | 'platform'\n    | 'assetUrl'\n    | 'experimentalBundle'\n  >\n) {\n  const platforms = platformsFromPlatform(options.platform, { loose: true });\n\n  // Make outputDir an absolute path if it isnt already\n  const exportOptions = {\n    dumpAssetmap: options.dumpAssetmap,\n    dumpSourcemap: options.dumpSourcemap,\n    isDev: options.dev,\n    platforms,\n    publishOptions: {\n      resetCache: !!options.clear,\n      target: options.target,\n    },\n  };\n  return await exportAppAsync(\n    projectRoot,\n    options.publicUrl!,\n    options.assetUrl,\n    options.outputDir,\n    exportOptions,\n    options.experimentalBundle\n  );\n}\n\nasync function mergeSourceDirectoriresAsync(\n  projectRoot: string,\n  mergeSrcDirs: string[],\n  options: Pick<Options, 'mergeSrcUrl' | 'mergeSrcDir' | 'outputDir'>\n): Promise<void> {\n  if (!mergeSrcDirs.length) {\n    return;\n  }\n  const srcDirs = options.mergeSrcDir.concat(options.mergeSrcUrl).join(' ');\n  Log.nested(`Starting project merge of ${srcDirs} into ${options.outputDir}`);\n\n  // Merge app distributions\n  await mergeAppDistributions(\n    projectRoot,\n    [...mergeSrcDirs, options.outputDir], // merge stuff in srcDirs and outputDir together\n    options.outputDir\n  );\n  Log.nested(\n    `Project merge was successful. Your merged files can be found in ${options.outputDir}`\n  );\n}\n\nexport async function collectMergeSourceUrlsAsync(\n  projectRoot: string,\n  mergeSrcUrl: string[]\n): Promise<string[]> {\n  // Merge src dirs/urls into a multimanifest if specified\n  const mergeSrcDirs: string[] = [];\n\n  // src urls were specified to merge in, so download and decompress them\n  if (mergeSrcUrl.length > 0) {\n    // delete .tmp if it exists and recreate it anew\n    const tmpFolder = path.resolve(projectRoot, '.tmp');\n    await fs.remove(tmpFolder);\n    await fs.ensureDir(tmpFolder);\n\n    // Download the urls into a tmp dir\n    const downloadDecompressPromises = mergeSrcUrl.map(\n      async (url: string): Promise<void> => {\n        // Add the absolute paths to srcDir\n        const uniqFilename = `${path.basename(url, '.tar.gz')}_${crypto\n          .randomBytes(16)\n          .toString('hex')}`;\n\n        const tmpFolderUncompressed = path.resolve(tmpFolder, uniqFilename);\n        await fs.ensureDir(tmpFolderUncompressed);\n        await downloadAndDecompressAsync(url, tmpFolderUncompressed);\n        // add the decompressed folder to be merged\n        mergeSrcDirs.push(tmpFolderUncompressed);\n      }\n    );\n\n    await Promise.all(downloadDecompressPromises);\n  }\n  return mergeSrcDirs;\n}\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  if (!options.experimentalBundle) {\n    // Ensure URL\n    options.publicUrl = await ensurePublicUrlAsync(options.publicUrl, options.dev);\n  }\n\n  // Ensure the output directory is created\n  const outputPath = path.resolve(projectRoot, options.outputDir);\n  await fs.ensureDir(outputPath);\n\n  await CreateApp.assertFolderEmptyAsync({\n    projectRoot: outputPath,\n    folderName: options.outputDir,\n    // Always overwrite files, this is inline with most bundler tooling.\n    overwrite: true,\n  });\n\n  // Wrap the XDL method for exporting assets\n  await exportFilesAsync(projectRoot, options);\n\n  // Merge src dirs/urls into a multimanifest if specified\n  const mergeSrcDirs: string[] = await collectMergeSourceUrlsAsync(\n    projectRoot,\n    options.mergeSrcUrl\n  );\n  // add any local src dirs to be merged\n  mergeSrcDirs.push(...options.mergeSrcDir);\n\n  await mergeSourceDirectoriresAsync(projectRoot, mergeSrcDirs, options);\n\n  Log.log(`Export was successful. Your exported files can be found in ${options.outputDir}`);\n}\n"],"file":"exportAsync.js"}