{"version":3,"sources":["../../../src/commands/export/exportAppAsync.ts"],"names":["ANONYMOUS_USERNAME","exportAppAsync","projectRoot","publicUrl","assetUrl","outputDir","options","experimentalBundle","exp","pkg","hooks","Project","getPublishExpConfigAsync","publishOptions","absoluteOutputDir","path","resolve","defaultTarget","target","assetPathToWrite","bundlesPathToWrite","Promise","all","fs","ensureDir","Log","isDebug","newLine","log","bundles","createBundlesAsync","platforms","dev","isDev","useDevServer","Env","shouldUseDevServer","hashes","fileNames","assets","ProjectAssets","exportAssetsAsync","hostedUrl","assetPath","dumpAssetmap","dumpSourcemap","removeOriginalSourceMappingUrl","sdkVersion","semver","lt","validPostExportHooks","prepareHooks","mutateExpoConfigWithManifestValues","username","UserManager","getCurrentUsernameAsync","manifests","bundleInfo","runHooks","info","EmbeddedAssets","configureAsync","hookOptions","url","hook","file","runHook","e","warn","stack","assetUrlOverride","publishedTime","Date","toISOString","commitTime","releaseId","hashIds","HashIds","revisionId","encode","now","developer","tool","id","slug"],"mappings":"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","sourcesContent":["import { ExpoAppManifest, getDefaultTarget, HookArguments } from '@expo/config';\nimport fs from 'fs-extra';\nimport HashIds from 'hashids';\nimport path from 'path';\nimport semver from 'semver';\nimport { v1 as uuidv1, v4 as uuidv4 } from 'uuid';\nimport { EmbeddedAssets, Env, printBundleSizes, Project, ProjectAssets, UserManager } from 'xdl';\n\nimport Log from '../../log';\nimport { BundlePlatform } from './createMetadataJson';\nimport {\n  createMultiPlatformBundleInfo,\n  MultiPlatformBundleInfo,\n  writeAssetMapAsync,\n  writeBundlesAsync,\n  writeDebugHtmlAsync,\n  writeMetadataJsonAsync,\n  writePlatformManifestsAsync,\n  writeSourceMapsAsync,\n} from './writeContents';\n\nexport const ANONYMOUS_USERNAME = 'anonymous';\n\n/**\n * If the `experimentalBundle` flag is true, the structure of the outputDir will be:\n *\n * ```\n * ├── assets\n * │   └── *\n * ├── bundles\n * │   ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n * │   └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n * └── metadata.json\n * ```\n *\n * If the `experimentalBundle` flag is not true, then this function is for self hosting\n * and the outputDir will have the files created in the project directory the following way:\n *\n * ```\n * ├── android-index.json\n * ├── ios-index.json\n * ├── assets\n * │   └── 1eccbc4c41d49fd81840aef3eaabe862\n * └── bundles\n *       ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n *       └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n * ```\n */\nexport async function exportAppAsync(\n  projectRoot: string,\n  publicUrl: string,\n  assetUrl: string,\n  outputDir: string,\n  options: {\n    platforms: BundlePlatform[];\n    isDev?: boolean;\n    dumpAssetmap?: boolean;\n    dumpSourcemap?: boolean;\n    publishOptions?: Project.PublishOptions;\n  },\n  experimentalBundle: boolean\n): Promise<void> {\n  const { exp, pkg, hooks } = await Project.getPublishExpConfigAsync(\n    projectRoot,\n    options.publishOptions\n  );\n\n  const absoluteOutputDir = path.resolve(projectRoot, outputDir);\n  const defaultTarget = getDefaultTarget(projectRoot, exp);\n  const target = options.publishOptions?.target ?? defaultTarget;\n\n  const assetPathToWrite = path.resolve(absoluteOutputDir, 'assets');\n  const bundlesPathToWrite = path.resolve(absoluteOutputDir, 'bundles');\n\n  await Promise.all([fs.ensureDir(assetPathToWrite), fs.ensureDir(bundlesPathToWrite)]);\n\n  if (Log.isDebug) {\n    Log.newLine();\n    Log.log('Export Assets:');\n    Log.log(`- Asset target: ${target}`);\n    Log.newLine();\n  }\n\n  // Run metro bundler and create the JS bundles/source maps.\n  const bundles = await Project.createBundlesAsync(projectRoot, options.publishOptions, {\n    platforms: options.platforms,\n    dev: options.isDev,\n    useDevServer: Env.shouldUseDevServer(exp),\n    // TODO: Disable source map generation if we aren't outputting them.\n  });\n\n  // Log bundle size info to the user\n  printBundleSizes(bundles);\n\n  // Write the JS bundles to disk, and get the bundle file names (this could change with async chunk loading support).\n  const { hashes, fileNames } = await writeBundlesAsync({ bundles, outputDir: bundlesPathToWrite });\n\n  Log.log('Finished saving JS Bundles');\n\n  const { assets } = await ProjectAssets.exportAssetsAsync({\n    projectRoot,\n    exp,\n    hostedUrl: publicUrl,\n    assetPath: 'assets',\n    outputDir: absoluteOutputDir,\n    bundles,\n    experimentalBundle,\n  });\n\n  if (options.dumpAssetmap) {\n    Log.log('Dumping asset map');\n    await writeAssetMapAsync({ outputDir: absoluteOutputDir, assets });\n  }\n\n  // build source maps\n  if (options.dumpSourcemap) {\n    // TODO: Maybe move this into the bundler settings.\n    const removeOriginalSourceMappingUrl =\n      target === 'managed' && !!exp.sdkVersion && semver.lt(exp.sdkVersion, '40.0.0');\n\n    await writeSourceMapsAsync({\n      bundles,\n      hashes,\n      outputDir: bundlesPathToWrite,\n      fileNames,\n      removeOriginalSourceMappingUrl,\n    });\n    // If we output source maps, then add a debug HTML file which the user can open in\n    // the web browser to inspect the output like web.\n    await writeDebugHtmlAsync({\n      outputDir: absoluteOutputDir,\n      fileNames,\n    });\n  }\n\n  // Skip the hooks and manifest creation if building for EAS.\n  if (experimentalBundle) {\n    // Generate a metadata.json and bail.\n    await writeMetadataJsonAsync({ outputDir, bundles, fileNames });\n    return;\n  }\n\n  // Load the \"post export\" hooks\n  const validPostExportHooks = Project.prepareHooks(hooks, 'postExport', projectRoot);\n\n  // Append server values to the Expo config.\n  mutateExpoConfigWithManifestValues(exp, {\n    assetUrl,\n    isDev: options.isDev,\n    username: await UserManager.getCurrentUsernameAsync(),\n  });\n\n  // TODO: Add a comment explaining what platform manifests are used for\n  const manifests = await writePlatformManifestsAsync({\n    outputDir: absoluteOutputDir,\n    publicUrl,\n    fileNames,\n    exp,\n    pkg,\n  });\n\n  // Create the shared bundle info object in somewhat of a legacy format.\n  const bundleInfo = createMultiPlatformBundleInfo({ bundles, manifests, publicUrl });\n\n  // Run post export hooks for users who want to do things like uploading source maps to sentry.\n  runHooks({ projectRoot, exp, hooks: validPostExportHooks, info: bundleInfo });\n\n  // configure embedded assets for expo-updates or ExpoKit\n  await EmbeddedAssets.configureAsync({\n    ...bundleInfo,\n    projectRoot,\n    exp,\n    pkg,\n    target,\n  });\n}\n\nfunction runHooks({\n  projectRoot,\n  exp,\n  hooks,\n  info,\n}: {\n  projectRoot: string;\n  exp: ExpoAppManifest;\n  info: MultiPlatformBundleInfo;\n  hooks: Project.LoadedHook[];\n}) {\n  const hookOptions: Omit<HookArguments, 'config'> = {\n    url: null,\n    ...info,\n    projectRoot,\n    exp,\n    log: Log.info,\n  };\n\n  for (const hook of hooks) {\n    Log.log(`Running postExport hook: ${hook.file}`);\n    try {\n      Project.runHook(hook, hookOptions);\n    } catch (e) {\n      Log.warn(`Warning: postExport hook '${hook.file}' failed: ${e.stack}`);\n    }\n  }\n}\n\n// TODO: Move to expo/config for public manifests\nfunction mutateExpoConfigWithManifestValues(\n  exp: ExpoAppManifest,\n  { assetUrl, isDev, username }: { assetUrl: string; isDev?: boolean; username?: string | null }\n) {\n  // Add assetUrl to manifest\n  exp.assetUrlOverride = assetUrl;\n\n  exp.publishedTime = new Date().toISOString();\n  exp.commitTime = new Date().toISOString();\n  exp.releaseId = uuidv4();\n\n  // generate revisionId and id the same way www does\n  const hashIds = new HashIds(uuidv1(), 10);\n  exp.revisionId = hashIds.encode(Date.now());\n\n  if (isDev) {\n    exp.developer = {\n      tool: 'exp',\n    };\n  }\n\n  if (!username) {\n    username = ANONYMOUS_USERNAME;\n  }\n\n  exp.id = `@${username}/${exp.slug}`;\n\n  return exp;\n}\n"],"file":"exportAppAsync.js"}