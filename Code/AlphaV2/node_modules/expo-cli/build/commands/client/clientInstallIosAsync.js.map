{"version":3,"sources":["../../../src/commands/client/clientInstallIosAsync.ts"],"names":["actionAsync","options","forceLatest","latest","currentSdkConfig","ClientUpgradeUtils","getExpoSdkConfig","process","cwd","currentSdkVersion","sdkVersion","undefined","sdkVersions","Versions","sdkVersionsAsync","latestSdk","newestReleasedSdkVersionAsync","currentSdk","recommendedClient","getClient","latestClient","data","url","Log","error","chalk","bold","Simulator","upgradeExpoAsync","version","log","recommendedClientVersion","answer","message","availableClients","getAvailableClients","project","platform","length","targetClient","askClientToInstall","latestSdkVersion","clients","clientUrl"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport { Simulator, Versions } from 'xdl';\n\nimport Log from '../../log';\nimport { confirmAsync } from '../../utils/prompts';\nimport * as ClientUpgradeUtils from '../utils/ClientUpgradeUtils';\n\ntype Options = {\n  latest?: boolean;\n};\n\nexport async function actionAsync(options: Options) {\n  const forceLatest = !!options.latest;\n  const currentSdkConfig = await ClientUpgradeUtils.getExpoSdkConfig(process.cwd());\n  const currentSdkVersion = currentSdkConfig ? currentSdkConfig.sdkVersion : undefined;\n  const sdkVersions = await Versions.sdkVersionsAsync();\n  const latestSdk = await Versions.newestReleasedSdkVersionAsync();\n  const currentSdk = sdkVersions[currentSdkVersion!];\n  const recommendedClient = ClientUpgradeUtils.getClient('ios', currentSdk);\n  const latestClient = ClientUpgradeUtils.getClient('ios', latestSdk.data);\n\n  if (forceLatest) {\n    if (!latestClient?.url) {\n      Log.error(\n        `Unable to find latest client version. Check your internet connection or run this command again without the ${chalk.bold(\n          '--latest'\n        )} flag.`\n      );\n      return;\n    }\n\n    if (\n      await Simulator.upgradeExpoAsync({ url: latestClient.url, version: latestClient.version })\n    ) {\n      Log.log('Done!');\n    } else {\n      Log.error(`Unable to install Expo Go ${latestClient.version} for iOS.`);\n    }\n    return;\n  }\n\n  if (!currentSdkVersion) {\n    Log.log(\n      'Could not find your Expo project. If you run this from a project, we can help pick the right Expo Go version!'\n    );\n  }\n\n  if (currentSdk && !recommendedClient) {\n    Log.log(\n      `You are currently using SDK ${currentSdkVersion}. Unfortunately, we couldn't detect the proper client version for this SDK.`\n    );\n  }\n\n  if (currentSdk && recommendedClient) {\n    const recommendedClientVersion = recommendedClient.version || 'version unknown';\n    const answer = await confirmAsync({\n      message: `You are currently using SDK ${currentSdkVersion}. Would you like to install client ${recommendedClientVersion} released for this SDK?`,\n    });\n    if (answer) {\n      await Simulator.upgradeExpoAsync({\n        url: recommendedClient.url,\n        version: recommendedClient.version,\n      });\n      Log.log('Done!');\n      return;\n    }\n  } else {\n    const answer = await confirmAsync({\n      message: latestClient?.version\n        ? chalk`Do you want to install the latest client? {dim (${latestClient.version})}`\n        : 'Do you want to install the latest client?',\n    });\n    if (answer) {\n      await Simulator.upgradeExpoAsync({\n        url: latestClient?.url,\n        version: latestClient?.version,\n      });\n      Log.log('Done!');\n      return;\n    }\n  }\n\n  const availableClients = ClientUpgradeUtils.getAvailableClients({\n    sdkVersions,\n    project: currentSdkConfig,\n    platform: 'ios',\n  });\n\n  if (availableClients.length === 0) {\n    const answer = await confirmAsync({\n      message: currentSdk\n        ? `We don't have a compatible client for SDK ${currentSdkVersion}. Do you want to try the latest client?`\n        : \"It looks like we don't have a compatible client. Do you want to try the latest client?\",\n    });\n    if (answer) {\n      await Simulator.upgradeExpoAsync({\n        url: latestClient?.url,\n        version: latestClient?.version,\n      });\n      Log.log('Done!');\n    } else {\n      Log.log('No client to install');\n    }\n    return;\n  }\n\n  const targetClient = await ClientUpgradeUtils.askClientToInstall({\n    currentSdkVersion,\n    latestSdkVersion: latestSdk.version,\n    clients: availableClients,\n  });\n\n  if (await Simulator.upgradeExpoAsync({ url: targetClient.clientUrl })) {\n    Log.log('Done!');\n  }\n}\n"],"file":"clientInstallIosAsync.js"}