{"version":3,"sources":["../../../src/commands/build/startBuildAsync.ts"],"names":["validateOptions","options","schema","Joi","object","keys","current","boolean","mode","string","platform","any","valid","expIds","array","type","releaseChannel","regex","bundleIdentifier","publicUrl","sdkVersion","strict","error","validate","XDLError","toString","getConfigAsync","projectRoot","exp","pkg","configName","configPrefix","ThirdParty","getManifest","getExpAsync","version","name","slug","toLowerCase","startBuildAsync","user","UserManager","ensureLoggedInAsync","validateManifest","Analytics","logEvent","developerTool","Config","api","ApiV2","clientForUser","putAsync","manifest","ios","android","package"],"mappings":"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","sourcesContent":["import { configFilename, getConfig } from '@expo/config';\nimport Joi from 'joi';\nimport slug from 'slugify';\nimport { Analytics, ApiV2, Config, ThirdParty, UserManager, XDLError } from 'xdl';\n\nexport type BuildCreatedResult = {\n  id: string;\n  ids: string[];\n  priority: 'normal' | 'high';\n  canPurchasePriorityBuilds: boolean;\n  numberOfRemainingPriorityBuilds: number;\n  hasUnlimitedPriorityBuilds: boolean;\n};\n\nexport type GetExpConfigOptions = {\n  current?: boolean;\n  mode?: string;\n  platform?: 'android' | 'ios' | 'all';\n  expIds?: string[];\n  type?: string;\n  releaseChannel?: string;\n  bundleIdentifier?: string;\n  publicUrl?: string;\n  sdkVersion?: string;\n};\n\nexport function validateOptions(options: any) {\n  const schema = Joi.object().keys({\n    current: Joi.boolean(),\n    mode: Joi.string(),\n    platform: Joi.any().valid('ios', 'android', 'all'),\n    expIds: Joi.array(),\n    type: Joi.any().valid('archive', 'simulator', 'client', 'app-bundle', 'apk'),\n    releaseChannel: Joi.string().regex(/[a-z\\d][a-z\\d._-]*/),\n    bundleIdentifier: Joi.string().regex(/^[a-zA-Z0-9-.]+$/),\n    publicUrl: Joi.string(),\n    sdkVersion: Joi.string().strict(),\n  });\n\n  const { error } = schema.validate(options);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n}\n\nasync function getConfigAsync(\n  projectRoot: string,\n  options: Pick<GetExpConfigOptions, 'publicUrl' | 'platform'> = {}\n) {\n  if (!options.publicUrl) {\n    // get the manifest from the project directory\n    const { exp, pkg } = getConfig(projectRoot);\n    const configName = configFilename(projectRoot);\n    return {\n      exp,\n      pkg,\n      configName: configFilename(projectRoot),\n      configPrefix: configName === 'app.json' ? 'expo.' : '',\n    };\n  } else {\n    // get the externally hosted manifest\n    return {\n      exp: await ThirdParty.getManifest(options.publicUrl, options),\n      configName: options.publicUrl,\n      configPrefix: '',\n      pkg: {},\n    };\n  }\n}\n\nexport async function getExpAsync(\n  projectRoot: string,\n  options: Pick<GetExpConfigOptions, 'publicUrl' | 'mode' | 'platform'>\n) {\n  const { exp, pkg, configName, configPrefix } = await getConfigAsync(projectRoot, options);\n\n  if (!exp || !pkg) {\n    throw new XDLError(\n      'NO_PACKAGE_JSON',\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && 'version' in pkg && pkg.version) {\n    exp.version = pkg.version;\n  }\n  if (!exp.name && 'name' in pkg && typeof pkg.name === 'string') {\n    exp.name = pkg.name;\n  }\n  if (!exp.slug && typeof exp.name === 'string') {\n    exp.slug = slug(exp.name.toLowerCase());\n  }\n  return { exp, configName, configPrefix };\n}\n\nexport async function startBuildAsync(\n  projectRoot: string,\n  options: GetExpConfigOptions = {}\n): Promise<BuildCreatedResult> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  validateOptions(options);\n  const { exp, configName, configPrefix } = await getExpAsync(projectRoot, options);\n  validateManifest(options, exp, configName, configPrefix);\n\n  Analytics.logEvent('Build Shell App', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    platform: options.platform,\n  });\n\n  const api = ApiV2.clientForUser(user);\n  return await api.putAsync('build/start', { manifest: exp, options });\n}\n\nfunction validateManifest(options: any, exp: any, configName: string, configPrefix: string) {\n  if (options.platform === 'ios' || options.platform === 'all') {\n    if (!exp.ios || !exp.ios.bundleIdentifier) {\n      throw new XDLError(\n        'INVALID_MANIFEST',\n        `Must specify a bundle identifier in order to build this experience for iOS. ` +\n          `Please specify one in ${configName} at \"${configPrefix}ios.bundleIdentifier\"`\n      );\n    }\n  }\n\n  if (options.platform === 'android' || options.platform === 'all') {\n    if (!exp.android || !exp.android.package) {\n      throw new XDLError(\n        'INVALID_MANIFEST',\n        `Must specify a java package in order to build this experience for Android. ` +\n          `Please specify one in ${configName} at \"${configPrefix}android.package\"`\n      );\n    }\n  }\n}\n"],"file":"startBuildAsync.js"}