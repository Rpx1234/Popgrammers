{"version":3,"sources":["../../../../../src/commands/build/ios/utils/image.ts"],"names":["getImageStreamAsync","imagePathOrURL","isUrl","UrlUtils","isURL","protocols","requireProtocol","response","axios","get","responseType","data","fs","createReadStream","ensurePNGIsNotTransparent","hasAlreadyResolved","stream","Promise","res","rej","pipe","PNG","filterType","on","alpha","close","validateAlphaChannelIsEmpty","width","height","err","y","x","idx","XDLError"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,eAAeA,mBAAf,CAAmCC,cAAnC,EAA2D;AACzD,QAAMC,KAAK,GAAGC,gBAASC,KAAT,CAAeH,cAAf,EAA+B;AAC3CI,IAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,OAAT,CADgC;AAE3CC,IAAAA,eAAe,EAAE;AAF0B,GAA/B,CAAd;;AAKA,MAAIJ,KAAJ,EAAW;AACT,UAAMK,QAAQ,GAAG,MAAMC,iBAAMC,GAAN,CAAoBR,cAApB,EAAoC;AAAES,MAAAA,YAAY,EAAE;AAAhB,KAApC,CAAvB;AACA,WAAOH,QAAQ,CAACI,IAAhB;AACD,GAHD,MAGO;AACL,WAAOC,mBAAGC,gBAAH,CAAoBZ,cAApB,CAAP;AACD;AACF;;AAEM,eAAea,yBAAf,CAAyCb,cAAzC,EAAgF;AACrF,MAAIc,kBAAkB,GAAG,KAAzB;AACA,QAAMC,MAAM,GAAG,MAAMhB,mBAAmB,CAACC,cAAD,CAAxC;AAEA,SAAO,IAAIgB,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/BH,IAAAA,MAAM,CACHI,IADH,CACQ,KAAIC,YAAJ,EAAQ;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAR,CADR,EAEGC,EAFH,CAEM,UAFN,EAEkB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAe;AAC7B,UAAI,CAACA,KAAL,EAAY;AACVT,QAAAA,kBAAkB,GAAG,IAArB;AACA,YAAI,WAAWC,MAAf,EAAuBA,MAAM,CAACS,KAAP;AACvBP,QAAAA,GAAG;AACJ;AACF,KARH,EASGK,EATH,CASM,QATN,EASgB,MAAM;AAClB,UAAIR,kBAAJ,EAAwB;AACtB;AACD;;AACD,UAAI;AACF;AACAW,QAAAA,2BAA2B,CAAC,KAAKf,IAAN,EAAY;AAAEgB,UAAAA,KAAK,EAAE,KAAKA,KAAd;AAAqBC,UAAAA,MAAM,EAAE,KAAKA;AAAlC,SAAZ,CAA3B;AACAV,QAAAA,GAAG;AACJ,OAJD,CAIE,OAAOW,GAAP,EAAY;AACZV,QAAAA,GAAG,CAACU,GAAD,CAAH;AACD;AACF,KApBH,EAqBGN,EArBH,CAqBM,OArBN,EAqBeM,GAAG,IAAIV,GAAG,CAACU,GAAD,CArBzB;AAsBD,GAvBM,CAAP;AAwBD;;AAED,SAASH,2BAAT,CACEf,IADF,EAEE;AAAEgB,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAFF,EAGQ;AACN,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAApB,EAA4BE,CAAC,EAA7B,EAAiC;AAC/B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAApB,EAA2BI,CAAC,EAA5B,EAAgC;AAC9B,YAAMC,GAAG,GAAG,CAACL,KAAK,GAAGG,CAAR,GAAYC,CAAb,IAAkB,CAA9B;;AACA,UAAIpB,IAAI,CAACqB,GAAG,GAAG,CAAP,CAAJ,KAAkB,GAAtB,EAA2B;AACzB,cAAM,KAAIC,eAAJ,EACJ,gBADI,EAEH,+IAFG,CAAN;AAID;AACF;AACF;AACF","sourcesContent":["import axios from 'axios';\nimport fs from 'fs-extra';\nimport { PNG } from 'pngjs';\nimport { Readable } from 'stream';\nimport { UrlUtils, XDLError } from 'xdl';\n\nasync function getImageStreamAsync(imagePathOrURL: string) {\n  const isUrl = UrlUtils.isURL(imagePathOrURL, {\n    protocols: ['http', 'https'],\n    requireProtocol: true,\n  });\n\n  if (isUrl) {\n    const response = await axios.get<Readable>(imagePathOrURL, { responseType: 'stream' });\n    return response.data;\n  } else {\n    return fs.createReadStream(imagePathOrURL);\n  }\n}\n\nexport async function ensurePNGIsNotTransparent(imagePathOrURL: string): Promise<void> {\n  let hasAlreadyResolved = false;\n  const stream = await getImageStreamAsync(imagePathOrURL);\n\n  return new Promise((res, rej) => {\n    stream\n      .pipe(new PNG({ filterType: 4 }))\n      .on('metadata', ({ alpha }) => {\n        if (!alpha) {\n          hasAlreadyResolved = true;\n          if ('close' in stream) stream.close();\n          res();\n        }\n      })\n      .on('parsed', () => {\n        if (hasAlreadyResolved) {\n          return;\n        }\n        try {\n          // @ts-ignore: 'this' implicitly has type 'any' because it does not have a type annotation.\n          validateAlphaChannelIsEmpty(this.data, { width: this.width, height: this.height });\n          res();\n        } catch (err) {\n          rej(err);\n        }\n      })\n      .on('error', err => rej(err));\n  });\n}\n\nfunction validateAlphaChannelIsEmpty(\n  data: Buffer,\n  { width, height }: { width: number; height: number }\n): void {\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const idx = (width * y + x) * 4;\n      if (data[idx + 3] !== 255) {\n        throw new XDLError(\n          'INVALID_ASSETS',\n          `Your app icon can't have transparency if you wish to upload your app Apple's App Store. Read more here: https://expo.fyi/remove-alpha-channel`\n        );\n      }\n    }\n  }\n}\n"],"file":"image.js"}