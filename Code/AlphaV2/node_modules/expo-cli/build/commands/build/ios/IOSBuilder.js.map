{"version":3,"sources":["../../../../src/commands/build/ios/IOSBuilder.ts"],"names":["noBundleIdMessage","missingBundleIdentifierError","XDLError","IOSBuilder","BaseBuilder","run","options","type","utils","askBuildType","archive","simulator","maybeWarnDamagedSimulator","Log","addNewLineIfNone","checkForBuildInProgress","prepareCredentials","publishedExpIds","ensureProjectIsPublished","publicUrl","checkStatusBeforeBuild","build","maybeExplainUploadStep","bestEffortAppleCtx","ctx","hasAppleCtx","appleId","ensureAppleCtx","nonInteractive","parent","confirm","message","log","chalk","green","checkProjectConfig","sdkVersion","manifest","checkIfSdkIsSupported","PLATFORMS","IOS","validateIcon","projectDir","updateProjectConfig","getAccountNameAsync","owner","getUserAsync","username","accountName","projectName","slug","bundleIdentifier","ios","appLookupParams","context","Context","init","skipCredentialsCheck","clearAndRevokeCredentialsIfRequested","produceCredentials","e","code","ErrorCodes","NON_INTERACTIVE","newLine","link","TerminalLink","fallbackToTextAndUrl","bold","red","CommandError","appCredentials","getAppCredentials","pushCredentials","getPushKey","distCredentials","getDistCert","_setupDistCert","distCertFromParams","SetupIosDist","error","_setupPushCert","pushKeyFromParams","SetupIosPush","_setupProvisioningProfile","provisioningProfileFromParams","provisioningProfilePath","SetupIosProvisioningProfile","apple","ensureBundleIdExistsAsync","appleCtx","enablePushNotifications","clearCredentials","clearDistCert","clearPushKey","clearPushCert","clearProvisioningProfile","shouldClearAnything","credsToClear","determineCredentialsToClear","shouldRevokeOnApple","revokeCredentials","provisioningProfile","getProvisioningProfile","view","RemoveProvisioningProfile","removeSpecific","distributionCert","RemoveIosDist","pushKey","RemoveIosPush","pushCert","getPushCert","deletePushCert","credsToClearAll","Boolean","undefined","ensureReleaseExists","platform","icon","err","process","transporterAppLink","learnMore","isMacOsCatalinaOrLater","os","semver","satisfies","release","underline","grey"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport pickBy from 'lodash/pickBy';\nimport os from 'os';\nimport semver from 'semver';\nimport { XDLError } from 'xdl';\n\nimport CommandError, { ErrorCodes } from '../../../CommandError';\nimport * as apple from '../../../appleApi';\nimport { displayProjectCredentials } from '../../../credentials/actions/list';\nimport { Context } from '../../../credentials/context';\nimport { runCredentialsManager } from '../../../credentials/route';\nimport {\n  getDistCertFromParams,\n  RemoveIosDist,\n  useDistCertFromParams,\n} from '../../../credentials/views/IosDistCert';\nimport {\n  getProvisioningProfileFromParams,\n  RemoveProvisioningProfile,\n  useProvisioningProfileFromParams,\n} from '../../../credentials/views/IosProvisioningProfile';\nimport {\n  getPushKeyFromParams,\n  RemoveIosPush,\n  usePushKeyFromParams,\n} from '../../../credentials/views/IosPushCredentials';\nimport { SetupIosDist } from '../../../credentials/views/SetupIosDist';\nimport { SetupIosProvisioningProfile } from '../../../credentials/views/SetupIosProvisioningProfile';\nimport { SetupIosPush } from '../../../credentials/views/SetupIosPush';\nimport Log from '../../../log';\nimport { confirmAsync } from '../../../utils/prompts';\nimport * as TerminalLink from '../../utils/TerminalLink';\nimport { getOrPromptForBundleIdentifier } from '../../utils/getOrPromptApplicationId';\nimport BaseBuilder from '../BaseBuilder';\nimport { PLATFORMS } from '../constants';\nimport * as utils from '../utils';\nimport { ensurePNGIsNotTransparent } from './utils/image';\n\nconst noBundleIdMessage = `Your project must have a \\`bundleIdentifier\\` set in the Expo config (app.json or app.config.js).\\nSee https://expo.fyi/bundle-identifier`;\n\nfunction missingBundleIdentifierError() {\n  return new XDLError('INVALID_OPTIONS', noBundleIdMessage);\n}\n\ninterface AppLookupParams {\n  accountName: string;\n  projectName: string;\n  bundleIdentifier: string;\n}\n\nclass IOSBuilder extends BaseBuilder {\n  async run(): Promise<void> {\n    // This gets run after all other validation to prevent users from having to answer this question multiple times.\n    this.options.type = await utils.askBuildType(this.options.type!, {\n      archive: 'Deploy the build to the store',\n      simulator: 'Run the build on a simulator',\n    });\n    this.maybeWarnDamagedSimulator();\n    Log.addNewLineIfNone();\n    await this.checkForBuildInProgress();\n    if (this.options.type === 'archive') {\n      await this.prepareCredentials();\n    }\n    const publishedExpIds = await this.ensureProjectIsPublished();\n    if (!this.options.publicUrl) {\n      await this.checkStatusBeforeBuild();\n    }\n    await this.build(publishedExpIds);\n\n    this.maybeExplainUploadStep();\n    this.maybeWarnDamagedSimulator();\n  }\n\n  // Try to get the user to provide Apple credentials upfront\n  // We will be able to do full validation of their iOS creds this way\n  async bestEffortAppleCtx(ctx: Context): Promise<void> {\n    if (ctx.hasAppleCtx()) {\n      // skip prompts if already have apple ctx\n      return;\n    }\n    if (this.options.appleId) {\n      // skip prompts and auto authenticate if flags are passed\n      return await ctx.ensureAppleCtx();\n    }\n\n    const nonInteractive = this.options.parent && this.options.parent.nonInteractive;\n    if (nonInteractive) {\n      return;\n    }\n\n    const confirm = await confirmAsync({\n      message: `Do you have access to the Apple account that will be used for submitting this app to the App Store?`,\n    });\n    if (confirm) {\n      return await ctx.ensureAppleCtx();\n    } else {\n      Log.log(\n        chalk.green(\n          'No problem! 👌 \\nWe can’t auto-generate credentials if you don’t have access to the main Apple account. \\nBut we can still set it up if you upload your credentials.'\n        )\n      );\n    }\n  }\n\n  // All config validation should happen here before any build logic takes place.\n  // It's important that the errors are revealed in a thoughtful manner.\n  async checkProjectConfig(): Promise<void> {\n    // Run this first because the error messages are related\n    // to ExpoKit which is harder to change than the bundle ID.\n    await super.checkProjectConfig();\n\n    // Check the SDK version next as it's the second hardest thing to change.\n    const sdkVersion = this.manifest.sdkVersion;\n\n    await utils.checkIfSdkIsSupported(sdkVersion!, PLATFORMS.IOS);\n\n    // Validate the icon third since it's fairly easy to modify.\n    await this.validateIcon();\n\n    // Check the bundle ID and possibly prompt the user to add a new one.\n    await getOrPromptForBundleIdentifier(this.projectDir);\n    // Update with the latest bundle ID\n    this.updateProjectConfig();\n  }\n\n  private async getAccountNameAsync(): Promise<string> {\n    if (this.manifest.owner) return this.manifest.owner;\n    return (await this.getUserAsync())?.username;\n  }\n\n  private async prepareCredentials() {\n    const accountName = await this.getAccountNameAsync();\n    const projectName = this.manifest.slug;\n    const bundleIdentifier = this.manifest.ios?.bundleIdentifier;\n    if (!bundleIdentifier) throw missingBundleIdentifierError();\n    const appLookupParams = {\n      accountName,\n      projectName,\n      bundleIdentifier,\n    };\n    const context = new Context();\n    await context.init(this.projectDir, {\n      ...this.options,\n      nonInteractive: this.options.parent?.nonInteractive,\n    });\n\n    if (this.options.skipCredentialsCheck) {\n      Log.log('Skipping credentials check...');\n      return;\n    }\n    await this.bestEffortAppleCtx(context);\n    await this.clearAndRevokeCredentialsIfRequested(context, appLookupParams);\n\n    try {\n      await this.produceCredentials(context, appLookupParams);\n    } catch (e) {\n      if (e.code === ErrorCodes.NON_INTERACTIVE) {\n        Log.newLine();\n        const link = TerminalLink.fallbackToTextAndUrl(\n          'expo.fyi/credentials-non-interactive',\n          'https://expo.fyi/credentials-non-interactive'\n        );\n        Log.log(\n          chalk.bold.red(\n            `Additional information needed to setup credentials in non-interactive mode.`\n          )\n        );\n        Log.log(chalk.bold.red(`Learn more about how to resolve this: ${link}.`));\n        Log.newLine();\n\n        // We don't want to display project credentials when we bail out due to\n        // non-interactive mode error, because we are unable to recover without\n        // user input.\n        throw new CommandError(\n          ErrorCodes.NON_INTERACTIVE,\n          'Unable to proceed, see the above error message.'\n        );\n      }\n\n      Log.log(\n        chalk.bold.red(\n          'Failed to prepare all credentials. \\nThe next time you build, we will automatically use the following configuration:'\n        )\n      );\n      throw e;\n    } finally {\n      const appCredentials = await context.ios.getAppCredentials(appLookupParams);\n      const pushCredentials = await context.ios.getPushKey(appLookupParams);\n      const distCredentials = await context.ios.getDistCert(appLookupParams);\n      displayProjectCredentials(appLookupParams, appCredentials, pushCredentials, distCredentials);\n    }\n  }\n\n  async _setupDistCert(ctx: Context, appLookupParams: AppLookupParams): Promise<void> {\n    try {\n      const distCertFromParams = await getDistCertFromParams(this.options);\n      if (distCertFromParams) {\n        await useDistCertFromParams(ctx, appLookupParams, distCertFromParams);\n      } else {\n        await runCredentialsManager(ctx, new SetupIosDist(appLookupParams));\n      }\n    } catch (e) {\n      Log.error('Failed to set up Distribution Certificate');\n      throw e;\n    }\n  }\n\n  async _setupPushCert(ctx: Context, appLookupParams: AppLookupParams): Promise<void> {\n    try {\n      const pushKeyFromParams = await getPushKeyFromParams(this.options);\n      if (pushKeyFromParams) {\n        await usePushKeyFromParams(ctx, appLookupParams, pushKeyFromParams);\n      } else {\n        await runCredentialsManager(ctx, new SetupIosPush(appLookupParams));\n      }\n    } catch (e) {\n      Log.error('Failed to set up Push Key');\n      throw e;\n    }\n  }\n\n  async _setupProvisioningProfile(ctx: Context, appLookupParams: AppLookupParams) {\n    try {\n      const provisioningProfileFromParams = await getProvisioningProfileFromParams(\n        this.options.provisioningProfilePath\n      );\n      if (provisioningProfileFromParams) {\n        await useProvisioningProfileFromParams(ctx, appLookupParams, provisioningProfileFromParams);\n      } else {\n        await runCredentialsManager(ctx, new SetupIosProvisioningProfile(appLookupParams));\n      }\n    } catch (e) {\n      Log.error('Failed to set up Provisioning Profile');\n      throw e;\n    }\n  }\n\n  async produceCredentials(ctx: Context, appLookupParams: AppLookupParams) {\n    if (ctx.hasAppleCtx()) {\n      await apple.ensureBundleIdExistsAsync(ctx.appleCtx, appLookupParams, {\n        enablePushNotifications: true,\n      });\n    }\n    await this._setupDistCert(ctx, appLookupParams);\n    await this._setupPushCert(ctx, appLookupParams);\n    await this._setupProvisioningProfile(ctx, appLookupParams);\n  }\n\n  async clearAndRevokeCredentialsIfRequested(\n    ctx: Context,\n    appLookupParams: AppLookupParams\n  ): Promise<void> {\n    const {\n      clearCredentials,\n      clearDistCert,\n      clearPushKey,\n      clearPushCert,\n      clearProvisioningProfile,\n    } = this.options;\n    const shouldClearAnything =\n      clearCredentials ||\n      clearDistCert ||\n      clearPushKey ||\n      clearPushCert ||\n      clearProvisioningProfile;\n    if (shouldClearAnything) {\n      const credsToClear = this.determineCredentialsToClear();\n      await this.clearCredentials(ctx, appLookupParams, credsToClear);\n    }\n  }\n\n  async clearCredentials(\n    ctx: Context,\n    appLookupParams: AppLookupParams,\n    credsToClear: Record<string, boolean>\n  ): Promise<void> {\n    const shouldRevokeOnApple = this.options.revokeCredentials;\n\n    const provisioningProfile = await ctx.ios.getProvisioningProfile(appLookupParams);\n    if (credsToClear.provisioningProfile && provisioningProfile) {\n      const view = new RemoveProvisioningProfile(appLookupParams.accountName, shouldRevokeOnApple);\n      await view.removeSpecific(ctx, appLookupParams);\n    }\n\n    const distributionCert = await ctx.ios.getDistCert(appLookupParams);\n    if (credsToClear.distributionCert && distributionCert) {\n      const view = new RemoveIosDist(appLookupParams.accountName, shouldRevokeOnApple);\n      await view.removeSpecific(ctx, distributionCert);\n    }\n\n    const pushKey = await ctx.ios.getPushKey(appLookupParams);\n    if (credsToClear.pushKey && pushKey) {\n      const view = new RemoveIosPush(appLookupParams.accountName, shouldRevokeOnApple);\n      await view.removeSpecific(ctx, pushKey);\n    }\n\n    const pushCert = await ctx.ios.getPushCert(appLookupParams);\n    if (credsToClear.pushCert && pushCert) {\n      await ctx.ios.deletePushCert(appLookupParams);\n    }\n  }\n\n  determineCredentialsToClear(): Record<string, boolean> {\n    const {\n      clearCredentials,\n      clearDistCert,\n      clearPushKey,\n      clearPushCert,\n      clearProvisioningProfile,\n    } = this.options;\n    const credsToClearAll = {\n      distributionCert: Boolean(clearCredentials || clearDistCert),\n      pushKey: Boolean(clearCredentials || clearPushKey),\n      // TODO: backward compatibility, remove when all users migrate to push keys\n      pushCert: Boolean(clearCredentials || clearPushCert),\n      provisioningProfile: Boolean(clearCredentials || clearProvisioningProfile),\n    };\n    return pickBy(credsToClearAll);\n  }\n\n  async ensureProjectIsPublished() {\n    if (this.options.publicUrl) {\n      return undefined;\n    } else {\n      return await this.ensureReleaseExists();\n    }\n  }\n\n  platform() {\n    return PLATFORMS.IOS;\n  }\n\n  // validates whether the icon doesn't have transparency\n  async validateIcon() {\n    // TODO: maybe recommend the icon builder website.\n    try {\n      const icon = this.manifest.ios?.icon ?? this.manifest.icon;\n      if (!icon) {\n        // icon is optional\n        return;\n      }\n      await ensurePNGIsNotTransparent(icon);\n    } catch (err) {\n      if (err instanceof XDLError) {\n        throw err;\n      } else {\n        // something weird happened, let's assume the icon is correct\n      }\n    }\n  }\n\n  maybeExplainUploadStep() {\n    if (process.platform !== 'darwin' || this.options.type === 'simulator') {\n      return;\n    }\n\n    Log.newLine();\n    Log.log(\n      `You can now publish to the App Store with ${TerminalLink.transporterAppLink()} or ${chalk.bold(\n        'eas submit --platform ios'\n      )}. ${TerminalLink.learnMore('https://docs.expo.dev/distribution/uploading-apps/')}`\n    );\n  }\n\n  // warns for \"damaged\" builds when targeting simulator\n  // see: https://github.com/expo/expo-cli/issues/1197\n  maybeWarnDamagedSimulator() {\n    // see: https://en.wikipedia.org/wiki/Darwin_%28operating_system%29#Release_history\n    const isMacOsCatalinaOrLater =\n      os.platform() === 'darwin' && semver.satisfies(os.release(), '>=19.0.0');\n\n    if (isMacOsCatalinaOrLater && this.options.type === 'simulator') {\n      Log.newLine();\n      Log.log(\n        chalk.bold(\n          `🚨 If the build is not installable on your simulator because of \"${chalk.underline(\n            `... is damaged and can't be opened.`\n          )}\", please run:`\n        )\n      );\n      Log.log(chalk.grey.bold('xattr -rd com.apple.quarantine /path/to/your.app'));\n    }\n  }\n}\n\nexport default IOSBuilder;\n"],"file":"IOSBuilder.js"}