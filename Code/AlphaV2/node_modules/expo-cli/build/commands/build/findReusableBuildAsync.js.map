{"version":3,"sources":["../../../src/commands/build/findReusableBuildAsync.ts"],"names":["findReusableBuildAsync","releaseChannel","platform","sdkVersion","slug","owner","user","UserManager","getCurrentUserAsync","buildReuseStatus","ApiV2","clientForUser","postAsync"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,eAAeA,sBAAf,CACLC,cADK,EAELC,QAFK,EAGLC,UAHK,EAILC,IAJK,EAKLC,KALK,EAMiD;AACtD,QAAMC,IAAI,GAAG,MAAMC,mBAAYC,mBAAZ,EAAnB;AAEA,QAAMC,gBAAgB,GAAG,MAAMC,aAAMC,aAAN,CAAoBL,IAApB,EAA0BM,SAA1B,CAAoC,wBAApC,EAA8D;AAC3FX,IAAAA,cAD2F;AAE3FC,IAAAA,QAF2F;AAG3FC,IAAAA,UAH2F;AAI3FC,IAAAA,IAJ2F;AAK3FC,IAAAA;AAL2F,GAA9D,CAA/B;AAQA,SAAOI,gBAAP;AACD","sourcesContent":["import { ApiV2, UserManager } from 'xdl';\n\nexport async function findReusableBuildAsync(\n  releaseChannel: string,\n  platform: string,\n  sdkVersion: string,\n  slug: string,\n  owner?: string\n): Promise<{ downloadUrl?: string; canReuse: boolean }> {\n  const user = await UserManager.getCurrentUserAsync();\n\n  const buildReuseStatus = await ApiV2.clientForUser(user).postAsync('standalone-build/reuse', {\n    releaseChannel,\n    platform,\n    sdkVersion,\n    slug,\n    owner,\n  });\n\n  return buildReuseStatus;\n}\n"],"file":"findReusableBuildAsync.js"}