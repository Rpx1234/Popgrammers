{"version":3,"sources":["../../../src/credentials/views/Select.ts"],"names":["SelectPlatform","open","ctx","platform","type","name","message","choices","map","value","title","optionsPerPage","view","SelectIosExperience","SelectAndroidExperience","CredentialsManager","get","changeMainView","accountName","hasProjectContext","manifest","owner","undefined","user","username","iosCredentials","ios","getAllCredentials","projectSpecificActions","action","handleAction","getAppLookupParamsFromContext","projectName","slug","projectOwner","bundleIdentifier","Error","iosPushView","CreateAndAssignIosPush","UpdateIosPush","RemoveIosPush","iosDistView","CreateIosDist","UpdateIosDist","RemoveIosDist","app","UseExistingPushNotification","UseExistingDistributionCert","iosProvisionigProfileView","RemoveProvisioningProfile","askAboutProjectMode","experienceName","runProjectContext","androidView","ExperienceView","credentials","android","fetchAll","Object","values","cred","QuitError","constructor","setPrototypeOf","prototype","DoQuit","runAsync","mainpage","AskQuit","selected","process","exit"],"mappings":"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","sourcesContent":["import assert from 'assert';\n\nimport prompts, { confirmAsync } from '../../utils/prompts';\nimport { displayAndroidCredentials, displayIosCredentials } from '../actions/list';\nimport { AppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport { CredentialsManager } from '../route';\nimport * as androidView from './AndroidCredentials';\nimport * as iosDistView from './IosDistCert';\nimport * as iosProvisionigProfileView from './IosProvisioningProfile';\nimport * as iosPushView from './IosPushCredentials';\n\nexport class SelectPlatform implements IView {\n  async open(ctx: Context): Promise<IView | null> {\n    const { platform } = await prompts({\n      type: 'select',\n      name: 'platform',\n      message: 'Select platform',\n      choices: ['ios', 'android'].map(value => ({ value, title: value })),\n      optionsPerPage: 20,\n    });\n    const view = platform === 'ios' ? new SelectIosExperience() : new SelectAndroidExperience();\n    CredentialsManager.get().changeMainView(view);\n    return view;\n  }\n}\n\nexport class SelectIosExperience implements IView {\n  async open(ctx: Context): Promise<IView | null> {\n    const accountName =\n      (ctx.hasProjectContext ? ctx.manifest.owner : undefined) ?? ctx.user.username;\n    const iosCredentials = await ctx.ios.getAllCredentials(accountName);\n\n    await displayIosCredentials(iosCredentials);\n\n    const projectSpecificActions: { value: string; title: string }[] = ctx.hasProjectContext\n      ? [\n          {\n            value: 'use-existing-push-ios',\n            title: 'Use existing Push Notifications Key in current project',\n          },\n          {\n            value: 'use-existing-dist-ios',\n            title: 'Use existing Distribution Certificate in current project',\n          },\n          // {\n          //   value: 'current-remove-push-ios',\n          //   name: 'Remove Push Notifactions credentials for current project',\n          // },\n          // {\n          //   value: 'current-remove-dist-ios',\n          //   name: 'Remove Distribution Certificate for current project',\n          // },\n          // {\n          //   value: 'current-remove-app-ios',\n          //   name: 'Remove all credentials for current project',\n          // },\n        ]\n      : [];\n\n    const { action } = await prompts({\n      type: 'select',\n      name: 'action',\n      message: 'What do you want to do?',\n      choices: [\n        ...projectSpecificActions,\n        { value: 'remove-provisioning-profile', title: 'Remove Provisioning Profile' },\n        { value: 'create-ios-push', title: 'Add new Push Notifications Key' },\n        { value: 'remove-ios-push', title: 'Remove Push Notification credentials' },\n        { value: 'update-ios-push', title: 'Update Push Notifications Key' },\n        { value: 'create-ios-dist', title: 'Add new Distribution Certificate' },\n        { value: 'remove-ios-dist', title: 'Remove Distribution Certificate' },\n        { value: 'update-ios-dist', title: 'Update Distribution Certificate' },\n      ],\n      optionsPerPage: 20,\n    });\n    return this.handleAction(ctx, accountName, action);\n  }\n\n  getAppLookupParamsFromContext(ctx: Context): AppLookupParams {\n    const projectName = ctx.manifest.slug;\n    const accountName = ctx.projectOwner;\n    const bundleIdentifier = ctx.manifest.ios?.bundleIdentifier;\n    if (!bundleIdentifier) {\n      throw new Error(`ios.bundleIdentifier need to be defined`);\n    }\n\n    return { accountName, projectName, bundleIdentifier };\n  }\n\n  handleAction(ctx: Context, accountName: string, action: string): IView | null {\n    switch (action) {\n      case 'create-ios-push':\n        return new iosPushView.CreateAndAssignIosPush(accountName);\n      case 'update-ios-push':\n        return new iosPushView.UpdateIosPush(accountName);\n      case 'remove-ios-push':\n        return new iosPushView.RemoveIosPush(accountName);\n      case 'create-ios-dist':\n        return new iosDistView.CreateIosDist(accountName);\n      case 'update-ios-dist':\n        return new iosDistView.UpdateIosDist(accountName);\n      case 'remove-ios-dist':\n        return new iosDistView.RemoveIosDist(accountName);\n      case 'use-existing-push-ios': {\n        const app = this.getAppLookupParamsFromContext(ctx);\n        return new iosPushView.UseExistingPushNotification(app);\n      }\n      case 'use-existing-dist-ios': {\n        const app = this.getAppLookupParamsFromContext(ctx);\n        return new iosDistView.UseExistingDistributionCert(app);\n      }\n      case 'remove-provisioning-profile':\n        return new iosProvisionigProfileView.RemoveProvisioningProfile(accountName);\n      default:\n        throw new Error('Unknown action selected');\n    }\n  }\n}\n\nexport class SelectAndroidExperience implements IView {\n  private askAboutProjectMode = true;\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (ctx.hasProjectContext && this.askAboutProjectMode) {\n      const experienceName = `@${ctx.projectOwner}/${ctx.manifest.slug}`;\n\n      const runProjectContext = await confirmAsync({\n        message: `You are currently in a directory with ${experienceName} experience. Do you want to select it?`,\n      });\n\n      if (runProjectContext) {\n        assert(ctx.manifest.slug, 'app.json slug field must be set');\n        const view = new androidView.ExperienceView(experienceName);\n        CredentialsManager.get().changeMainView(view);\n        return view;\n      }\n    }\n    this.askAboutProjectMode = false;\n\n    const credentials = await ctx.android.fetchAll();\n    await displayAndroidCredentials(Object.values(credentials));\n\n    const { experienceName } = await prompts({\n      type: 'select',\n      name: 'experienceName',\n      message: 'Select application',\n      choices: Object.values(credentials).map(cred => ({\n        title: cred.experienceName,\n        value: cred.experienceName,\n      })),\n      optionsPerPage: 20,\n    });\n\n    return new androidView.ExperienceView(experienceName);\n  }\n}\n\nexport class QuitError extends Error {\n  constructor() {\n    super();\n\n    // Set the prototype explicitly.\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, QuitError.prototype);\n  }\n}\n\nexport interface IQuit {\n  runAsync(mainpage: IView): Promise<IView>;\n}\n\nexport class DoQuit implements IQuit {\n  async runAsync(mainpage: IView): Promise<IView> {\n    throw new QuitError();\n  }\n}\n\nexport class AskQuit implements IQuit {\n  async runAsync(mainpage: IView): Promise<IView> {\n    const { selected } = await prompts({\n      type: 'select',\n      name: 'selected',\n      message: 'Do you want to quit Credential Manager',\n      choices: [\n        { value: 'exit', title: 'Quit Credential Manager' },\n        { value: 'mainpage', title: 'Go back to experience overview.' },\n      ],\n    });\n    if (selected === 'exit') {\n      process.exit(0);\n    }\n    return mainpage;\n  }\n}\n"],"file":"Select.js"}