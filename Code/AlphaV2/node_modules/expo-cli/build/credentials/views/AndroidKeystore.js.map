{"version":3,"sources":["../../../src/credentials/views/AndroidKeystore.ts"],"names":["keytoolCommandExists","err","UpdateKeystore","constructor","experienceName","options","open","ctx","android","fetchKeystore","displayWarning","keystore","provideOrGenerate","skipKeystoreValidation","updateKeystore","Log","log","chalk","green","providedKeystore","keystoreSchema","bestEffortKeystoreGeneration","warn","tmpKeystoreName","path","join","os","tmpdir","replace","fs","remove","keystoreData","AndroidCredentials","generateUploadKeystore","readFile","error","newLine","red","bold","RemoveKeystore","nonInteractive","CommandError","answers","message","initial","DownloadKeystore","displayCredentials","outputPath","removeKeystore","undefined","quiet","confirm","keystoreObj","keystorePassword","keyAlias","keyPassword","keystorePath","maybeRenameExistingFile","projectDir","storeBuf","Buffer","from","writeFile","getKeystoreFromParams","keystoreAlias","process","env","EXPO_ANDROID_KEYSTORE_PASSWORD","EXPO_ANDROID_KEY_PASSWORD","Error","useKeystore","filename","desiredFilePath","resolve","pathExists","num","rename"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport commandExists from 'command-exists';\nimport fs from 'fs-extra';\nimport omit from 'lodash/omit';\nimport os from 'os';\nimport path from 'path';\nimport { v4 as uuid } from 'uuid';\nimport { AndroidCredentials } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport { confirmAsync } from '../../utils/prompts';\nimport { askForUserProvided } from '../actions/promptForCredentials';\nimport { Context, IView } from '../context';\nimport { Keystore, keystoreSchema } from '../credentials';\nimport validateKeystoreAsync from '../utils/validateKeystore';\n\ninterface UpdateKeystoreOptions {\n  bestEffortKeystoreGeneration?: boolean;\n  skipKeystoreValidation: boolean;\n}\n\nasync function keytoolCommandExists(): Promise<boolean> {\n  try {\n    await commandExists('keytool');\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nclass UpdateKeystore implements IView {\n  constructor(private experienceName: string, private options: UpdateKeystoreOptions) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (await ctx.android.fetchKeystore(this.experienceName)) {\n      this.displayWarning();\n    }\n    const keystore = await this.provideOrGenerate(ctx);\n    if (!keystore) {\n      return null;\n    }\n    if (!this.options.skipKeystoreValidation) {\n      await validateKeystoreAsync(keystore);\n    }\n    await ctx.android.updateKeystore(this.experienceName, keystore);\n    Log.log(chalk.green('Keystore updated successfully'));\n    return null;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<Keystore | null> {\n    const providedKeystore = await askForUserProvided(keystoreSchema);\n    if (providedKeystore) {\n      return providedKeystore;\n    } else if (this.options.bestEffortKeystoreGeneration && !(await keytoolCommandExists())) {\n      Log.warn(\n        'The `keytool` utility was not found in your PATH. A new Keystore will be generated on Expo servers.'\n      );\n      return null;\n    }\n\n    const tmpKeystoreName = path.join(\n      os.tmpdir(),\n      `${this.experienceName}_${uuid()}_tmp.jks`.replace('/', '__')\n    );\n    try {\n      await fs.remove(tmpKeystoreName);\n      const keystoreData = await AndroidCredentials.generateUploadKeystore(\n        tmpKeystoreName,\n        '--------------',\n        this.experienceName\n      );\n\n      return {\n        ...omit(keystoreData, 'keystorePath'),\n        keystore: await fs.readFile(tmpKeystoreName, 'base64'),\n      };\n    } catch (error) {\n      Log.warn(\n        'Failed to generate Android Keystore, it will be generated on Expo servers during the build'\n      );\n      throw error;\n    } finally {\n      await fs.remove(tmpKeystoreName);\n    }\n  }\n\n  async displayWarning() {\n    Log.newLine();\n    Log.warn(\n      `⚠️  Updating your Android build credentials will remove previous version from our servers, this is a ${chalk.red(\n        'PERMANENT and IRREVERSIBLE action.'\n      )}`\n    );\n    Log.warn(\n      chalk.bold(\n        'Android Keystore must be identical to the one previously used to submit your app to the Google Play Store.'\n      )\n    );\n  }\n}\n\nclass RemoveKeystore implements IView {\n  constructor(private experienceName: string) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!(await ctx.android.fetchKeystore(this.experienceName))) {\n      Log.warn('There is no valid Keystore defined for this app');\n      return null;\n    }\n\n    this.displayWarning();\n\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Deleting build credentials is a destructive operation. Start the CLI without the '--non-interactive' flag to delete the credentials.\"\n      );\n    }\n\n    const answers = await confirmAsync({\n      message: 'Permanently delete the Android build credentials from our servers?',\n      initial: false,\n    });\n    if (answers) {\n      Log.log('Backing up your Android Keystore now...');\n      await new DownloadKeystore(this.experienceName, {\n        displayCredentials: true,\n        outputPath: `${this.experienceName}.bak.jks`.replace('/', '__'),\n      }).open(ctx);\n\n      await ctx.android.removeKeystore(this.experienceName);\n      Log.log(chalk.green('Keystore removed successfully'));\n    }\n    return null;\n  }\n\n  async displayWarning() {\n    Log.newLine();\n    Log.warn(\n      `⚠️  Clearing your Android build credentials from our build servers is a ${chalk.red(\n        'PERMANENT and IRREVERSIBLE action.'\n      )}`\n    );\n    Log.warn(\n      chalk.bold(\n        'Android Keystore must be identical to the one previously used to submit your app to the Google Play Store.'\n      )\n    );\n    Log.warn(\n      'Please read https://docs.expo.dev/distribution/building-standalone-apps/#if-you-choose-to-build-for-android for more info before proceeding.'\n    );\n    Log.newLine();\n    Log.warn(\n      chalk.bold('Your Keystore will be backed up to your current directory if you continue.')\n    );\n    Log.newLine();\n  }\n}\n\ninterface DownloadKeystoreOptions {\n  quiet?: boolean;\n  displayCredentials?: boolean;\n  outputPath?: string;\n}\n\nclass DownloadKeystore implements IView {\n  constructor(private experienceName: string, private options?: DownloadKeystoreOptions) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    let displayCredentials;\n\n    if (this.options?.displayCredentials !== undefined) {\n      displayCredentials = this.options?.displayCredentials;\n    } else if (this.options?.quiet) {\n      displayCredentials = false;\n    } else if (ctx.nonInteractive) {\n      displayCredentials = true;\n    } else {\n      const confirm = await confirmAsync({\n        message: 'Do you want to display the Android Keystore credentials?',\n      });\n\n      displayCredentials = confirm;\n    }\n\n    const keystoreObj = await ctx.android.fetchKeystore(this.experienceName);\n\n    const { keystore, keystorePassword, keyAlias, keyPassword }: any = keystoreObj || {};\n    if (!keystore || !keystorePassword || !keyAlias || !keyPassword) {\n      if (!this.options?.quiet) {\n        Log.warn('There is no valid Keystore defined for this app');\n      }\n      return null;\n    }\n\n    const keystorePath =\n      this.options?.outputPath ?? `${this.experienceName.replace('/', '__')}.bak.jks`;\n\n    await maybeRenameExistingFile(ctx.projectDir, keystorePath);\n    if (!this.options?.quiet) {\n      Log.log(chalk.green(`Saving Keystore to ${keystorePath}`));\n    }\n    const storeBuf = Buffer.from(keystore, 'base64');\n    await fs.writeFile(keystorePath, storeBuf);\n\n    if (this.options?.displayCredentials ?? displayCredentials) {\n      Log.log(`Keystore credentials\n  Keystore password: ${chalk.bold(keystorePassword)}\n  Key alias:         ${chalk.bold(keyAlias)}\n  Key password:      ${chalk.bold(keyPassword)}\n\n  Path to Keystore:  ${keystorePath}\n      `);\n    }\n    return null;\n  }\n}\n\nasync function getKeystoreFromParams(options: {\n  keystorePath?: string;\n  keystoreAlias?: string;\n}): Promise<Keystore | null> {\n  const keyAlias = options.keystoreAlias;\n  const keystorePath = options.keystorePath;\n  const keystorePassword = process.env.EXPO_ANDROID_KEYSTORE_PASSWORD;\n  const keyPassword = process.env.EXPO_ANDROID_KEY_PASSWORD;\n  if (!keyAlias && !keystorePath) {\n    return null;\n  }\n\n  if (!keystorePath || !keyAlias || !keystorePassword || !keyPassword) {\n    Log.log(keystorePath, keyAlias, keystorePassword, keyPassword);\n    throw new Error(\n      'In order to provide a Keystore through the CLI parameters, you have to pass --keystore-alias, --keystore-path parameters and set EXPO_ANDROID_KEY_PASSWORD and EXPO_ANDROID_KEYSTORE_PASSWORD environment variables.'\n    );\n  }\n  try {\n    const keystore = await fs.readFile(keystorePath, 'base64');\n    return {\n      keystore,\n      keyAlias,\n      keystorePassword,\n      keyPassword,\n    };\n  } catch (err) {\n    Log.error(`Error while reading file ${keystorePath}`);\n    throw err;\n  }\n}\n\nasync function useKeystore(\n  ctx: Context,\n  {\n    experienceName,\n    keystore,\n    skipKeystoreValidation,\n  }: { experienceName: string; keystore: Keystore; skipKeystoreValidation: boolean }\n) {\n  if (!skipKeystoreValidation) {\n    await validateKeystoreAsync(keystore);\n  }\n  await ctx.android.updateKeystore(experienceName, keystore);\n}\n\nasync function maybeRenameExistingFile(projectDir: string, filename: string) {\n  const desiredFilePath = path.resolve(projectDir, filename);\n\n  if (await fs.pathExists(desiredFilePath)) {\n    let num = 1;\n    while (await fs.pathExists(path.resolve(projectDir, `OLD_${num}_${filename}`))) {\n      num++;\n    }\n    Log.log(\n      `\\nA file already exists at \"${desiredFilePath}\"\\n  Renaming the existing file to OLD_${num}_${filename}\\n`\n    );\n    await fs.rename(desiredFilePath, path.resolve(projectDir, `OLD_${num}_${filename}`));\n  }\n}\n\nexport { UpdateKeystore, RemoveKeystore, DownloadKeystore, useKeystore, getKeystoreFromParams };\n"],"file":"AndroidKeystore.js"}