{"version":3,"sources":["../../../src/credentials/views/SetupIosBuildCredentials.ts"],"names":["SetupIosBuildCredentials","constructor","app","open","ctx","bestEffortAppleCtx","hasAppleCtx","appleApi","ensureBundleIdExistsAsync","appleCtx","enablePushNotifications","SetupIosDist","error","Log","distCert","ios","getDistCert","CommandError","SetupIosProvisioningProfile","nonInteractive","confirm","message","ensureAppleCtx","log","chalk","green","SetupIosBuildCredentialsFromLocal","localCredentials","credentialsJsonReader","readIosCredentialsAsync","projectDir","team","provisioningProfile","updateProvisioningProfile","credentials","getAllCredentials","accountName","appsUsingCert","id","appCredentials","filter","cred","distCredentialsId","appInfo","projectName","bundleIdentifier","newDistCert","certP12","distributionCertificate","certPassword","length","update","type","name","choices","title","value","updateDistCert","createdDistCert","createDistCert","useDistCert"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\n\nimport CommandError from '../../CommandError';\nimport * as appleApi from '../../appleApi';\nimport Log from '../../log';\nimport prompts, { confirmAsync } from '../../utils/prompts';\nimport { AppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport * as credentialsJsonReader from '../credentialsJson/read';\nimport { runCredentialsManager } from '../route';\nimport { readAppleTeam } from '../utils/provisioningProfile';\nimport { SetupIosDist } from './SetupIosDist';\nimport { SetupIosProvisioningProfile } from './SetupIosProvisioningProfile';\n\nexport class SetupIosBuildCredentials implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    await this.bestEffortAppleCtx(ctx);\n\n    if (ctx.hasAppleCtx()) {\n      await appleApi.ensureBundleIdExistsAsync(ctx.appleCtx, this.app, {\n        enablePushNotifications: true,\n      });\n    }\n    try {\n      await runCredentialsManager(ctx, new SetupIosDist(this.app));\n    } catch (error) {\n      Log.error('Failed to set up Distribution Certificate');\n      throw error;\n    }\n\n    const distCert = await ctx.ios.getDistCert(this.app);\n    if (!distCert) {\n      throw new CommandError(\n        'INSUFFICIENT_CREDENTIALS',\n        `This build request requires a valid distribution certificate.`\n      );\n    }\n\n    try {\n      await runCredentialsManager(ctx, new SetupIosProvisioningProfile(this.app));\n    } catch (error) {\n      Log.error('Failed to set up Provisioning Profile');\n      throw error;\n    }\n\n    return null;\n  }\n\n  // Try to get the user to provide Apple credentials upfront\n  // We will be able to do full validation of their iOS creds this way\n  async bestEffortAppleCtx(ctx: Context): Promise<void> {\n    if (ctx.hasAppleCtx()) {\n      // skip prompts if already have apple ctx\n      return;\n    }\n\n    if (ctx.nonInteractive) {\n      return;\n    }\n\n    const confirm = await confirmAsync({\n      message: `Do you have access to the Apple account that will be used for submitting this app to the App Store?`,\n    });\n    if (confirm) {\n      return await ctx.ensureAppleCtx();\n    } else {\n      Log.log(\n        chalk.green(\n          'No problem! ðŸ‘Œ \\nWe canâ€™t auto-generate credentials if you donâ€™t have access to the main Apple account. \\nBut we can still set it up if you upload your credentials.'\n        )\n      );\n    }\n  }\n}\n\nexport class SetupIosBuildCredentialsFromLocal implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    let localCredentials;\n    try {\n      localCredentials = await credentialsJsonReader.readIosCredentialsAsync(ctx.projectDir);\n    } catch (error) {\n      Log.error(\n        'Reading credentials from credentials.json failed. Make sure this file is correct and all credentials are present there.'\n      );\n      throw error;\n    }\n\n    const team = await readAppleTeam(localCredentials.provisioningProfile);\n    await ctx.ios.updateProvisioningProfile(this.app, {\n      ...team,\n      provisioningProfile: localCredentials.provisioningProfile,\n    });\n    const credentials = await ctx.ios.getAllCredentials(this.app.accountName);\n    const distCert = await ctx.ios.getDistCert(this.app);\n    const appsUsingCert = distCert?.id\n      ? (credentials.appCredentials || []).filter(cred => cred.distCredentialsId === distCert.id)\n      : [];\n\n    const appInfo = `@${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`;\n    const newDistCert = {\n      ...team,\n      certP12: localCredentials.distributionCertificate.certP12,\n      certPassword: localCredentials.distributionCertificate.certPassword,\n    };\n\n    if (appsUsingCert.length > 1 && distCert?.id) {\n      const { update } = await prompts({\n        type: 'select',\n        name: 'update',\n        message:\n          'Current distribution certificate is used by multiple apps. Do you want to update all of them?',\n        choices: [\n          { title: 'Update all apps', value: 'all' },\n          { title: `Update only ${appInfo}`, value: 'app' },\n        ],\n      });\n      if (update === 'all') {\n        await ctx.ios.updateDistCert(distCert.id, this.app.accountName, newDistCert);\n      } else {\n        const createdDistCert = await ctx.ios.createDistCert(this.app.accountName, newDistCert);\n        await ctx.ios.useDistCert(this.app, createdDistCert.id);\n      }\n    } else if (distCert?.id) {\n      await ctx.ios.updateDistCert(distCert.id, this.app.accountName, newDistCert);\n    } else {\n      const createdDistCert = await ctx.ios.createDistCert(this.app.accountName, newDistCert);\n      await ctx.ios.useDistCert(this.app, createdDistCert.id);\n    }\n    return null;\n  }\n}\n"],"file":"SetupIosBuildCredentials.js"}