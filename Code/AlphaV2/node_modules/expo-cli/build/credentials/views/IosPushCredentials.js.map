{"version":3,"sources":["../../../src/credentials/views/IosPushCredentials.ts"],"names":["APPLE_KEYS_TOO_MANY_GENERATED_ERROR","chalk","underline","CreateIosPush","constructor","accountName","create","ctx","newPushKey","provideOrGenerate","ios","createPushKey","open","pushKey","Log","log","_getRequiredQuestions","requiredQuestions","pushKeySchema","hasAppleCtx","questions","required","filter","q","_ensurePushKey","partialKey","teamId","appleCtx","team","id","teamName","name","Error","nonInteractive","userProvided","isValid","validatePushKey","generatePushKey","CreateAndAssignIosPush","hasProjectContext","assignToCurrentProject","pushKeyId","experienceName","projectOwner","manifest","slug","bundleIdentifier","confirm","message","app","usePushKey","green","RemoveIosPush","shouldRevoke","CommandError","selected","selectPushCredFromList","removePushCert","removeSpecific","deletePushCert","credentials","getAllCredentials","apps","getAppsUsingPushCred","appsList","map","appCred","join","deletePushKey","revoke","ensureAppleCtx","PushKeyManager","apnsKeyId","UpdateIosPush","allowLegacy","updateSpecific","updated","userCredentials","find","i","length","warn","updatePushKey","UseExistingPushNotification","projectName","CreateOrReusePushKey","assignPushKey","userCredentialsId","user","existingPushKeys","getValidPushKeys","autoselectedPushKey","formatPushKey","limit","Infinity","_createOrReuse","choices","title","value","question","type","action","iosCredentials","pushKeys","cred","yellow","pushKeyManager","pushInfoFromApple","list","filterRevokedPushKeys","getValidityStatus","validPushKeys","includes","options","filterInvalid","pushCerts","appCredentials","pushP12","pushPassword","pushCredentials","getName","pushCred","pushCert","pushId","entry","index","credentialsIndex","pushCredentialsId","formatPushKeyFromApple","appleInfo","joinApps","usedByString","gray","teamText","validityStatus","validityText","manager","e","code","keys","usedByExpo","cert","reduce","acc","here","grey","key","optionsPerPage","certInfo","spinner","start","filteredFormattedPushKeyArray","isValidPushKey","successMsg","succeed","failureMsg","fail","validKeyIdsOnAppleServer","validPushKeysOnExpoServer","getPushKeyFromParams","builderOptions","pushP8Path","apnsKeyP8","fs","readFile","usePushKeyFromParams","iosPushCredentials"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs-extra';\nimport terminalLink from 'terminal-link';\n\nimport CommandError from '../../CommandError';\nimport { isPushKey, PushKey, PushKeyInfo, PushKeyManager } from '../../appleApi';\nimport Log from '../../log';\nimport { ora } from '../../utils/ora';\nimport prompt, { confirmAsync, Question } from '../../utils/prompts';\nimport { displayIosUserCredentials } from '../actions/list';\nimport { askForUserProvided, CredentialSchema } from '../actions/promptForCredentials';\nimport { AppLookupParams, getAppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport {\n  IosAppCredentials,\n  IosCredentials,\n  IosPushCredentials,\n  pushKeySchema,\n} from '../credentials';\n\nconst APPLE_KEYS_TOO_MANY_GENERATED_ERROR = `\nYou can have only ${chalk.underline('two')} Push Notifactions Keys on your Apple Developer account.\nPlease revoke the old ones or reuse existing from your other apps.\nPlease remember that Apple Keys are not application specific!\n`;\n\nexport class CreateIosPush implements IView {\n  constructor(private accountName: string) {}\n\n  async create(ctx: Context): Promise<IosPushCredentials> {\n    const newPushKey = await this.provideOrGenerate(ctx);\n    return await ctx.ios.createPushKey(this.accountName, newPushKey);\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const pushKey = await this.create(ctx);\n\n    Log.log('Successfully created Push Notification Key\\n');\n    displayIosUserCredentials(pushKey);\n    Log.log();\n\n    return null;\n  }\n\n  _getRequiredQuestions(ctx: Context): CredentialSchema<PushKey> {\n    const requiredQuestions = { ...pushKeySchema };\n    if (ctx.hasAppleCtx() && requiredQuestions.questions) {\n      requiredQuestions.required = requiredQuestions.required.filter(q => q !== 'teamId');\n    }\n    return requiredQuestions;\n  }\n\n  _ensurePushKey(ctx: Context, partialKey: Partial<PushKey>): PushKey {\n    if (ctx.hasAppleCtx()) {\n      partialKey.teamId = ctx.appleCtx.team.id;\n      partialKey.teamName = ctx.appleCtx.team.name;\n    }\n    if (!isPushKey(partialKey)) {\n      throw new Error(`Not of type PushKey: ${partialKey}`);\n    }\n    return partialKey;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<PushKey> {\n    if (!ctx.nonInteractive) {\n      const requiredQuestions = this._getRequiredQuestions(ctx);\n      const userProvided = await askForUserProvided(requiredQuestions);\n      if (userProvided) {\n        const pushKey = this._ensurePushKey(ctx, userProvided);\n        const isValid = await validatePushKey(ctx, pushKey);\n        return isValid ? userProvided : await this.provideOrGenerate(ctx);\n      }\n    }\n    return await generatePushKey(ctx, this.accountName);\n  }\n}\n\nexport class CreateAndAssignIosPush extends CreateIosPush {\n  async open(ctx: Context): Promise<IView | null> {\n    const pushKey = await super.create(ctx);\n\n    Log.log('Successfully created Push Notification Key\\n');\n    displayIosUserCredentials(pushKey);\n    Log.log();\n\n    if (ctx.hasProjectContext && pushKey) {\n      await this.assignToCurrentProject(ctx, pushKey.id);\n      Log.log();\n    }\n\n    return null;\n  }\n\n  async assignToCurrentProject(ctx: Context, pushKeyId: number) {\n    const experienceName = `@${ctx.projectOwner}/${ctx.manifest.slug}`;\n    const bundleIdentifier = ctx.manifest?.ios?.bundleIdentifier;\n    if (!ctx.nonInteractive && bundleIdentifier) {\n      const confirm = await confirmAsync({\n        message: `Would you like to use this push key for the current project: ${experienceName} (${bundleIdentifier})?`,\n      });\n      if (!confirm) {\n        return;\n      }\n\n      const app = getAppLookupParams(experienceName, bundleIdentifier);\n      await ctx.ios.usePushKey(app, pushKeyId);\n      Log.log(\n        chalk.green(`Successfully assigned Push Key to ${experienceName} (${bundleIdentifier})`)\n      );\n    }\n  }\n}\n\nexport class RemoveIosPush implements IView {\n  constructor(private accountName: string, private shouldRevoke: boolean = false) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Start the CLI without the '--non-interactive' flag to select a push notification credential to remove.\"\n      );\n    }\n\n    const selected = await selectPushCredFromList(ctx, this.accountName);\n    if (selected) {\n      if (!('type' in selected)) {\n        const app = getAppLookupParams(selected.experienceName, selected.bundleIdentifier);\n        await this.removePushCert(ctx, app);\n        Log.log(chalk.green('Successfully removed Push Certificate'));\n      } else {\n        await this.removeSpecific(ctx, selected as IosPushCredentials);\n        Log.log(chalk.green('Successfully removed Push Notification Key'));\n      }\n    }\n    return null;\n  }\n\n  async removePushCert(ctx: Context, app: AppLookupParams): Promise<void> {\n    Log.log('Removing Push Certificate');\n    await ctx.ios.deletePushCert(app);\n  }\n\n  async removeSpecific(ctx: Context, selected: IosPushCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = getAppsUsingPushCred(credentials, selected);\n    const appsList = apps.map(appCred => appCred.experienceName).join(', ');\n\n    if (appsList && !ctx.nonInteractive) {\n      Log.log('Removing Push Key');\n      const confirm = await confirmAsync({\n        message: `Removing this key/cert will disable notifications in ${appsList}. Do you want to continue?`,\n      });\n      if (!confirm) {\n        Log.log('Aborting');\n        return;\n      }\n    }\n\n    Log.log('Removing Push Key...\\n');\n    await ctx.ios.deletePushKey(selected.id, this.accountName);\n\n    let shouldRevoke = this.shouldRevoke;\n    if (!shouldRevoke && !ctx.nonInteractive) {\n      const revoke = await confirmAsync({\n        message: `Do you also want to revoke it on Apple Developer Portal?`,\n      });\n      shouldRevoke = revoke;\n    }\n\n    if (shouldRevoke) {\n      await ctx.ensureAppleCtx();\n      await new PushKeyManager(ctx.appleCtx).revoke([selected.apnsKeyId]);\n    }\n  }\n}\n\nexport class UpdateIosPush implements IView {\n  constructor(private accountName: string) {}\n\n  async open(ctx: Context) {\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Start the CLI without the '--non-interactive' flag to select a push notification credential to update.\"\n      );\n    }\n\n    const selected = (await selectPushCredFromList(ctx, this.accountName, {\n      allowLegacy: false,\n    })) as IosPushCredentials;\n    if (selected) {\n      await this.updateSpecific(ctx, selected);\n\n      Log.log(chalk.green('Successfully updated Push Notification Key.\\n'));\n      const credentials = await ctx.ios.getAllCredentials(this.accountName);\n      const updated = credentials.userCredentials.find(i => i.id === selected.id);\n      if (updated) {\n        displayIosUserCredentials(updated);\n      }\n      Log.log();\n    }\n    return null;\n  }\n\n  async updateSpecific(ctx: Context, selected: IosPushCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = getAppsUsingPushCred(credentials, selected);\n    const appsList = apps.map(appCred => appCred.experienceName).join(', ');\n\n    if (apps.length > 1) {\n      if (ctx.nonInteractive) {\n        throw new CommandError(\n          'NON_INTERACTIVE',\n          `Updating credentials will affect all applications that are using this key (${appsList}). Start the CLI without the '--non-interactive' flag to confirm.`\n        );\n      }\n\n      const confirm = await confirmAsync({\n        message: `Update will affect all applications that are using this key (${appsList}). Do you want to continue?`,\n      });\n      if (!confirm) {\n        Log.warn('Aborting update process');\n        return;\n      }\n    }\n\n    const newPushKey = await this.provideOrGenerate(ctx);\n    await ctx.ios.updatePushKey(selected.id, this.accountName, newPushKey);\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<PushKey> {\n    const userProvided = await askForUserProvided(pushKeySchema);\n    if (userProvided) {\n      const isValid = await validatePushKey(ctx, userProvided);\n      return isValid ? userProvided : await this.provideOrGenerate(ctx);\n    }\n    return await generatePushKey(ctx, this.accountName);\n  }\n}\n\nexport class UseExistingPushNotification implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Start the CLI without the '--non-interactive' flag to select a push notification credential to use.\"\n      );\n    }\n\n    const selected = (await selectPushCredFromList(ctx, this.app.accountName, {\n      allowLegacy: false,\n    })) as IosPushCredentials;\n    if (selected) {\n      await ctx.ios.usePushKey(this.app, selected.id);\n      Log.log(\n        chalk.green(\n          `Successfully assigned Push Notifactions Key to ${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n        )\n      );\n    }\n    return null;\n  }\n}\n\nexport class CreateOrReusePushKey implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async assignPushKey(ctx: Context, userCredentialsId: number) {\n    await ctx.ios.usePushKey(this.app, userCredentialsId);\n    Log.log(\n      chalk.green(\n        `Successfully assigned Push Key to ${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n      )\n    );\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    const existingPushKeys = await getValidPushKeys(\n      await ctx.ios.getAllCredentials(this.app.accountName),\n      ctx\n    );\n\n    if (existingPushKeys.length === 0) {\n      const pushKey = await new CreateIosPush(this.app.accountName).create(ctx);\n      await this.assignPushKey(ctx, pushKey.id);\n      return null;\n    }\n\n    // autoselect creds if we find valid keys\n    const autoselectedPushKey = existingPushKeys[0];\n\n    if (!ctx.nonInteractive) {\n      const confirm = await confirmAsync({\n        message: `${formatPushKey(\n          autoselectedPushKey,\n          await ctx.ios.getAllCredentials(this.app.accountName),\n          'VALID'\n        )} \\n Would you like to use this Push Key?`,\n        limit: Infinity,\n      });\n      if (!confirm) {\n        return await this._createOrReuse(ctx);\n      }\n    }\n\n    // Use autosuggested push key\n    Log.log(`Using Push Key: ${autoselectedPushKey.apnsKeyId}`);\n    await this.assignPushKey(ctx, autoselectedPushKey.id);\n    return null;\n  }\n\n  async _createOrReuse(ctx: Context): Promise<IView | null> {\n    const choices = [\n      {\n        title: '[Choose existing push key] (Recommended)',\n        value: 'CHOOSE_EXISTING',\n      },\n      { title: '[Add a new push key]', value: 'GENERATE' },\n    ];\n\n    const question: Question = {\n      type: 'select',\n      name: 'action',\n      message: 'Select an iOS push key to use for push notifications:',\n      choices,\n    };\n\n    const { action } = await prompt(question);\n\n    if (action === 'GENERATE') {\n      const pushKey = await new CreateIosPush(this.app.accountName).create(ctx);\n      await this.assignPushKey(ctx, pushKey.id);\n      return null;\n    } else if (action === 'CHOOSE_EXISTING') {\n      return new UseExistingPushNotification(this.app);\n    }\n\n    throw new Error('unsupported action');\n  }\n}\n\nasync function getValidPushKeys(iosCredentials: IosCredentials, ctx: Context) {\n  const pushKeys = iosCredentials.userCredentials.filter(\n    (cred): cred is IosPushCredentials => cred.type === 'push-key'\n  );\n  if (!ctx.hasAppleCtx()) {\n    Log.log(\n      chalk.yellow(\n        `Unable to determine validity of Push Keys due to insufficient Apple Credentials`\n      )\n    );\n    return pushKeys;\n  }\n  const pushKeyManager = new PushKeyManager(ctx.appleCtx);\n  const pushInfoFromApple = await pushKeyManager.list();\n  return await filterRevokedPushKeys<IosPushCredentials>(pushInfoFromApple, pushKeys);\n}\n\nfunction getValidityStatus(\n  pushKey: IosPushCredentials,\n  validPushKeys: IosPushCredentials[] | null\n): ValidityStatus {\n  if (!validPushKeys) {\n    return 'UNKNOWN';\n  }\n  return validPushKeys.includes(pushKey) ? 'VALID' : 'INVALID';\n}\n\ntype ListOptions = {\n  filterInvalid?: boolean;\n  allowLegacy?: boolean;\n};\n\nasync function selectPushCredFromList(\n  ctx: Context,\n  accountName: string,\n  options: ListOptions = {}\n): Promise<IosPushCredentials | IosAppCredentials | null> {\n  const iosCredentials = await ctx.ios.getAllCredentials(accountName);\n  const allowLegacy = options.allowLegacy || true;\n  let pushKeys = iosCredentials.userCredentials.filter(\n    cred => cred.type === 'push-key'\n  ) as IosPushCredentials[];\n  let validPushKeys: IosPushCredentials[] | null = null;\n  if (ctx.hasAppleCtx()) {\n    const pushKeyManager = new PushKeyManager(ctx.appleCtx);\n    const pushInfoFromApple = await pushKeyManager.list();\n    validPushKeys = await filterRevokedPushKeys<IosPushCredentials>(pushInfoFromApple, pushKeys);\n  }\n  pushKeys = options.filterInvalid && validPushKeys ? validPushKeys : pushKeys;\n\n  const pushCerts = allowLegacy\n    ? iosCredentials.appCredentials.filter(\n        ({ credentials }) => credentials.pushP12 && credentials.pushPassword\n      )\n    : [];\n  const pushCredentials = [...pushCerts, ...pushKeys];\n  if (pushCredentials.length === 0) {\n    Log.warn('There are no push credentials available in your account');\n    return null;\n  }\n\n  const getName = (pushCred: IosPushCredentials | IosAppCredentials) => {\n    if ('type' in pushCred) {\n      return formatPushKey(\n        pushCred as IosPushCredentials,\n        iosCredentials,\n        getValidityStatus(pushCred as IosPushCredentials, validPushKeys)\n      );\n    }\n\n    const pushCert = pushCred as IosAppCredentials;\n    return `Push Certificate (PushId: ${pushCert.credentials.pushId || '------'}, TeamId: ${\n      pushCert.credentials.teamId || '-------'\n    } used in ${pushCert.experienceName})`;\n  };\n\n  const question: Question = {\n    type: 'select',\n    name: 'credentialsIndex',\n    message: 'Select credentials from list',\n    choices: pushCredentials.map((entry, index) => ({\n      title: getName(entry),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return pushCredentials[credentialsIndex];\n}\n\nfunction getAppsUsingPushCred(\n  iosCredentials: IosCredentials,\n  pushCred: IosPushCredentials | IosAppCredentials\n): IosAppCredentials[] {\n  if ('type' in pushCred) {\n    return iosCredentials.appCredentials.filter(\n      cred => cred.pushCredentialsId === (pushCred as IosPushCredentials).id\n    );\n  } else if (pushCred.credentials?.pushP12 && pushCred.credentials?.pushPassword) {\n    return [pushCred as IosAppCredentials];\n  }\n  return [];\n}\n\nfunction formatPushKeyFromApple(appleInfo: PushKeyInfo, credentials: IosCredentials): string {\n  const userCredentials = credentials.userCredentials.filter(\n    cred => cred.type === 'push-key' && cred.apnsKeyId === appleInfo.id\n  );\n  const appCredentials =\n    userCredentials.length !== 0\n      ? credentials.appCredentials.filter(cred => cred.pushCredentialsId === userCredentials[0].id)\n      : [];\n  const joinApps = appCredentials\n    .map(i => `      ${i.experienceName} (${i.bundleIdentifier})`)\n    .join('\\n');\n\n  const usedByString = joinApps\n    ? `    ${chalk.gray(`used by\\n${joinApps}`)}`\n    : `    ${chalk.gray(`not used by any apps`)}`;\n\n  const { name, id } = appleInfo;\n  const pushKey = userCredentials[0];\n  const teamText = pushKey\n    ? `, Team ID: ${pushKey.teamId || '---'}, Team name: ${pushKey.teamName || '---'}`\n    : '';\n\n  return `${name} - KeyId: ${id}${teamText}\\n${usedByString}`;\n}\n\ntype ValidityStatus = 'UNKNOWN' | 'VALID' | 'INVALID';\nfunction formatPushKey(\n  pushKey: IosPushCredentials,\n  credentials: IosCredentials,\n  validityStatus: ValidityStatus = 'UNKNOWN'\n): string {\n  const appCredentials = credentials.appCredentials.filter(\n    cred => cred.pushCredentialsId === pushKey.id\n  );\n  const joinApps = appCredentials\n    .map(i => `${i.experienceName} (${i.bundleIdentifier})`)\n    .join(', ');\n\n  const usedByString = joinApps\n    ? `\\n    ${chalk.gray(`used by ${joinApps}`)}`\n    : `\\n    ${chalk.gray(`not used by any apps`)}`;\n\n  let validityText;\n  if (validityStatus === 'VALID') {\n    validityText = chalk.gray(\"\\n    ✅ Currently valid on Apple's servers.\");\n  } else if (validityStatus === 'INVALID') {\n    validityText = chalk.gray(\"\\n    ❌ No longer valid on Apple's servers.\");\n  } else {\n    validityText = chalk.gray(\n      \"\\n    ❓ Validity of this certificate on Apple's servers is unknown.\"\n    );\n  }\n  return `Push Notifications Key (Key ID: ${pushKey.apnsKeyId}, Team ID: ${pushKey.teamId})${usedByString}${validityText}`;\n}\n\nasync function generatePushKey(ctx: Context, accountName: string): Promise<PushKey> {\n  await ctx.ensureAppleCtx();\n  const manager = new PushKeyManager(ctx.appleCtx);\n  try {\n    return await manager.create();\n  } catch (e) {\n    if (e.code === 'APPLE_PUSH_KEYS_TOO_MANY_GENERATED_ERROR') {\n      const keys = await manager.list();\n      Log.warn('Maximum number of Push Notifications Keys generated on Apple Developer Portal.');\n      Log.warn(APPLE_KEYS_TOO_MANY_GENERATED_ERROR);\n\n      if (ctx.nonInteractive) {\n        throw new CommandError(\n          'NON_INTERACTIVE',\n          \"Start the CLI without the '--non-interactive' to revoke push notification keys.\"\n        );\n      }\n\n      const credentials = await ctx.ios.getAllCredentials(accountName);\n      const usedByExpo = credentials.userCredentials\n        .filter((cert): cert is IosPushCredentials => cert.type === 'push-key')\n        .reduce<{ [key: string]: IosPushCredentials }>(\n          (acc, cert) => ({ ...acc, [cert.apnsKeyId]: cert }),\n          {}\n        );\n\n      // https://docs.expo.dev/distribution/app-signing/#summary\n      const here = terminalLink('here', 'https://bit.ly/3cfJJkQ');\n      Log.log(chalk.grey(`⚠️  Revoking a Push Key will affect other apps that rely on it`));\n      Log.log(chalk.grey(`ℹ️  Learn more ${here}`));\n      Log.log();\n\n      const { revoke } = await prompt([\n        {\n          type: 'multiselect',\n          name: 'revoke',\n          message: 'Select Push Notifications Key to revoke.',\n          choices: keys.map((key, index) => ({\n            value: index,\n            title: formatPushKeyFromApple(key, credentials),\n          })),\n          optionsPerPage: 20,\n        },\n      ]);\n\n      for (const index of revoke) {\n        const certInfo = keys[index];\n        if (certInfo && usedByExpo[certInfo.id]) {\n          await new RemoveIosPush(accountName, true).removeSpecific(ctx, usedByExpo[certInfo.id]);\n        } else {\n          await manager.revoke([certInfo.id]);\n        }\n      }\n    } else {\n      throw e;\n    }\n  }\n  return await generatePushKey(ctx, accountName);\n}\n\nexport async function validatePushKey(ctx: Context, pushKey: PushKey) {\n  if (!ctx.hasAppleCtx()) {\n    Log.warn('Unable to validate Push Keys due to insufficient Apple Credentials');\n    return true;\n  }\n  const spinner = ora(`Checking validity of push key on Apple Developer Portal...`).start();\n\n  const pushKeyManager = new PushKeyManager(ctx.appleCtx);\n  const pushInfoFromApple = await pushKeyManager.list();\n  const filteredFormattedPushKeyArray = await filterRevokedPushKeys(pushInfoFromApple, [pushKey]);\n  const isValidPushKey = filteredFormattedPushKeyArray.length > 0;\n  if (isValidPushKey) {\n    const successMsg = `Successfully validated Push Key against Apple Servers`;\n    spinner.succeed(successMsg);\n  } else {\n    const failureMsg = `This Push Key is no longer valid on the Apple Developer Portal`;\n    spinner.fail(failureMsg);\n  }\n  return isValidPushKey;\n}\n\nasync function filterRevokedPushKeys<T extends PushKey>(\n  pushInfoFromApple: PushKeyInfo[],\n  pushKeys: T[]\n): Promise<T[]> {\n  // if the credentials are valid, check it against apple to make sure it hasnt been revoked\n  const validKeyIdsOnAppleServer = pushInfoFromApple.map(pushKey => pushKey.id);\n  const validPushKeysOnExpoServer = pushKeys.filter(pushKey => {\n    return validKeyIdsOnAppleServer.includes(pushKey.apnsKeyId);\n  });\n  return validPushKeysOnExpoServer;\n}\n\nexport async function getPushKeyFromParams(builderOptions: {\n  pushId?: string;\n  pushP8Path?: string;\n  teamId?: string;\n}): Promise<PushKey | null> {\n  const { pushId, pushP8Path, teamId } = builderOptions;\n\n  // none of the pushKey params were set, assume user has no intention of passing it in\n  if (!pushId && !pushP8Path) {\n    return null;\n  }\n\n  // partial pushKey params were set, assume user has intention of passing it in\n  if (!(pushId && pushP8Path && teamId)) {\n    throw new Error(\n      'In order to provide a Push Key through the CLI parameters, you have to pass --push-id, --push-p8-path and --team-id parameters.'\n    );\n  }\n\n  return {\n    apnsKeyId: pushId,\n    apnsKeyP8: await fs.readFile(pushP8Path, 'utf8'),\n    teamId,\n  } as PushKey;\n}\n\nexport async function usePushKeyFromParams(\n  ctx: Context,\n  app: AppLookupParams,\n  pushKey: PushKey\n): Promise<IosPushCredentials> {\n  const isValid = await validatePushKey(ctx, pushKey);\n  if (!isValid) {\n    throw new Error('Cannot validate uploaded Push Key');\n  }\n\n  const iosPushCredentials = await ctx.ios.createPushKey(app.accountName, pushKey);\n\n  await ctx.ios.usePushKey(app, iosPushCredentials.id);\n  Log.log(\n    chalk.green(\n      `Successfully assigned Push Key to ${app.accountName}/${app.projectName} (${app.bundleIdentifier})`\n    )\n  );\n  return iosPushCredentials;\n}\n"],"file":"IosPushCredentials.js"}