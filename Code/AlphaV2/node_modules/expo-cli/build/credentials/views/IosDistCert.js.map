{"version":3,"sources":["../../../src/credentials/views/IosDistCert.ts"],"names":["APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR","chalk","underline","CreateIosDist","constructor","accountName","create","ctx","newDistCert","provideOrGenerate","ios","createDistCert","open","distCert","Log","log","green","nonInteractive","userProvided","promptForDistCert","isValid","validateDistributionCertificate","generateDistCert","RemoveIosDist","shouldRevoke","selected","selectDistCertFromList","removeSpecific","credentials","getAllCredentials","apps","appCredentials","filter","cred","distCredentialsId","id","appsList","map","appCred","experienceName","join","confirm","message","deleteDistCert","certId","revoke","ensureAppleCtx","DistCertManager","appleCtx","appLookupParams","bundleIdentifier","getProvisioningProfile","view","RemoveProvisioningProfile","UpdateIosDist","updateSpecific","updated","userCredentials","find","i","length","CommandError","updateDistCert","UseExistingDistributionCert","app","filterInvalid","useDistCert","projectName","CreateOrReuseDistributionCert","assignDistCert","userCredentialsId","user","Error","existingCertificates","getValidDistCerts","autoselectedCertificate","formatDistCert","limit","Infinity","_createOrReuse","choices","title","value","question","type","name","optionsPerPage","action","iosCredentials","distCerts","hasAppleCtx","yellow","distCertManager","certInfoFromApple","list","validCerts","filterRevokedDistributionCerts","sortByExpiryDesc","getValidityStatus","validDistCerts","includes","options","warn","entry","index","credentialsIndex","formatDistCertFromApple","appleInfo","joinApps","usedByString","gray","status","expires","created","ownerName","serialNumber","expiresDate","Date","createdDate","ownerId","validityStatus","distCertSerialNumber","PKCS12Utils","findP12CertSerialNumber","certP12","certPassword","undefined","error","red","validityText","teamId","manager","e","code","certs","usedByExpo","cert","reduce","acc","here","grey","certInfo","_getRequiredQuestions","requiredQuestions","distCertSchema","required","q","_ensureDistCert","partialCert","team","_getDistCertWithSerial","distributionCert","spinner","start","validDistributionCerts","isValidCert","successMsg","succeed","failureMsg","fail","distributionCerts","validCertSerialsOnAppleServer","Math","floor","now","sort","certA","certB","certAInfo","certAExpiry","Number","NEGATIVE_INFINITY","certBInfo","certBExpiry","getDistCertFromParams","builderOptions","distP12Path","process","env","EXPO_IOS_DIST_P12_PASSWORD","fs","readFile","useDistCertFromParams","iosDistCredentials"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport dateformat from 'dateformat';\nimport fs from 'fs-extra';\nimport terminalLink from 'terminal-link';\nimport { PKCS12Utils } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport { DistCert, DistCertInfo, DistCertManager, isDistCert } from '../../appleApi';\nimport Log from '../../log';\nimport { ora } from '../../utils/ora';\nimport prompt, { confirmAsync, Question } from '../../utils/prompts';\nimport { displayIosUserCredentials } from '../actions/list';\nimport { askForUserProvided, CredentialSchema } from '../actions/promptForCredentials';\nimport { AppLookupParams, getAppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport { distCertSchema, IosCredentials, IosDistCredentials } from '../credentials';\nimport { RemoveProvisioningProfile } from './IosProvisioningProfile';\n\nconst APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR = `\nYou can have only ${chalk.underline(\n  'three'\n)} Apple Distribution Certificates generated on your Apple Developer account.\nPlease revoke the old ones or reuse existing from your other apps.\nPlease remember that Apple Distribution Certificates are not application specific!\n`;\n\nexport class CreateIosDist implements IView {\n  constructor(private accountName: string) {}\n\n  async create(ctx: Context): Promise<IosDistCredentials> {\n    const newDistCert = await this.provideOrGenerate(ctx);\n    return await ctx.ios.createDistCert(this.accountName, newDistCert);\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const distCert = await this.create(ctx);\n\n    Log.log(chalk.green('Successfully created Distribution Certificate\\n'));\n    displayIosUserCredentials(distCert);\n    Log.log();\n    return null;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<DistCert> {\n    if (!ctx.nonInteractive) {\n      const userProvided = await promptForDistCert(ctx);\n      if (userProvided) {\n        const isValid = await validateDistributionCertificate(ctx, userProvided);\n        return isValid ? userProvided : await this.provideOrGenerate(ctx);\n      }\n    }\n    return await generateDistCert(ctx, this.accountName);\n  }\n}\n\nexport class RemoveIosDist implements IView {\n  constructor(private accountName: string, private shouldRevoke: boolean = false) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectDistCertFromList(ctx, this.accountName);\n    if (selected) {\n      await this.removeSpecific(ctx, selected);\n      Log.log(chalk.green('Successfully removed Distribution Certificate\\n'));\n    }\n    return null;\n  }\n\n  async removeSpecific(ctx: Context, selected: IosDistCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = credentials.appCredentials.filter(cred => cred.distCredentialsId === selected.id);\n    const appsList = apps.map(appCred => chalk.green(appCred.experienceName)).join(', ');\n\n    if (appsList && !ctx.nonInteractive) {\n      Log.log('Removing Distribution Certificate');\n      const confirm = await confirmAsync({\n        message: `You are removing certificate used by ${appsList}. Do you want to continue?`,\n      });\n      if (!confirm) {\n        Log.log('Aborting');\n        return;\n      }\n    }\n\n    Log.log('Removing Distribution Certificate...\\n');\n    await ctx.ios.deleteDistCert(selected.id, this.accountName);\n\n    let shouldRevoke = this.shouldRevoke;\n    if (selected.certId) {\n      if (!shouldRevoke && !ctx.nonInteractive) {\n        const revoke = await confirmAsync({\n          message: `Do you also want to revoke it on Apple Developer Portal?`,\n        });\n        shouldRevoke = revoke;\n      }\n\n      if (shouldRevoke) {\n        await ctx.ensureAppleCtx();\n        await new DistCertManager(ctx.appleCtx).revoke([selected.certId]);\n      }\n    }\n\n    for (const appCredentials of apps) {\n      const appLookupParams = getAppLookupParams(\n        appCredentials.experienceName,\n        appCredentials.bundleIdentifier\n      );\n      if (!(await ctx.ios.getProvisioningProfile(appLookupParams))) {\n        continue;\n      }\n      Log.log(\n        `Removing Provisioning Profile for ${appCredentials.experienceName} (${appCredentials.bundleIdentifier})`\n      );\n      const view = new RemoveProvisioningProfile(this.accountName, shouldRevoke);\n      await view.removeSpecific(ctx, appLookupParams);\n    }\n  }\n}\n\nexport class UpdateIosDist implements IView {\n  constructor(private accountName: string) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectDistCertFromList(ctx, this.accountName);\n    if (selected) {\n      await this.updateSpecific(ctx, selected);\n\n      Log.log(chalk.green('Successfully updated Distribution Certificate\\n'));\n      const credentials = await ctx.ios.getAllCredentials(this.accountName);\n      const updated = credentials.userCredentials.find(i => i.id === selected.id);\n      if (updated) {\n        displayIosUserCredentials(updated);\n      }\n      Log.log();\n    }\n    return null;\n  }\n\n  async updateSpecific(ctx: Context, selected: IosDistCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = credentials.appCredentials.filter(cred => cred.distCredentialsId === selected.id);\n    const appsList = apps.map(appCred => chalk.green(appCred.experienceName)).join(', ');\n\n    if (apps.length > 1) {\n      if (ctx.nonInteractive) {\n        throw new CommandError(\n          'NON_INTERACTIVE',\n          `Start the CLI without the '--non-interactive' flag to update the certificate used by ${appsList}.`\n        );\n      }\n\n      const confirm = await confirmAsync({\n        message: `You are updating certificate used by ${appsList}. Do you want to continue?`,\n      });\n      if (!confirm) {\n        Log.log('Aborting update process');\n        return;\n      }\n    }\n\n    const newDistCert = await this.provideOrGenerate(ctx);\n    await ctx.ios.updateDistCert(selected.id, this.accountName, newDistCert);\n\n    for (const appCredentials of apps) {\n      Log.log(\n        `Removing Provisioning Profile for ${appCredentials.experienceName} (${appCredentials.bundleIdentifier})`\n      );\n      const appLookupParams = getAppLookupParams(\n        appCredentials.experienceName,\n        appCredentials.bundleIdentifier\n      );\n      await new RemoveProvisioningProfile(this.accountName, true).removeSpecific(\n        ctx,\n        appLookupParams\n      );\n    }\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<DistCert> {\n    const userProvided = await promptForDistCert(ctx);\n    if (userProvided) {\n      const isValid = await validateDistributionCertificate(ctx, userProvided);\n      return isValid ? userProvided : await this.provideOrGenerate(ctx);\n    }\n    return await generateDistCert(ctx, this.accountName);\n  }\n}\n\nexport class UseExistingDistributionCert implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectDistCertFromList(ctx, this.app.accountName, {\n      filterInvalid: true,\n    });\n    if (selected) {\n      await ctx.ios.useDistCert(this.app, selected.id);\n      Log.log(\n        chalk.green(\n          `Successfully assigned Distribution Certificate to @${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n        )\n      );\n    }\n    return null;\n  }\n}\n\nexport class CreateOrReuseDistributionCert implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async assignDistCert(ctx: Context, userCredentialsId: number) {\n    await ctx.ios.useDistCert(this.app, userCredentialsId);\n    Log.log(\n      chalk.green(\n        `Successfully assigned Distribution Certificate to @${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n      )\n    );\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    const existingCertificates = await getValidDistCerts(\n      await ctx.ios.getAllCredentials(this.app.accountName),\n      ctx\n    );\n\n    if (existingCertificates.length === 0) {\n      const distCert = await new CreateIosDist(this.app.accountName).create(ctx);\n      await this.assignDistCert(ctx, distCert.id);\n      return null;\n    }\n\n    // autoselect creds if we find valid certs\n    const autoselectedCertificate = existingCertificates[0];\n\n    if (!ctx.nonInteractive) {\n      const confirm = await confirmAsync({\n        message: `${formatDistCert(\n          autoselectedCertificate,\n          await ctx.ios.getAllCredentials(this.app.accountName),\n          'VALID'\n        )} \\n Would you like to use this certificate?`,\n        limit: Infinity,\n      });\n      if (!confirm) {\n        return await this._createOrReuse(ctx);\n      }\n    }\n\n    // Use autosuggested push key\n    Log.log(`Using Distribution Certificate: ${autoselectedCertificate.certId || '-----'}`);\n    await this.assignDistCert(ctx, autoselectedCertificate.id);\n    return null;\n  }\n\n  async _createOrReuse(ctx: Context): Promise<IView | null> {\n    const choices = [\n      {\n        title: '[Choose existing certificate] (Recommended)',\n        value: 'CHOOSE_EXISTING',\n      },\n      { title: '[Add a new certificate]', value: 'GENERATE' },\n    ];\n\n    const question: Question = {\n      type: 'select',\n      name: 'action',\n      message: 'Select an iOS distribution certificate to use for code signing:',\n      choices,\n      optionsPerPage: 20,\n    };\n\n    const { action } = await prompt(question);\n\n    if (action === 'GENERATE') {\n      const distCert = await new CreateIosDist(this.app.accountName).create(ctx);\n      await this.assignDistCert(ctx, distCert.id);\n      return null;\n    } else if (action === 'CHOOSE_EXISTING') {\n      return new UseExistingDistributionCert(this.app);\n    }\n\n    throw new Error('unsupported action');\n  }\n}\n\nasync function getValidDistCerts(iosCredentials: IosCredentials, ctx: Context) {\n  const distCerts = iosCredentials.userCredentials.filter(\n    (cred): cred is IosDistCredentials => cred.type === 'dist-cert'\n  );\n  if (!ctx.hasAppleCtx()) {\n    Log.log(chalk.yellow(`Unable to determine validity of Distribution Certificates.`));\n    return distCerts;\n  }\n  const distCertManager = new DistCertManager(ctx.appleCtx);\n  const certInfoFromApple = await distCertManager.list();\n  const validCerts = await filterRevokedDistributionCerts<IosDistCredentials>(\n    certInfoFromApple,\n    distCerts\n  );\n  return sortByExpiryDesc(certInfoFromApple, validCerts);\n}\n\nfunction getValidityStatus(\n  distCert: IosDistCredentials,\n  validDistCerts: IosDistCredentials[] | null\n): ValidityStatus {\n  if (!validDistCerts) {\n    return 'UNKNOWN';\n  }\n  return validDistCerts.includes(distCert) ? 'VALID' : 'INVALID';\n}\n\ntype ListOptions = {\n  filterInvalid?: boolean;\n};\n\nasync function selectDistCertFromList(\n  ctx: Context,\n  accountName: string,\n  options: ListOptions = {}\n): Promise<IosDistCredentials | null> {\n  const iosCredentials = await ctx.ios.getAllCredentials(accountName);\n  let distCerts = iosCredentials.userCredentials.filter(\n    (cred): cred is IosDistCredentials => cred.type === 'dist-cert'\n  );\n  let validDistCerts: IosDistCredentials[] | null = null;\n  if (ctx.hasAppleCtx()) {\n    const distCertManager = new DistCertManager(ctx.appleCtx);\n    const certInfoFromApple = await distCertManager.list();\n    validDistCerts = await filterRevokedDistributionCerts<IosDistCredentials>(\n      certInfoFromApple,\n      distCerts\n    );\n  }\n  distCerts = options.filterInvalid && validDistCerts ? validDistCerts : distCerts;\n\n  if (distCerts.length === 0) {\n    Log.warn('There are no Distribution Certificates available in your expo account');\n    return null;\n  }\n\n  const question: Question = {\n    type: 'select',\n    name: 'credentialsIndex',\n    message: 'Select certificate from the list.',\n    choices: distCerts.map((entry, index) => ({\n      title: formatDistCert(entry, iosCredentials, getValidityStatus(entry, validDistCerts)),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return distCerts[credentialsIndex];\n}\n\nfunction formatDistCertFromApple(appleInfo: DistCertInfo, credentials: IosCredentials): string {\n  const userCredentials = credentials.userCredentials.filter(\n    cred => cred.type === 'dist-cert' && cred.certId === appleInfo.id\n  );\n  const appCredentials =\n    userCredentials.length !== 0\n      ? credentials.appCredentials.filter(cred => cred.distCredentialsId === userCredentials[0].id)\n      : [];\n  const joinApps = appCredentials\n    .map(i => `      ${i.experienceName} (${i.bundleIdentifier})`)\n    .join('\\n');\n\n  const usedByString = joinApps\n    ? `    ${chalk.gray(`used by\\n${joinApps}`)}`\n    : `    ${chalk.gray(`not used by any apps`)}`;\n\n  const { name, status, id, expires, created, ownerName, serialNumber } = appleInfo;\n  const expiresDate = dateformat(new Date(expires * 1000));\n  const createdDate = dateformat(new Date(created * 1000));\n  return `${name} (${status}) - Cert ID: ${id}, Serial number: ${serialNumber}, Team ID: ${appleInfo.ownerId}, Team name: ${ownerName}\n    expires: ${expiresDate}, created: ${createdDate}\n  ${usedByString}`;\n}\n\ntype ValidityStatus = 'UNKNOWN' | 'VALID' | 'INVALID';\nfunction formatDistCert(\n  distCert: IosDistCredentials,\n  credentials: IosCredentials,\n  validityStatus: ValidityStatus = 'UNKNOWN'\n): string {\n  const appCredentials = credentials.appCredentials.filter(\n    cred => cred.distCredentialsId === distCert.id\n  );\n  const joinApps = appCredentials\n    .map(i => `${i.experienceName} (${i.bundleIdentifier})`)\n    .join(', ');\n\n  const usedByString = joinApps\n    ? `\\n    ${chalk.gray(`used by ${joinApps}`)}`\n    : `\\n    ${chalk.gray(`not used by any apps`)}`;\n\n  let serialNumber = distCert.distCertSerialNumber;\n  try {\n    if (!serialNumber) {\n      serialNumber =\n        PKCS12Utils.findP12CertSerialNumber(distCert.certP12, distCert.certPassword) ?? undefined;\n    }\n  } catch (error) {\n    serialNumber = chalk.red('invalid serial number');\n  }\n\n  let validityText;\n  if (validityStatus === 'VALID') {\n    validityText = chalk.gray(\"\\n    ✅ Currently valid on Apple's servers.\");\n  } else if (validityStatus === 'INVALID') {\n    validityText = chalk.gray(\"\\n    ❌ No longer valid on Apple's servers.\");\n  } else {\n    validityText = chalk.gray(\n      \"\\n    ❓ Validity of this certificate on Apple's servers is unknown.\"\n    );\n  }\n  return `Distribution Certificate (Cert ID: ${\n    distCert.certId || '-----'\n  }, Serial number: ${serialNumber}, Team ID: ${distCert.teamId})${usedByString}${validityText}`;\n}\n\nasync function generateDistCert(ctx: Context, accountName: string): Promise<DistCert> {\n  await ctx.ensureAppleCtx();\n  const manager = new DistCertManager(ctx.appleCtx);\n  try {\n    return await manager.create();\n  } catch (e) {\n    if (e.code === 'APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR') {\n      const certs = await manager.list();\n      Log.warn('Maximum number of Distribution Certificates generated on Apple Developer Portal.');\n      Log.warn(APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR);\n\n      if (ctx.nonInteractive) {\n        throw new CommandError(\n          'NON_INTERACTIVE',\n          \"Start the CLI without the '--non-interactive' flag to revoke existing certificates.\"\n        );\n      }\n\n      const credentials = await ctx.ios.getAllCredentials(accountName);\n      const usedByExpo = credentials.userCredentials\n        .filter((cert): cert is IosDistCredentials => cert.type === 'dist-cert' && !!cert.certId)\n        .reduce<{ [key: string]: IosDistCredentials }>(\n          (acc, cert) => ({ ...acc, [cert.certId || '']: cert }),\n          {}\n        );\n\n      // https://docs.expo.dev/distribution/app-signing/#summary\n      const here = terminalLink('here', 'https://bit.ly/3cfJJkQ');\n      Log.log(\n        chalk.grey(`✅  Distribution Certificates can be revoked with no production side effects`)\n      );\n      Log.log(chalk.grey(`ℹ️  Learn more ${here}`));\n      Log.log();\n\n      const { revoke } = await prompt([\n        {\n          type: 'multiselect',\n          name: 'revoke',\n          message: 'Select certificates to revoke.',\n          optionsPerPage: 20,\n          choices: certs.map((cert, index) => ({\n            value: index,\n            title: formatDistCertFromApple(cert, credentials),\n          })),\n        },\n      ]);\n\n      for (const index of revoke) {\n        const certInfo = certs[index];\n        if (certInfo && usedByExpo[certInfo.id]) {\n          await new RemoveIosDist(accountName, true).removeSpecific(ctx, usedByExpo[certInfo.id]);\n        } else {\n          await manager.revoke([certInfo.id]);\n        }\n      }\n    } else {\n      throw e;\n    }\n  }\n  return await generateDistCert(ctx, accountName);\n}\n\nfunction _getRequiredQuestions(ctx: Context): CredentialSchema<DistCert> {\n  const requiredQuestions = { ...distCertSchema };\n  if (ctx.hasAppleCtx() && requiredQuestions.required) {\n    requiredQuestions.required = requiredQuestions.required.filter(q => q !== 'teamId');\n  }\n  return requiredQuestions;\n}\n\nfunction _ensureDistCert(ctx: Context, partialCert: Partial<DistCert>): DistCert {\n  if (ctx.hasAppleCtx()) {\n    partialCert.teamId = ctx.appleCtx.team.id;\n  }\n  if (!isDistCert(partialCert)) {\n    throw new Error(`Not of type DistCert: ${partialCert}`);\n  }\n  return partialCert;\n}\n\nasync function promptForDistCert(ctx: Context): Promise<DistCert | null> {\n  const requiredQuestions = _getRequiredQuestions(ctx);\n  const userProvided = await askForUserProvided(requiredQuestions);\n  if (userProvided) {\n    const distCert = _ensureDistCert(ctx, userProvided);\n    return await _getDistCertWithSerial(distCert);\n  } else {\n    return null;\n  }\n}\n\nasync function _getDistCertWithSerial(distCert: DistCert): Promise<DistCert> {\n  try {\n    distCert.distCertSerialNumber =\n      PKCS12Utils.findP12CertSerialNumber(distCert.certP12, distCert.certPassword) ?? undefined;\n  } catch (error) {\n    Log.warn('Unable to access certificate serial number.');\n    Log.warn('Make sure that certificate and password are correct.');\n    Log.warn(error);\n  }\n  return distCert;\n}\n\nexport async function validateDistributionCertificate(ctx: Context, distributionCert: DistCert) {\n  if (!ctx.hasAppleCtx()) {\n    Log.warn('Unable to validate distribution certificate due to insufficient Apple Credentials');\n    return true;\n  }\n  const spinner = ora(\n    `Checking validity of distribution certificate on Apple Developer Portal...`\n  ).start();\n\n  const distCertManager = new DistCertManager(ctx.appleCtx);\n  const certInfoFromApple = await distCertManager.list();\n  const validDistributionCerts = await filterRevokedDistributionCerts(certInfoFromApple, [\n    distributionCert,\n  ]);\n  const isValidCert = validDistributionCerts.length > 0;\n  if (isValidCert) {\n    const successMsg = `Successfully validated Distribution Certificate against Apple Servers`;\n    spinner.succeed(successMsg);\n  } else {\n    const failureMsg = `The Distribution Certificate is no longer valid on the Apple Developer Portal`;\n    spinner.fail(failureMsg);\n  }\n  return isValidCert;\n}\n\nasync function filterRevokedDistributionCerts<T extends DistCert>(\n  certInfoFromApple: DistCertInfo[],\n  distributionCerts: T[]\n): Promise<T[]> {\n  if (distributionCerts.length === 0) {\n    return [];\n  }\n\n  // if the credentials are valid, check it against apple to make sure it hasnt been revoked\n  const validCertSerialsOnAppleServer = certInfoFromApple\n    .filter(\n      // remove expired certs\n      cert => cert.expires > Math.floor(Date.now() / 1000)\n    )\n    .map(cert => cert.serialNumber);\n  const validDistributionCerts = distributionCerts.filter(cert => {\n    const serialNumber = cert.distCertSerialNumber;\n    if (!serialNumber) {\n      return false;\n    }\n    return validCertSerialsOnAppleServer.includes(serialNumber);\n  });\n  return validDistributionCerts;\n}\n\nfunction sortByExpiryDesc<T extends DistCert>(\n  certInfoFromApple: DistCertInfo[],\n  distributionCerts: T[]\n): T[] {\n  return distributionCerts.sort((certA, certB) => {\n    const certAInfo = certInfoFromApple.find(cert => cert.id === certA.certId);\n    const certAExpiry = certAInfo ? certAInfo.expires : Number.NEGATIVE_INFINITY;\n    const certBInfo = certInfoFromApple.find(cert => cert.id === certB.certId);\n    const certBExpiry = certBInfo ? certBInfo.expires : Number.NEGATIVE_INFINITY;\n    return certBExpiry - certAExpiry;\n  });\n}\n\nexport async function getDistCertFromParams(builderOptions: {\n  distP12Path?: string;\n  teamId?: string;\n}): Promise<DistCert | null> {\n  const { distP12Path, teamId } = builderOptions;\n  const certPassword = process.env.EXPO_IOS_DIST_P12_PASSWORD;\n\n  // none of the distCert params were set, assume user has no intention of passing it in\n  if (!distP12Path && !certPassword) {\n    return null;\n  }\n\n  // partial distCert params were set, assume user has intention of passing it in\n  if (!(distP12Path && certPassword && teamId)) {\n    throw new Error(\n      'In order to provide a Distribution Certificate through the CLI parameters, you have to pass --dist-p12-path parameter, --team-id parameter and set EXPO_IOS_DIST_P12_PASSWORD environment variable.'\n    );\n  }\n\n  const distCert = {\n    certP12: await fs.readFile(distP12Path as string, 'base64'),\n    teamId,\n    certPassword,\n  } as DistCert;\n  return await _getDistCertWithSerial(distCert);\n}\n\nexport async function useDistCertFromParams(\n  ctx: Context,\n  app: AppLookupParams,\n  distCert: DistCert\n): Promise<IosDistCredentials> {\n  const isValid = await validateDistributionCertificate(ctx, distCert);\n  if (!isValid) {\n    throw new Error('Cannot validate uploaded Distribution Certificate');\n  }\n  const iosDistCredentials = await ctx.ios.createDistCert(app.accountName, distCert);\n\n  await ctx.ios.useDistCert(app, iosDistCredentials.id);\n  Log.log(\n    chalk.green(\n      `Successfully assigned Distribution Certificate to @${app.accountName}/${app.projectName} (${app.bundleIdentifier})`\n    )\n  );\n  return iosDistCredentials;\n}\n"],"file":"IosDistCert.js"}