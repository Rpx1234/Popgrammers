{"version":3,"sources":["../../src/credentials/context.ts"],"names":["Context","nonInteractive","_nonInteractive","user","_user","hasProjectContext","_hasProjectContext","projectDir","_projectDir","projectOwner","UserManager","getProjectOwner","manifest","_manifest","Error","api","_apiClient","android","_androidApiClient","ios","_iosApiClient","appleCtx","_appleCtx","value","hasAppleCtx","ensureAppleCtx","_appleCtxOptions","logOwnerAndProject","isProxyUser","owner","username","Log","log","slug","init","options","allowAnonymous","appleId","appleIdPassword","teamId","getCurrentUserAsync","undefined","ensureLoggedInAsync","ApiV2","clientForUser","IosApi","AndroidApi","exp","skipSDKVersionRequirement","error"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAiBO,MAAMA,OAAN,CAAc;AAAA;AAAA,gDACW,KADX;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAYD,MAAdC,cAAc,GAAY;AAC5B,WAAO,KAAKC,eAAL,KAAyB,IAAhC;AACD;;AAEO,MAAJC,IAAI,GAAqB;AAC3B,WAAO,KAAKC,KAAZ;AACD;;AACoB,MAAjBC,iBAAiB,GAAY;AAC/B,WAAO,KAAKC,kBAAZ;AACD;;AACa,MAAVC,UAAU,GAAW;AACvB,WAAO,KAAKC,WAAZ;AACD;;AACe,MAAZC,YAAY,GAAW;AACzB,WAAOC,mBAAYC,eAAZ,CAA4B,KAAKR,IAAjC,EAAuC,KAAKS,QAA5C,CAAP;AACD;;AACW,MAARA,QAAQ,GAAe;AACzB,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB,YAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,WAAO,KAAKD,SAAZ;AACD;;AACM,MAAHE,GAAG,GAAU;AACf,WAAO,KAAKC,UAAZ;AACD;;AACU,MAAPC,OAAO,GAAe;AACxB,WAAO,KAAKC,iBAAZ;AACD;;AACM,MAAHC,GAAG,GAAW;AAChB,WAAO,KAAKC,aAAZ;AACD;;AACW,MAARC,QAAQ,GAAa;AACvB,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB,YAAM,IAAIR,KAAJ,CAAU,gCAAV,CAAN;AACD;;AACD,WAAO,KAAKQ,SAAZ;AACD;;AACW,MAARV,QAAQ,CAACW,KAAD,EAAoB;AAC9B,SAAKV,SAAL,GAAiBU,KAAjB;AACD;;AAEDC,EAAAA,WAAW,GAAY;AACrB,WAAO,CAAC,CAAC,KAAKF,SAAd;AACD;;AAEmB,QAAdG,cAAc,GAAG;AACrB,QAAI,CAAC,KAAKH,SAAV,EAAqB;AACnB,WAAKA,SAAL,GAAiB,MAAM,mCAAkB,KAAKI,gBAAvB,CAAvB;AACD;AACF;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB;AACA,UAAMC,WAAW,GAAG,KAAKhB,QAAL,CAAciB,KAAd,IAAuB,KAAKjB,QAAL,CAAciB,KAAd,KAAwB,KAAK1B,IAAL,CAAU2B,QAA7E;;AACAC,mBAAIC,GAAJ,CACG,yBAAwBJ,WAAW,GAAG,cAAH,GAAoB,KAAM,IAC5D,KAAKnB,YACN,eAAc,KAAKG,QAAL,CAAcqB,IAAK,EAHpC;AAKD;;AAES,QAAJC,IAAI,CAAC3B,UAAD,EAAqB4B,OAAmB,GAAG,EAA3C,EAA+C;AACvD,UAAM;AAAEC,MAAAA,cAAF;AAAkBC,MAAAA,OAAlB;AAA2BC,MAAAA,eAA3B;AAA4CC,MAAAA,MAA5C;AAAoDtC,MAAAA;AAApD,QAAuEkC,OAA7E;AACA,SAAK/B,KAAL,GAAa,CAAC,MAAMM,mBAAY8B,mBAAZ,EAAP,KAA6CC,SAA1D,CAFuD,CAIvD;;AACA,QAAI,CAAC,KAAKrC,KAAN,IAAe,CAACgC,cAApB,EAAoC;AAClC,WAAKhC,KAAL,GAAc,MAAMM,mBAAYgC,mBAAZ,EAApB;AACD;;AAED,SAAKlC,WAAL,GAAmBD,UAAnB;AACA,SAAKS,UAAL,GAAkB2B,aAAMC,aAAN,CAAoB,KAAKzC,IAAzB,CAAlB;AACA,SAAKiB,aAAL,GAAqB,KAAIyB,iBAAJ,EAAW,KAAK9B,GAAhB,CAArB;AACA,SAAKG,iBAAL,GAAyB,KAAI4B,qBAAJ,EAAe,KAAK/B,GAApB,CAAzB;AACA,SAAKW,gBAAL,GAAwB;AAAEW,MAAAA,OAAF;AAAWC,MAAAA,eAAX;AAA4BC,MAAAA;AAA5B,KAAxB;AACA,SAAKrC,eAAL,GAAuBD,cAAvB,CAduD,CAgBvD;;AACA,QAAI;AACF,YAAM;AAAE8C,QAAAA;AAAF,UAAU,yBAAUxC,UAAV,EAAsB;AAAEyC,QAAAA,yBAAyB,EAAE;AAA7B,OAAtB,CAAhB;AACA,WAAKnC,SAAL,GAAiBkC,GAAjB;AACA,WAAKzC,kBAAL,GAA0B,IAA1B;AACA,WAAKqB,kBAAL;AACD,KALD,CAKE,OAAOsB,KAAP,EAAc,CACd;AACA;AACD;AACF;;AAnGkB","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { ApiV2, RobotUser, User, UserManager } from 'xdl';\n\nimport { AppleCtx, authenticateAsync } from '../appleApi';\nimport Log from '../log';\nimport AndroidApi from './api/AndroidApi';\nimport IosApi from './api/IosApi';\n\nexport interface IView {\n  open(ctx: Context): Promise<IView | null>;\n}\n\ninterface AppleCtxOptions {\n  appleId?: string;\n  appleIdPassword?: string;\n  teamId?: string;\n}\n\ninterface CtxOptions extends AppleCtxOptions {\n  allowAnonymous?: boolean;\n  nonInteractive?: boolean;\n}\n\nexport class Context {\n  _hasProjectContext: boolean = false;\n  _projectDir?: string;\n  _user?: User | RobotUser;\n  _manifest?: ExpoConfig;\n  _apiClient?: ApiV2;\n  _iosApiClient?: IosApi;\n  _androidApiClient?: AndroidApi;\n  _appleCtxOptions?: AppleCtxOptions;\n  _appleCtx?: AppleCtx;\n  _nonInteractive?: boolean;\n\n  get nonInteractive(): boolean {\n    return this._nonInteractive === true;\n  }\n\n  get user(): User | RobotUser {\n    return this._user as User | RobotUser;\n  }\n  get hasProjectContext(): boolean {\n    return this._hasProjectContext;\n  }\n  get projectDir(): string {\n    return this._projectDir as string;\n  }\n  get projectOwner(): string {\n    return UserManager.getProjectOwner(this.user, this.manifest);\n  }\n  get manifest(): ExpoConfig {\n    if (!this._manifest) {\n      throw new Error('Manifest (app.json) not initialized.');\n    }\n    return this._manifest;\n  }\n  get api(): ApiV2 {\n    return this._apiClient as ApiV2;\n  }\n  get android(): AndroidApi {\n    return this._androidApiClient as AndroidApi;\n  }\n  get ios(): IosApi {\n    return this._iosApiClient as IosApi;\n  }\n  get appleCtx(): AppleCtx {\n    if (!this._appleCtx) {\n      throw new Error('Apple context not initialized.');\n    }\n    return this._appleCtx;\n  }\n  set manifest(value: ExpoConfig) {\n    this._manifest = value;\n  }\n\n  hasAppleCtx(): boolean {\n    return !!this._appleCtx;\n  }\n\n  async ensureAppleCtx() {\n    if (!this._appleCtx) {\n      this._appleCtx = await authenticateAsync(this._appleCtxOptions);\n    }\n  }\n\n  logOwnerAndProject() {\n    // Figure out if User A is configuring credentials as admin for User B's project\n    const isProxyUser = this.manifest.owner && this.manifest.owner !== this.user.username;\n    Log.log(\n      `Accessing credentials ${isProxyUser ? 'on behalf of' : 'for'} ${\n        this.projectOwner\n      } in project ${this.manifest.slug}`\n    );\n  }\n\n  async init(projectDir: string, options: CtxOptions = {}) {\n    const { allowAnonymous, appleId, appleIdPassword, teamId, nonInteractive } = options;\n    this._user = (await UserManager.getCurrentUserAsync()) || undefined;\n\n    // User isn't signed it, but needs to be signed in\n    if (!this._user && !allowAnonymous) {\n      this._user = (await UserManager.ensureLoggedInAsync()) as User;\n    }\n\n    this._projectDir = projectDir;\n    this._apiClient = ApiV2.clientForUser(this.user);\n    this._iosApiClient = new IosApi(this.api);\n    this._androidApiClient = new AndroidApi(this.api);\n    this._appleCtxOptions = { appleId, appleIdPassword, teamId };\n    this._nonInteractive = nonInteractive;\n\n    // try to access project context\n    try {\n      const { exp } = getConfig(projectDir, { skipSDKVersionRequirement: true });\n      this._manifest = exp;\n      this._hasProjectContext = true;\n      this.logOwnerAndProject();\n    } catch (error) {\n      // ignore error\n      // startcredentials manager without project context\n    }\n  }\n}\n"],"file":"context.js"}