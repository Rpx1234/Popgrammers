{"version":3,"sources":["../../src/appleApi/provisioningProfile.ts"],"names":["ProfileClass","resolveProfileType","profileClass","isEnterprise","Adhoc","ProfileType","IOS_APP_ADHOC","IOS_APP_INHOUSE","IOS_APP_STORE","transformProfileAsync","cert","authCtx","provisioningProfileId","id","name","attributes","status","profileState","expires","Date","expirationDate","getTime","distributionMethod","profileType","provisioningProfile","profileContent","certificates","getCertificatesAsync","map","transformCertificate","teamId","team","teamName","addCertificateToProfileAsync","context","serialNumber","profileId","bundleIdentifier","profiles","profile","find","CommandError","regenerateAsync","useExistingProvisioningProfileAsync","distCert","certIdTag","certId","spinner","start","distCertSerialNumber","certP12","certPassword","content","result","succeed","error","fail","listProvisioningProfilesAsync","General","inHouse","filter","Promise","all","createProvisioningProfileAsync","profileName","certificate","bundleIdItem","Profile","createAsync","bundleId","devices","revokeProvisioningProfileAsync","deleteAsync","ProvisioningProfileManager","constructor","ctx","useExisting","list","create","revoke"],"mappings":"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","sourcesContent":["import { Profile, ProfileType, RequestContext } from '@expo/apple-utils';\n\nimport CommandError from '../CommandError';\nimport { ora } from '../utils/ora';\nimport { AppleCtx, getRequestContext } from './authenticate';\nimport { getBundleIdForIdentifierAsync, getProfilesForBundleIdAsync } from './bundleId';\nimport {\n  DistCert,\n  DistCertInfo,\n  getCertificateBySerialNumberAsync,\n  transformCertificate,\n} from './distributionCert';\nimport { findP12CertSerialNumber } from './p12Certificate';\n\nexport type ProvisioningProfileInfo = {\n  name: string;\n  status: string;\n  expires: number;\n  distributionMethod: string;\n  certificates: DistCertInfo[];\n} & ProvisioningProfile;\n\nexport type ProvisioningProfile = {\n  provisioningProfileId?: string;\n  provisioningProfile: string;\n  teamId: string;\n  teamName?: string;\n};\n\nexport enum ProfileClass {\n  Adhoc = 'ad_hoc',\n  General = 'general',\n}\n\nfunction resolveProfileType(profileClass: ProfileClass, isEnterprise?: boolean): ProfileType {\n  if (isEnterprise) {\n    return profileClass === ProfileClass.Adhoc\n      ? ProfileType.IOS_APP_ADHOC\n      : ProfileType.IOS_APP_INHOUSE;\n  } else {\n    return profileClass === ProfileClass.Adhoc\n      ? ProfileType.IOS_APP_ADHOC\n      : ProfileType.IOS_APP_STORE;\n  }\n}\n\nasync function transformProfileAsync(\n  cert: Profile,\n  authCtx: AppleCtx\n): Promise<ProvisioningProfileInfo> {\n  return {\n    provisioningProfileId: cert.id,\n    name: cert.attributes.name,\n    status: cert.attributes.profileState,\n    expires: new Date(cert.attributes.expirationDate).getTime() / 1000,\n    distributionMethod: cert.attributes.profileType,\n    // @ts-ignore -- this can be null when the profile has expired.\n    provisioningProfile: cert.attributes.profileContent,\n    certificates: (await cert.getCertificatesAsync()).map(transformCertificate),\n    teamId: authCtx.team.id,\n    teamName: authCtx.team.name,\n  };\n}\n\nasync function addCertificateToProfileAsync(\n  context: RequestContext,\n  {\n    serialNumber,\n    profileId,\n    bundleIdentifier,\n  }: {\n    serialNumber: string;\n    profileId: string;\n    bundleIdentifier: string;\n  }\n) {\n  const cert = await getCertificateBySerialNumberAsync(context, serialNumber);\n\n  const profiles = await getProfilesForBundleIdAsync(context, bundleIdentifier);\n  const profile = profiles.find(profile => profile.id === profileId);\n  if (!profile) {\n    throw new CommandError(\n      `Failed to find profile for bundle identifier \"${bundleIdentifier}\" with profile id \"${profileId}\"`\n    );\n  }\n\n  // Assign the new certificate\n  profile.attributes.certificates = [cert];\n  return await profile.regenerateAsync();\n}\n\nasync function useExistingProvisioningProfileAsync(\n  authCtx: AppleCtx,\n  bundleIdentifier: string,\n  provisioningProfile: ProvisioningProfile,\n  distCert: DistCert\n): Promise<ProvisioningProfile> {\n  if (!provisioningProfile.provisioningProfileId) {\n    throw new CommandError('Provisioning profile: cannot use existing profile, insufficient id');\n  }\n  const certIdTag = distCert.certId ? ` (${distCert.certId})` : '';\n\n  const spinner = ora(\n    `Updating provisioning profile (${provisioningProfile.provisioningProfileId}) with distribution certificate${certIdTag}`\n  ).start();\n  try {\n    if (!distCert.distCertSerialNumber) {\n      distCert.distCertSerialNumber = findP12CertSerialNumber(\n        distCert.certP12,\n        distCert.certPassword\n      );\n    }\n\n    const context = getRequestContext(authCtx);\n    const profile = await addCertificateToProfileAsync(context, {\n      serialNumber: distCert.distCertSerialNumber,\n      profileId: provisioningProfile.provisioningProfileId,\n      bundleIdentifier,\n    });\n    const content = profile.attributes.profileContent;\n    if (!content) {\n      // this should never happen because of the regen.\n      throw new CommandError(\n        `Provisioning profile \"${profile.attributes.name}\" (${profile.id}) is expired!`\n      );\n    }\n    const result = {\n      provisioningProfileId: profile.id,\n      provisioningProfile: content,\n      teamId: authCtx.team.id,\n      teamName: authCtx.team.name,\n    };\n    spinner.succeed(\n      `Updated provisioning profile (${profile.id}) with distribution certificate${certIdTag}`\n    );\n    return {\n      ...result,\n      teamId: authCtx.team.id,\n      teamName: authCtx.team.name,\n    };\n  } catch (error) {\n    spinner.fail(\n      `Failed to update provisioning profile (${provisioningProfile.provisioningProfileId}) with distribution certificate${certIdTag}`\n    );\n    throw error;\n  }\n}\n\nasync function listProvisioningProfilesAsync(\n  authCtx: AppleCtx,\n  bundleIdentifier: string,\n  profileClass: ProfileClass = ProfileClass.General\n): Promise<ProvisioningProfileInfo[]> {\n  const spinner = ora(`Fetching Apple provisioning profiles`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    const profileType = resolveProfileType(profileClass, authCtx.team.inHouse);\n    const profiles = (await getProfilesForBundleIdAsync(context, bundleIdentifier)).filter(\n      profile => profile.attributes.profileType === profileType\n    );\n\n    const result = await Promise.all(\n      profiles.map(profile => transformProfileAsync(profile, authCtx))\n    );\n\n    spinner.succeed(`Fetched Apple provisioning profiles`);\n    return result;\n  } catch (error) {\n    spinner.fail(`Failed to fetch Apple provisioning profiles`);\n    throw error;\n  }\n}\n\nasync function createProvisioningProfileAsync(\n  authCtx: AppleCtx,\n  bundleIdentifier: string,\n  distCert: DistCert,\n  profileName: string,\n  profileClass: ProfileClass = ProfileClass.General\n): Promise<ProvisioningProfile> {\n  const spinner = ora(`Creating Apple provisioning profile`).start();\n  try {\n    if (!distCert.distCertSerialNumber) {\n      distCert.distCertSerialNumber = findP12CertSerialNumber(\n        distCert.certP12,\n        distCert.certPassword\n      );\n    }\n\n    const context = getRequestContext(authCtx);\n    const profileType = resolveProfileType(profileClass, authCtx.team.inHouse);\n\n    const certificate = await getCertificateBySerialNumberAsync(\n      context,\n      distCert.distCertSerialNumber\n    );\n\n    const bundleIdItem = await getBundleIdForIdentifierAsync(context, bundleIdentifier);\n\n    const profile = await Profile.createAsync(context, {\n      bundleId: bundleIdItem.id,\n      name: profileName,\n      certificates: [certificate.id],\n      devices: [],\n      profileType,\n    });\n\n    const result = await transformProfileAsync(profile, authCtx);\n\n    spinner.succeed('Created Apple provisioning profile');\n    return result;\n  } catch (error) {\n    spinner.fail('Failed to create Apple provisioning profile');\n    throw error;\n  }\n}\n\nasync function revokeProvisioningProfileAsync(\n  authCtx: AppleCtx,\n  bundleIdentifier: string,\n  profileClass: ProfileClass = ProfileClass.General\n): Promise<void> {\n  const spinner = ora(`Revoking Apple provisioning profile`).start();\n  try {\n    const context = getRequestContext(authCtx);\n\n    const profiles = await getProfilesForBundleIdAsync(context, bundleIdentifier);\n    const profileType = resolveProfileType(profileClass, authCtx.team.inHouse);\n    await Promise.all(\n      profiles\n        .filter(profile => profile.attributes.profileType === profileType)\n        .map(profile => Profile.deleteAsync(context, { id: profile.id }))\n    );\n    spinner.succeed('Revoked Apple provisioning profile');\n  } catch (error) {\n    spinner.fail('Failed to revoke Apple provisioning profile');\n    throw error;\n  }\n}\n\nexport class ProvisioningProfileManager {\n  constructor(public ctx: AppleCtx) {}\n\n  async useExisting<T extends DistCert>(\n    bundleIdentifier: string,\n    provisioningProfile: ProvisioningProfile,\n    distCert: T\n  ): Promise<ProvisioningProfile> {\n    return useExistingProvisioningProfileAsync(\n      this.ctx,\n      bundleIdentifier,\n      provisioningProfile,\n      distCert\n    );\n  }\n\n  async list(bundleIdentifier: string): Promise<ProvisioningProfileInfo[]> {\n    return listProvisioningProfilesAsync(this.ctx, bundleIdentifier);\n  }\n\n  async create<T extends DistCert>(\n    bundleIdentifier: string,\n    distCert: T,\n    profileName: string\n  ): Promise<ProvisioningProfile> {\n    return createProvisioningProfileAsync(this.ctx, bundleIdentifier, distCert, profileName);\n  }\n\n  async revoke(bundleIdentifier: string) {\n    return revokeProvisioningProfileAsync(this.ctx, bundleIdentifier);\n  }\n}\n"],"file":"provisioningProfile.js"}