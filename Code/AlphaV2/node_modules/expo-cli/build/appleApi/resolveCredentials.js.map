{"version":3,"sources":["../../src/appleApi/resolveCredentials.ts"],"names":["resolveCredentialsAsync","options","credentials","getAppleIdFromEnvironmentOrOptions","username","promptUsernameAsync","password","userCredentials","passedAppleId","process","env","EXPO_APPLE_ID","passedAppleIdPassword","EXPO_APPLE_PASSWORD","EXPO_APPLE_ID_PASSWORD","undefined","Log","error","CommandError","log","lastAppleId","getCachedUsernameAsync","type","name","message","validate","val","initial","cacheUsernameAsync","Keychain","EXPO_NO_KEYCHAIN","cachedPath","JsonFileCache","usernameCachePath","cacheAsync","promptPasswordAsync","cachedPassword","getCachedPasswordAsync","chalk","bold","stdout","columns","cachePasswordAsync","fs","remove","cached","getCacheAsync","getKeychainServiceName","appleId","deletePasswordAsync","serviceName","success","getPasswordAsync","setPasswordAsync"],"mappings":"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","sourcesContent":["import { Auth, JsonFileCache } from '@expo/apple-utils';\nimport chalk from 'chalk';\nimport * as fs from 'fs-extra';\nimport wrapAnsi from 'wrap-ansi';\n\nimport CommandError from '../CommandError';\nimport { learnMore } from '../commands/utils/TerminalLink';\nimport Log from '../log';\nimport promptAsync from '../utils/prompts';\nimport * as Keychain from './keychain';\n\n/**\n * Get the username and possibly the password from the environment variables or the supplied options.\n * Password is optional because it's only needed for authentication, but not for re-authentication.\n *\n * @param options\n */\nexport async function resolveCredentialsAsync(\n  options: Partial<Auth.UserCredentials>\n): Promise<Partial<Auth.UserCredentials>> {\n  const credentials = getAppleIdFromEnvironmentOrOptions(options);\n\n  if (!credentials.username) {\n    credentials.username = await promptUsernameAsync();\n  }\n\n  return credentials;\n}\n\nfunction getAppleIdFromEnvironmentOrOptions({\n  username,\n  password,\n  ...userCredentials\n}: Partial<Auth.UserCredentials>): Partial<Auth.UserCredentials> {\n  const passedAppleId = username || process.env.EXPO_APPLE_ID;\n  const passedAppleIdPassword = passedAppleId\n    ? password || process.env.EXPO_APPLE_PASSWORD || process.env.EXPO_APPLE_ID_PASSWORD\n    : undefined;\n\n  if (process.env.EXPO_APPLE_ID_PASSWORD) {\n    Log.error('EXPO_APPLE_ID_PASSWORD is deprecated, please use EXPO_APPLE_PASSWORD instead!');\n  }\n\n  // partial apple id params were set, assume user has intention of passing it in\n  if (process.env.EXPO_APPLE_ID && !passedAppleIdPassword) {\n    throw new CommandError(\n      'In order to provide your Apple ID credentials, you must set the --apple-id flag and set the EXPO_APPLE_PASSWORD environment variable.'\n    );\n  }\n  return {\n    ...userCredentials,\n    username: passedAppleId,\n    password: passedAppleIdPassword,\n  };\n}\n\nasync function promptUsernameAsync(): Promise<string> {\n  Log.log('\\u203A Log in to your Apple Developer account to continue');\n\n  // Get the email address that was last used and set it as\n  // the default value for quicker authentication.\n  const lastAppleId = await getCachedUsernameAsync();\n\n  const { username } = await promptAsync({\n    type: 'text',\n    name: 'username',\n    message: `Apple ID:`,\n    validate: (val: string) => val !== '',\n    initial: lastAppleId ?? undefined,\n  });\n\n  if (username && username !== lastAppleId) {\n    await cacheUsernameAsync(username);\n  }\n\n  return username;\n}\n\nasync function cacheUsernameAsync(username: string): Promise<void> {\n  // If a new email was used then store it as a suggestion for next time.\n  // This functionality is disabled using the keychain mechanism.\n  if (!Keychain.EXPO_NO_KEYCHAIN && username) {\n    const cachedPath = JsonFileCache.usernameCachePath();\n    await JsonFileCache.cacheAsync(cachedPath, { username });\n  }\n}\n\nexport async function promptPasswordAsync({\n  username,\n}: Pick<Auth.UserCredentials, 'username'>): Promise<string> {\n  const cachedPassword = await getCachedPasswordAsync({ username });\n\n  if (cachedPassword) {\n    Log.log(`\\u203A Using password for ${username} from your local Keychain`);\n    Log.log(`  ${learnMore('https://docs.expo.dev/distribution/security#keychain')}`);\n    return cachedPassword;\n  }\n\n  // https://docs.expo.dev/distribution/security/#apple-developer-account-credentials\n  Log.log(\n    wrapAnsi(\n      chalk.bold(\n        `\\u203A The password is only used to authenticate with Apple and never stored on EAS servers`\n      ),\n      process.stdout.columns || 80\n    )\n  );\n  Log.log(`  ${learnMore('https://bit.ly/2VtGWhU')}`);\n\n  const { password } = await promptAsync({\n    type: 'password',\n    name: 'password',\n    message: () => `Password (for ${username}):`,\n    validate: (val: string) => val !== '',\n  });\n\n  // TODO: Save only after the auth completes successfully.\n  await cachePasswordAsync({ username, password });\n  return password;\n}\n\nasync function getCachedUsernameAsync(): Promise<string | null> {\n  if (Keychain.EXPO_NO_KEYCHAIN) {\n    // Clear last used apple ID.\n    await fs.remove(JsonFileCache.usernameCachePath());\n    return null;\n  }\n  const cached = await JsonFileCache.getCacheAsync(JsonFileCache.usernameCachePath());\n  const lastAppleId = cached?.username ?? null;\n  return typeof lastAppleId === 'string' ? lastAppleId : null;\n}\n\n/**\n * Returns the same prefix used by Fastlane in order to potentially share access between services.\n * [Cite. Fastlane](https://github.com/fastlane/fastlane/blob/f831062fa6f4b216b8ee38949adfe28fc11a0a8e/credentials_manager/lib/credentials_manager/account_manager.rb#L8).\n *\n * @param appleId email address\n */\nfunction getKeychainServiceName(appleId: string): string {\n  return `deliver.${appleId}`;\n}\n\nexport async function deletePasswordAsync({\n  username,\n}: Pick<Auth.UserCredentials, 'username'>): Promise<boolean> {\n  const serviceName = getKeychainServiceName(username);\n  const success = await Keychain.deletePasswordAsync({ username, serviceName });\n  if (success) {\n    Log.log('\\u203A Removed Apple ID password from the native Keychain');\n  }\n  return success;\n}\n\nasync function getCachedPasswordAsync({\n  username,\n}: Pick<Auth.UserCredentials, 'username'>): Promise<string | null> {\n  // If the user opts out, delete the password.\n  if (Keychain.EXPO_NO_KEYCHAIN) {\n    await deletePasswordAsync({ username });\n    return null;\n  }\n\n  const serviceName = getKeychainServiceName(username);\n  return Keychain.getPasswordAsync({ username, serviceName });\n}\n\nasync function cachePasswordAsync({ username, password }: Auth.UserCredentials): Promise<boolean> {\n  if (Keychain.EXPO_NO_KEYCHAIN) {\n    Log.log('\\u203A Skip storing Apple ID password in the local Keychain.');\n    return false;\n  }\n\n  Log.log(`\\u203A Saving Apple ID password to the local Keychain`);\n  Log.log(`  ${learnMore('https://docs.expo.dev/distribution/security#keychain')}`);\n  const serviceName = getKeychainServiceName(username);\n  return Keychain.setPasswordAsync({ username, password, serviceName });\n}\n"],"file":"resolveCredentials.js"}