{"version":3,"sources":["../../src/appleApi/pushKey.ts"],"names":["isPushKey","obj","apnsKeyP8","apnsKeyId","teamId","MaxKeysCreatedError","Keys","APPLE_KEYS_TOO_MANY_GENERATED_ERROR","chalk","underline","listPushKeysAsync","authCtx","spinner","start","context","keys","getKeysAsync","succeed","error","fail","createPushKeyAsync","name","key","createKeyAsync","isApns","downloadKeyAsync","id","team","teamName","err","resultString","rawDump","match","CommandError","revokePushKeyAsync","ids","length","Promise","all","map","revokeKeyAsync","Log","PushKeyManager","constructor","appleCtx","ctx","list","create","revoke","format"],"mappings":"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","sourcesContent":["import { Keys } from '@expo/apple-utils';\nimport chalk from 'chalk';\nimport dateformat from 'dateformat';\n\nimport CommandError from '../CommandError';\nimport Log from '../log';\nimport { ora } from '../utils/ora';\nimport { AppleCtx, getRequestContext } from './authenticate';\n\nexport type PushKeyInfo = {\n  id: string;\n  name: string;\n};\n\nexport type PushKey = {\n  apnsKeyP8: string;\n  apnsKeyId: string;\n  teamId: string;\n  teamName?: string;\n};\n\nexport function isPushKey(obj: { [key: string]: any }): obj is PushKey {\n  return (\n    obj.apnsKeyP8 &&\n    typeof obj.apnsKeyP8 === 'string' &&\n    obj.apnsKeyId &&\n    typeof obj.apnsKeyId === 'string' &&\n    obj.teamId &&\n    typeof obj.teamId === 'string'\n  );\n}\n\nconst { MaxKeysCreatedError } = Keys;\n\nconst APPLE_KEYS_TOO_MANY_GENERATED_ERROR = `\nYou can have only ${chalk.underline('two')} Apple Keys generated on your Apple Developer account.\nPlease revoke the old ones or reuse existing from your other apps.\nPlease remember that Apple Keys are not application specific!\n`;\n\nasync function listPushKeysAsync(authCtx: AppleCtx): Promise<PushKeyInfo[]> {\n  const spinner = ora(`Fetching Apple push keys`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    const keys = await Keys.getKeysAsync(context);\n    spinner.succeed(`Fetched Apple push keys`);\n    return keys;\n  } catch (error) {\n    spinner.fail(`Failed to fetch Apple push keys`);\n    throw error;\n  }\n}\n\nasync function createPushKeyAsync(\n  authCtx: AppleCtx,\n  name: string = `Expo Push Notifications Key ${dateformat('yyyymmddHHMMss')}`\n): Promise<PushKey> {\n  const spinner = ora(`Creating Apple push key`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    const key = await Keys.createKeyAsync(context, { name, isApns: true });\n    const apnsKeyP8 = await Keys.downloadKeyAsync(context, { id: key.id });\n    spinner.succeed(`Created Apple push key`);\n    return {\n      apnsKeyId: key.id,\n      apnsKeyP8,\n      teamId: authCtx.team.id,\n      teamName: authCtx.team.name,\n    };\n  } catch (err) {\n    spinner.fail('Failed to create Apple push key');\n    const resultString = err.rawDump?.resultString;\n    if (\n      err instanceof MaxKeysCreatedError ||\n      (resultString && resultString.match(/maximum allowed number of Keys/))\n    ) {\n      throw new CommandError(APPLE_KEYS_TOO_MANY_GENERATED_ERROR);\n    }\n    throw err;\n  }\n}\n\nasync function revokePushKeyAsync(authCtx: AppleCtx, ids: string[]): Promise<void> {\n  const name = `Apple push key${ids?.length === 1 ? '' : 's'}`;\n\n  const spinner = ora(`Revoking ${name}`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    await Promise.all(ids.map(id => Keys.revokeKeyAsync(context, { id })));\n\n    spinner.succeed(`Revoked ${name}`);\n  } catch (error) {\n    Log.error(error);\n    spinner.fail(`Failed to revoke ${name}`);\n    throw error;\n  }\n}\n\nexport class PushKeyManager {\n  ctx: AppleCtx;\n  constructor(appleCtx: AppleCtx) {\n    this.ctx = appleCtx;\n  }\n\n  async list(): Promise<PushKeyInfo[]> {\n    return listPushKeysAsync(this.ctx);\n  }\n\n  async create(name?: string): Promise<PushKey> {\n    return createPushKeyAsync(this.ctx, name);\n  }\n\n  async revoke(ids: string[]) {\n    return revokePushKeyAsync(this.ctx, ids);\n  }\n\n  format({ id, name }: PushKeyInfo): string {\n    return `${name} - ID: ${id}`;\n  }\n}\n"],"file":"pushKey.js"}