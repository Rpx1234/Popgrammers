{"version":3,"sources":["../../src/utils/handleErrors.ts"],"names":["handleErrorsAsync","err","command","AbortCommandError","SilentError","isCommandError","isPluginError","AssertionError","Log","error","message","_isApiError","isXDLError","isConfigError","isJsonFileError","isPackageManagerError","code","addNewLineIfNone","formatStackTrace","stacktrace","stack","chalk","gray"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEO,eAAeA,iBAAf,CAAiCC,GAAjC,EAA2C;AAAEC,EAAAA,OAAO,GAAG;AAAZ,CAA3C,EAA4F;AACjG;AACA,MAAID,GAAG,YAAYE,iCAAf,IAAoCF,GAAG,YAAYG,2BAAvD,EAAoE,CAClE;AACD,GAFD,MAEO,IAAIH,GAAG,CAACI,cAAJ,IAAsBJ,GAAG,CAACK,aAA1B,IAA2CL,GAAG,YAAYM,wBAA9D,EAA8E;AACnFC,mBAAIC,KAAJ,CAAUR,GAAG,CAACS,OAAd;AACD,GAFM,MAEA,IAAIT,GAAG,CAACU,WAAR,EAAqB;AAC1BH,mBAAIC,KAAJ,CAAUR,GAAG,CAACS,OAAd;AACD,GAFM,MAEA,IAAIT,GAAG,CAACW,UAAJ,IAAkBX,GAAG,CAACY,aAA1B,EAAyC;AAC9CL,mBAAIC,KAAJ,CAAUR,GAAG,CAACS,OAAd;AACD,GAFM,MAEA,IAAIT,GAAG,CAACa,eAAJ,IAAuBb,GAAG,CAACc,qBAA/B,EAAsD;AAC3D,QAAId,GAAG,CAACe,IAAJ,KAAa,YAAjB,EAA+B;AAC7B;AACAR,qBAAIC,KAAJ,CAAUR,GAAG,CAACS,OAAd;AACD,KAHD,MAGO;AACLF,qBAAIS,gBAAJ;;AACAT,qBAAIC,KAAJ,CAAUR,GAAG,CAACS,OAAd;;AACA,YAAM;AAAEQ,QAAAA;AAAF,UAAuB,mEAAa,oBAAb,GAA7B;AACA,YAAMC,UAAU,GAAGD,gBAAgB,CAACjB,GAAG,CAACmB,KAAL,EAAYlB,OAAZ,CAAnC;;AACAM,qBAAIC,KAAJ,CAAUY,iBAAMC,IAAN,CAAWH,UAAX,CAAV;AACD;AACF,GAXM,MAWA;AACLX,mBAAIC,KAAJ,CAAUR,GAAG,CAACS,OAAd;;AACAF,mBAAIC,KAAJ,CAAUY,iBAAMC,IAAN,CAAWrB,GAAG,CAACmB,KAAf,CAAV;AACD,GAxBgG,CA0BjG;;AACD","sourcesContent":["import { AssertionError } from 'assert';\nimport chalk from 'chalk';\n\nimport { AbortCommandError, SilentError } from '../CommandError';\nimport Log from '../log';\n\nexport async function handleErrorsAsync(err: any, { command = '[unknown]' }: { command?: string }) {\n  // TODO: Find better ways to consolidate error messages\n  if (err instanceof AbortCommandError || err instanceof SilentError) {\n    // Do nothing when a prompt is cancelled or the error is logged in a pretty way.\n  } else if (err.isCommandError || err.isPluginError || err instanceof AssertionError) {\n    Log.error(err.message);\n  } else if (err._isApiError) {\n    Log.error(err.message);\n  } else if (err.isXDLError || err.isConfigError) {\n    Log.error(err.message);\n  } else if (err.isJsonFileError || err.isPackageManagerError) {\n    if (err.code === 'EJSONEMPTY') {\n      // Empty JSON is an easy bug to debug. Often this is thrown for package.json or app.json being empty.\n      Log.error(err.message);\n    } else {\n      Log.addNewLineIfNone();\n      Log.error(err.message);\n      const { formatStackTrace } = await import('./formatStackTrace');\n      const stacktrace = formatStackTrace(err.stack, command);\n      Log.error(chalk.gray(stacktrace));\n    }\n  } else {\n    Log.error(err.message);\n    Log.error(chalk.gray(err.stack));\n  }\n\n  //   process.exit(1);\n}\n"],"file":"handleErrors.js"}