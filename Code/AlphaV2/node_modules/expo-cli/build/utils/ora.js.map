{"version":3,"sources":["../../src/utils/ora.ts"],"names":["logReal","console","log","infoReal","info","warnReal","warn","errorReal","error","ora","options","inputOptions","text","disabled","program","nonInteractive","Log","isDebug","spinner","isEnabled","stream","process","stdout","stderr","oraStart","start","bind","oraStop","stop","oraStopAndPersist","stopAndPersist","logWrap","method","args","wrapNativeLogs","resetNativeLogs","result","setSpinner","logNewSection","title","chalk","bold"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport program from 'commander';\nimport oraReal, { Ora } from 'ora';\n\nimport Log from '../log';\n\n// eslint-disable-next-line no-console\nconst logReal = console.log;\n// eslint-disable-next-line no-console\nconst infoReal = console.info;\n// eslint-disable-next-line no-console\nconst warnReal = console.warn;\n// eslint-disable-next-line no-console\nconst errorReal = console.error;\n\n/**\n * A custom ora spinner that sends the stream to stdout in CI, non-TTY, or expo's non-interactive flag instead of stderr (the default).\n *\n * @param options\n * @returns\n */\nexport function ora(options?: oraReal.Options | string): oraReal.Ora {\n  const inputOptions = typeof options === 'string' ? { text: options } : options || {};\n  const disabled = program.nonInteractive || Log.isDebug;\n  const spinner = oraReal({\n    // Ensure our non-interactive mode emulates CI mode.\n    isEnabled: !disabled,\n    // In non-interactive mode, send the stream to stdout so it prevents looking like an error.\n    stream: disabled ? process.stdout : process.stderr,\n    ...inputOptions,\n  });\n\n  const oraStart = spinner.start.bind(spinner);\n  const oraStop = spinner.stop.bind(spinner);\n  const oraStopAndPersist = spinner.stopAndPersist.bind(spinner);\n\n  const logWrap = (method: any, args: any[]): void => {\n    oraStop();\n    method(...args);\n    spinner.start();\n  };\n\n  const wrapNativeLogs = (): void => {\n    // eslint-disable-next-line no-console\n    console.log = (...args: any) => logWrap(logReal, args);\n    // eslint-disable-next-line no-console\n    console.info = (...args: any) => logWrap(infoReal, args);\n    // eslint-disable-next-line no-console\n    console.warn = (...args: any) => logWrap(warnReal, args);\n    // eslint-disable-next-line no-console\n    console.error = (...args: any) => logWrap(errorReal, args);\n  };\n\n  const resetNativeLogs = (): void => {\n    // eslint-disable-next-line no-console\n    console.log = logReal;\n    // eslint-disable-next-line no-console\n    console.info = logReal;\n    // eslint-disable-next-line no-console\n    console.warn = warnReal;\n    // eslint-disable-next-line no-console\n    console.error = errorReal;\n  };\n\n  spinner.start = (text): Ora => {\n    wrapNativeLogs();\n    return oraStart(text);\n  };\n\n  spinner.stopAndPersist = (options): Ora => {\n    const result = oraStopAndPersist(options);\n    resetNativeLogs();\n    return result;\n  };\n\n  spinner.stop = (): Ora => {\n    const result = oraStop();\n    resetNativeLogs();\n    return result;\n  };\n\n  // Always make the central logging module aware of the current spinner\n  Log.setSpinner(spinner);\n\n  return spinner;\n}\n\n/**\n * Create a unified section spinner.\n *\n * @param title\n * @returns\n */\nexport function logNewSection(title: string) {\n  const spinner = ora(chalk.bold(title));\n  // Prevent the spinner from clashing with debug logs\n  spinner.start();\n  return spinner;\n}\n"],"file":"ora.js"}