{"version":3,"sources":["../../src/utils/validators.ts"],"names":["nonEmptyInput","val","promptsNonEmptyInput","promptsExistingFile","filePath","stats","fs","promises","stat","isFile"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,SAASA,aAAT,CAAuBC,GAAvB,EAAoC;AAClC,SAAOA,GAAG,KAAK,EAAf;AACD,C,CAED;AACA;;;AACA,MAAMC,oBAAoB,GAAGF,aAA7B;;;AACA,MAAMG,mBAAmB,GAAG,MAAOC,QAAP,IAA4B;AACtD,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMC,cAAGC,QAAH,CAAYC,IAAZ,CAAiBJ,QAAjB,CAApB;;AACA,QAAIC,KAAK,CAACI,MAAN,EAAJ,EAAoB;AAClB,aAAO,IAAP;AACD;;AACD,WAAO,sBAAP;AACD,GAND,CAME,MAAM;AACN,WAAO,sBAAP;AACD;AACF,CAVD","sourcesContent":["import fs from 'fs';\n\nfunction nonEmptyInput(val: string) {\n  return val !== '';\n}\n\n// note(cedric): export prompts-compatible validators,\n// refactor when prompt is replaced with prompts\nconst promptsNonEmptyInput = nonEmptyInput;\nconst promptsExistingFile = async (filePath: string) => {\n  try {\n    const stats = await fs.promises.stat(filePath);\n    if (stats.isFile()) {\n      return true;\n    }\n    return 'Input is not a file.';\n  } catch {\n    return 'File does not exist.';\n  }\n};\n\nexport { nonEmptyInput, promptsNonEmptyInput, promptsExistingFile };\n"],"file":"validators.js"}