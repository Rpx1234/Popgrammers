{"version":3,"sources":["../../src/utils/prompts.ts"],"names":["color","require","strikethrough","gray","prompt","questions","nonInteractiveHelp","options","Array","isArray","program","nonInteractive","length","message","question","questionMessage","undefined","trim","replace","CommandError","onCancel","AbortCommandError","separator","title","disabled","value","autoCompleteAsync","limit","suggest","input","choices","regex","RegExp","filter","choice","test","name","type","selectAsync","onRender","firstRender","cursor","fire","up","next","moveCursor","render","bell","down","i","confirmAsync","initial","toggleConfirmAsync","active","inactive","promptEmailAsync","format","validate"],"mappings":"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","sourcesContent":["import program from 'commander';\nimport prompts, { Options, PromptObject, PromptType } from 'prompts';\n\nimport CommandError, { AbortCommandError } from '../CommandError';\n\n// NOTE(brentvatne): we don't use strikethrough anywhere in expo-cli currently,\n// and prompts doesn't give us control over disabled styles (1), so until we\n// open a PR to prompts to make it more extensible in this regard we can just\n// have strikethrough make text grey instead through monkey-patching it.\n//\n// (1): https://github.com/terkelg/prompts/blob/972fbb2d43c7b1ee5058800f441daaf51f2c240f/lib/elements/select.js#L152-L154\nconst color = require('kleur');\ncolor.strikethrough = color.gray;\n\nexport type Question<V extends string = string> = PromptObject<V> & {\n  optionsPerPage?: number;\n};\n\nexport { PromptType };\n\ntype PromptOptions = { nonInteractiveHelp?: string } & Options;\n\nexport default function prompt(\n  questions: Question | Question[],\n  { nonInteractiveHelp, ...options }: PromptOptions = {}\n) {\n  questions = Array.isArray(questions) ? questions : [questions];\n  if (program.nonInteractive && questions.length !== 0) {\n    let message = `Input is required, but Expo CLI is in non-interactive mode.\\n`;\n    if (nonInteractiveHelp) {\n      message += nonInteractiveHelp;\n    } else {\n      const question = questions[0];\n      const questionMessage =\n        typeof question.message === 'function'\n          ? question.message(undefined, {}, question)\n          : question.message;\n\n      message += `Required input:\\n${(questionMessage || '').trim().replace(/^/gm, '> ')}`;\n    }\n    throw new CommandError('NON_INTERACTIVE', message);\n  }\n  return prompts(questions, {\n    onCancel() {\n      throw new AbortCommandError();\n    },\n    ...options,\n  });\n}\n\n// todo: replace this workaround, its still selectable by the cursor\n// see: https://github.com/terkelg/prompts/issues/254\nprompt.separator = (title: string) => ({ title, disabled: true, value: undefined });\n\nexport type NamelessQuestion = Omit<Question<'value'>, 'name' | 'type'>;\n\n/**\n * Create an auto complete list that can be searched and cancelled.\n *\n * @param questions\n * @param options\n */\nexport async function autoCompleteAsync(\n  questions: NamelessQuestion | NamelessQuestion[],\n  options?: PromptOptions\n): Promise<string> {\n  const { value } = await prompt(\n    {\n      limit: 11,\n      suggest(input: any, choices: any) {\n        const regex = new RegExp(input, 'i');\n        return choices.filter((choice: any) => regex.test(choice.title));\n      },\n      ...questions,\n      name: 'value',\n      type: 'autocomplete',\n    },\n    options\n  );\n  return value ?? null;\n}\n\n/**\n * Create a selection list that can be cancelled.\n *\n * @param questions\n * @param options\n */\nexport async function selectAsync(\n  questions: NamelessQuestion,\n  options?: PromptOptions\n): Promise<any> {\n  const { value } = await prompt(\n    {\n      limit: 11,\n      ...questions,\n      // @ts-ignore: onRender not in the types\n      onRender(this: {\n        cursor: number;\n        firstRender: boolean;\n        choices: (Omit<prompts.Choice, 'disable'> & { disabled?: boolean })[];\n        value: string;\n        render: () => void;\n        moveCursor: (n: number) => void;\n        fire: () => void;\n        up: () => void;\n        down: () => void;\n        bell: () => void;\n        next: () => void;\n      }) {\n        if (this.firstRender) {\n          // Ensure the initial state isn't on a disabled item.\n          while (this.choices[this.cursor].disabled) {\n            this.cursor++;\n            if (this.cursor > this.choices.length - 1) break;\n          }\n          this.fire();\n          // Without this, the value will be `0` instead of a string.\n          this.value = (this.choices[this.cursor] || {}).value;\n\n          // Support up arrow and `k` key -- no looping\n          this.up = () => {\n            let next = this.cursor;\n            while (true) {\n              if (next <= 0) break;\n              next--;\n              if (!this.choices[next].disabled) break;\n            }\n            if (!this.choices[next].disabled && next !== this.cursor) {\n              this.moveCursor(next);\n              this.render();\n            } else {\n              this.bell();\n            }\n          };\n\n          // Support down arrow and `j` key -- no looping\n          this.down = () => {\n            let next = this.cursor;\n            while (true) {\n              if (next >= this.choices.length - 1) break;\n              next++;\n              if (!this.choices[next].disabled) break;\n            }\n            if (!this.choices[next].disabled && next !== this.cursor) {\n              this.moveCursor(next);\n              this.render();\n            } else {\n              this.bell();\n            }\n          };\n\n          // Support tab -- looping\n          this.next = () => {\n            let next = this.cursor;\n            let i = 0;\n            while (i < this.choices.length) {\n              i++;\n              next = (next + 1) % this.choices.length;\n              if (!this.choices[next].disabled) break;\n            }\n            if (!this.choices[next].disabled) {\n              this.moveCursor(next);\n              this.render();\n            } else {\n              // unexpected\n              this.bell();\n            }\n          };\n        }\n      },\n      name: 'value',\n      type: 'select',\n    },\n    options\n  );\n  return value ?? null;\n}\n\n/**\n * Create a standard yes/no confirmation that can be cancelled.\n *\n * @param questions\n * @param options\n */\nexport async function confirmAsync(\n  questions: NamelessQuestion,\n  options?: PromptOptions\n): Promise<boolean> {\n  const { value } = await prompt(\n    {\n      initial: true,\n      ...questions,\n      name: 'value',\n      type: 'confirm',\n    },\n    options\n  );\n  return value ?? null;\n}\n\n/**\n * Create a more dynamic yes/no confirmation that can be cancelled.\n *\n * @param questions\n * @param options\n */\nexport async function toggleConfirmAsync(\n  questions: NamelessQuestion,\n  options?: PromptOptions\n): Promise<boolean> {\n  const { value } = await prompt(\n    {\n      active: 'yes',\n      inactive: 'no',\n      ...questions,\n      name: 'value',\n      type: 'toggle',\n    },\n    options\n  );\n  return value ?? null;\n}\n\n/**\n * Prompt the user for an email address.\n *\n * @param questions\n * @param options\n */\nexport async function promptEmailAsync(\n  questions: NamelessQuestion,\n  options?: PromptOptions\n): Promise<string> {\n  const { value } = await prompt(\n    {\n      type: 'text',\n      format: value => value.trim(),\n      validate: (value: string) =>\n        /.+@.+/.test(value) ? true : \"That doesn't look like a valid email.\",\n      ...questions,\n      name: 'value',\n    },\n    options\n  );\n  return value.trim();\n}\n"],"file":"prompts.js"}