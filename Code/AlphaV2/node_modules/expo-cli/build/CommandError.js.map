{"version":3,"sources":["../src/CommandError.ts"],"names":["ERROR_PREFIX","ErrorCodes","INVALID_PROJECT_DIR","INVALID_PROJECT_NAME","INVALID_RUNTIME_VERSION","INVALID_PUBLIC_URL","INVALID_UPDATE_URL","NOT_LOGGED_IN","NON_INTERACTIVE","ACCESS_TOKEN_ERROR","BAD_CHOICE","MISSING_PUBLIC_URL","APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR","APPLE_PUSH_KEYS_TOO_MANY_GENERATED_ERROR","MISSING_SLUG","PROJECT_NOT_FOUND","CommandError","Error","constructor","code","message","startsWith","substring","length","AbortCommandError","SilentError","messageOrError","stack","name"],"mappings":";;;;;;;;;AAAA,MAAMA,YAAY,GAAG,SAArB;AAEO,MAAMC,UAAU,GAAG;AACxBC,EAAAA,mBAAmB,EAAE,qBADG;AAExBC,EAAAA,oBAAoB,EAAE,sBAFE;AAGxBC,EAAAA,uBAAuB,EAAE,yBAHD;AAIxBC,EAAAA,kBAAkB,EAAE,oBAJI;AAKxBC,EAAAA,kBAAkB,EAAE,oBALI;AAMxBC,EAAAA,aAAa,EAAE,eANS;AAOxBC,EAAAA,eAAe,EAAE,iBAPO;AAQxBC,EAAAA,kBAAkB,EAAE,oBARI;AASxBC,EAAAA,UAAU,EAAE,YATY;AAUxBC,EAAAA,kBAAkB,EAAE,oBAVI;AAWxBC,EAAAA,yCAAyC,EAAE,2CAXnB;AAYxBC,EAAAA,wCAAwC,EAAE,0CAZlB;AAaxBC,EAAAA,YAAY,EAAE,cAbU;AAcxBC,EAAAA,iBAAiB,EAAE;AAdK,CAAnB;;;AAmBP;AACA;AACA;AACe,MAAMC,YAAN,SAA2BC,KAA3B,CAAiC;AAK9CC,EAAAA,WAAW,CAACC,IAAD,EAAeC,OAAe,GAAG,EAAjC,EAAqC;AAC9C,UAAM,EAAN,EAD8C,CAE9C;AACA;;AAH8C,kCAJzC,cAIyC;;AAAA,4CAHtB,IAGsB;;AAAA;;AAI9C,QAAIA,OAAO,CAACC,UAAR,CAAmBrB,YAAnB,CAAJ,EAAsC;AACpCoB,MAAAA,OAAO,GAAGA,OAAO,CAACE,SAAR,CAAkBtB,YAAY,CAACuB,MAA/B,CAAV;AACD;;AAED,SAAKH,OAAL,GAAeA,OAAO,IAAID,IAA1B;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AAf6C;;;;AAiBzC,MAAMK,iBAAN,SAAgCR,YAAhC,CAA6C;AAClDE,EAAAA,WAAW,GAAG;AACZ,UAAM,SAAN,EAAiB,mCAAjB;AACD;;AAHiD;AAMpD;AACA;AACA;;;;;AACO,MAAMO,WAAN,SAA0BT,YAA1B,CAAuC;AAC5CE,EAAAA,WAAW,CAACQ,cAAD,EAAkC;AAAA;;AAC3C,UAAMN,OAAO,WACV,OAAOM,cAAP,KAA0B,QAA1B,GAAqCA,cAArC,GAAsDA,cAAtD,aAAsDA,cAAtD,uBAAsDA,cAAc,CAAEN,OAD5D,uCAEX,4CAFF;AAGA,UAAM,QAAN,EAAgBA,OAAhB;;AACA,QAAI,OAAOM,cAAP,KAA0B,QAA9B,EAAwC;AAAA;;AACtC;AACA,WAAKC,KAAL,4BAAaD,cAAb,aAAaA,cAAb,uBAAaA,cAAc,CAAEC,KAA7B,yEAAsC,KAAKA,KAA3C;AACA,WAAKC,IAAL,2BAAYF,cAAZ,aAAYA,cAAZ,uBAAYA,cAAc,CAAEE,IAA5B,uEAAoC,KAAKA,IAAzC;AACD;AACF;;AAX2C","sourcesContent":["const ERROR_PREFIX = 'Error: ';\n\nexport const ErrorCodes = {\n  INVALID_PROJECT_DIR: 'INVALID_PROJECT_DIR',\n  INVALID_PROJECT_NAME: 'INVALID_PROJECT_NAME',\n  INVALID_RUNTIME_VERSION: 'INVALID_RUNTIME_VERSION',\n  INVALID_PUBLIC_URL: 'INVALID_PUBLIC_URL',\n  INVALID_UPDATE_URL: 'INVALID_UPDATE_URL',\n  NOT_LOGGED_IN: 'NOT_LOGGED_IN',\n  NON_INTERACTIVE: 'NON_INTERACTIVE',\n  ACCESS_TOKEN_ERROR: 'ACCESS_TOKEN_ERROR',\n  BAD_CHOICE: 'BAD_CHOICE',\n  MISSING_PUBLIC_URL: 'MISSING_PUBLIC_URL',\n  APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR: 'APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR',\n  APPLE_PUSH_KEYS_TOO_MANY_GENERATED_ERROR: 'APPLE_PUSH_KEYS_TOO_MANY_GENERATED_ERROR',\n  MISSING_SLUG: 'MISSING_SLUG',\n  PROJECT_NOT_FOUND: 'PROJECT_NOT_FOUND',\n};\n\nexport type ErrorCode = keyof typeof ErrorCodes;\n\n/**\n * General error, formatted as a message in red text when caught by expo-cli (no stack trace is printed). Should be used in favor of `log.error()` in most cases.\n */\nexport default class CommandError extends Error {\n  name = 'CommandError';\n  readonly isCommandError = true;\n  code: string;\n\n  constructor(code: string, message: string = '') {\n    super('');\n    // If e.toString() was called to get `message` we don't want it to look\n    // like \"Error: Error:\".\n    if (message.startsWith(ERROR_PREFIX)) {\n      message = message.substring(ERROR_PREFIX.length);\n    }\n\n    this.message = message || code;\n    this.code = code;\n  }\n}\nexport class AbortCommandError extends CommandError {\n  constructor() {\n    super('ABORTED', 'Interactive prompt was cancelled.');\n  }\n}\n\n/**\n * Used to end a CLI process without printing a stack trace in the Expo CLI. Should be used in favor of `process.exit`.\n */\nexport class SilentError extends CommandError {\n  constructor(messageOrError?: string | Error) {\n    const message =\n      (typeof messageOrError === 'string' ? messageOrError : messageOrError?.message) ??\n      'This error should fail silently in the CLI';\n    super('SILENT', message);\n    if (typeof messageOrError !== 'string') {\n      // forward the props of the incoming error for tests or processes outside of expo-cli that use expo cli internals.\n      this.stack = messageOrError?.stack ?? this.stack;\n      this.name = messageOrError?.name ?? this.name;\n    }\n  }\n}\n"],"file":"CommandError.js"}